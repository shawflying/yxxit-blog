{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/header.png","path":"img/header.png","modified":0,"renderable":0},{"_id":"source/img/img-04.jpg","path":"img/img-04.jpg","modified":0,"renderable":0},{"_id":"source/img/img-08.jpg","path":"img/img-08.jpg","modified":0,"renderable":0},{"_id":"source/img/window.error.png","path":"img/window.error.png","modified":0,"renderable":0},{"_id":"source/img/window-err-b.jpg","path":"img/window-err-b.jpg","modified":0,"renderable":0},{"_id":"source/img/img-05.jpg","path":"img/img-05.jpg","modified":0,"renderable":0},{"_id":"source/img/img-03.jpg","path":"img/img-03.jpg","modified":0,"renderable":0},{"_id":"source/img/img-06.jpg","path":"img/img-06.jpg","modified":0,"renderable":0},{"_id":"source/img/webp/header.webp","path":"img/webp/header.webp","modified":0,"renderable":0},{"_id":"source/img/nssm-edit.jpg","path":"img/nssm-edit.jpg","modified":0,"renderable":0},{"_id":"themes/vexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/qrious.js","path":"js/qrious.js","modified":0,"renderable":1},{"_id":"source/img/background-list.jpg","path":"img/background-list.jpg","modified":0,"renderable":0},{"_id":"source/img/img-01.jpg","path":"img/img-01.jpg","modified":0,"renderable":0},{"_id":"source/img/img-02.jpg","path":"img/img-02.jpg","modified":0,"renderable":0},{"_id":"source/img/img-07.jpg","path":"img/img-07.jpg","modified":0,"renderable":0},{"_id":"source/img/webp/about.webp","path":"img/webp/about.webp","modified":0,"renderable":0},{"_id":"source/img/phpStudy.jpg","path":"img/phpStudy.jpg","modified":0,"renderable":0},{"_id":"source/img/Apache-edit.jpg","path":"img/Apache-edit.jpg","modified":0,"renderable":0},{"_id":"themes/vexo/source/css/images/escheres.png","path":"css/images/escheres.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/logo.ico","path":"css/images/logo.ico","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/top.png","path":"css/images/top.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/menu.png","path":"css/images/menu.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","path":"fonts/SourceSansPro.ttf","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/plugins/gitment.css","path":"css/plugins/gitment.css","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/alipay.jpg","path":"css/images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/wechat.jpg","path":"css/images/wechat.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"350b0c452d249500aa8cedd6f878e9f489e97a68","modified":1524812196815},{"_id":"themes/vexo/.gitignore","hash":"37fb9fd49e7f944716efd3284a6bf55adb6dd0c2","modified":1524810662021},{"_id":"themes/vexo/LICENSE","hash":"3e135cd69c0e02c0a49dd43d571f600223cc61d1","modified":1524810662024},{"_id":"themes/vexo/.travis.yml","hash":"ade5797c6eb124979b4af6f94e86c1431337b5d7","modified":1524810662022},{"_id":"themes/vexo/README.md","hash":"9c72a193211a48689e7c700ed7d7aa54123d862c","modified":1524810662026},{"_id":"themes/vexo/_config.yml","hash":"c1b2b957094db550007f6bdfb43be4f520c76e9b","modified":1524820757116},{"_id":"themes/vexo/lint.sh","hash":"f580302e4aa9ccfb95a253851da6501d145613fe","modified":1524810662043},{"_id":"themes/vexo/package.json","hash":"4a839847a872079d154a4884182a7bc773e76535","modified":1524810662043},{"_id":"source/_drafts/list.md","hash":"969460ca51710d9379303991518334911733e3b9","modified":1524810661901},{"_id":"source/_posts/bookslist.md","hash":"13730cb9c9d0550cbd767a11af71d225dd751330","modified":1524810661906},{"_id":"source/_posts/Spring.boot_init.md","hash":"fa669e1045951ca4f3b6bcfff89d701ef6c3863c","modified":1524821793743},{"_id":"source/_posts/es5.md","hash":"18dcc32308e111c3e6b45f9c317cf21ddf8b5c3e","modified":1524814117847},{"_id":"source/_posts/git.md","hash":"5597bbbfb7d48f5bc71e9911d66aa7f6927ea1e0","modified":1524814136886},{"_id":"source/_posts/hexo.md","hash":"e5e386efcfc34490e917549aad65ae8f48151e36","modified":1524814049655},{"_id":"source/_posts/http-server.md","hash":"1cc8ef60f224da2a18a2ad6e6013743116fa0300","modified":1524821531644},{"_id":"source/_posts/deepin.md","hash":"4a6dc18225673ded7dd7dfffbbfad7552f2ebdcf","modified":1524819362069},{"_id":"source/_posts/node.js_window.onerror.md","hash":"b83bba8271d617b266cc8222b22db0dadf6e73a1","modified":1524820757115},{"_id":"source/_posts/nodejs开发规范.md","hash":"25b45798a275f1f53d6a9a110639985f3c62cef1","modified":1524814153052},{"_id":"source/_posts/node.js 6.9.4_update.md","hash":"22525a1efd5d7adcc32d7295b8aaf088b8c4f2ff","modified":1524813990029},{"_id":"source/_posts/node.js 模块之 pm2.md","hash":"ce1366aafd19d39b8ff235d14c20acbedf648af6","modified":1524814049654},{"_id":"source/_posts/nodeppt.md","hash":"623830bc5291482cd84e6a5d568b543e0aac0357","modified":1524814049654},{"_id":"source/_posts/shell-node-deploy.md","hash":"cf61329e2bbd2dcd0f80a908ac2f58b6e4f3f370","modified":1524812982220},{"_id":"source/_posts/npm.md","hash":"fd6f4310bed4e492860fbbca9764948c752be52b","modified":1524814049655},{"_id":"source/_posts/picture_upload.md","hash":"e03879d375cf44f4e886de4fc03992b51cc5f6c2","modified":1525401709789},{"_id":"source/_posts/repeat-request.md","hash":"0aee2c125cd90dc089ddf4af2486914f71e18087","modified":1524810661952},{"_id":"source/_posts/token.md","hash":"31f07224773467987776551c0235fa8d97f6ec61","modified":1524813603453},{"_id":"source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1524810661956},{"_id":"source/_posts/webstorm.md","hash":"29247b7c13a7db96ee2438a51dcfce34aa99a9c1","modified":1524813792380},{"_id":"source/_posts/windows nginx natapp.md","hash":"98905f7040fb5326eda764f02680821668133b2b","modified":1524820757116},{"_id":"source/home/index.md","hash":"7922ffd426a95d9d2b4085251f9e3b2dacb986d1","modified":1524810661958},{"_id":"source/img/header.png","hash":"160c23ca2445809dd0f918240e64f3680f5696ea","modified":1524820159559},{"_id":"source/img/img-04.jpg","hash":"cd8a9ac6f9e317471daac3170cf173152e2949ac","modified":1524820159575},{"_id":"source/img/img-08.jpg","hash":"518ded069b82365140d6a8c8a22dfd4486a2724e","modified":1524820159590},{"_id":"source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1524810661960},{"_id":"source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1524810661962},{"_id":"source/img/window.error.png","hash":"d8328e979a39df299984835c07e66c93f8455312","modified":1524820159608},{"_id":"source/img/window-err-b.jpg","hash":"86f7bd0585a21714483978335e3671676e97a703","modified":1524820159607},{"_id":"themes/vexo/layout/about.ejs","hash":"8f4037d230317762aa0092829f37abb50711b3e6","modified":1524810662039},{"_id":"themes/vexo/layout/archive.ejs","hash":"cb12abb19cb70e90d410a6233933eedb3f2c033a","modified":1524810662039},{"_id":"themes/vexo/layout/index.ejs","hash":"9f12f5928d68d4d68175b825e18f89f3b0dfdb69","modified":1524810662039},{"_id":"themes/vexo/layout/layout.ejs","hash":"a7b8f1debdca12d667ecd1bcc3d4bc6e13a23d7b","modified":1524810662040},{"_id":"themes/vexo/layout/page.ejs","hash":"c953764278ac03794e08cfe6d7cc0d378d5e8406","modified":1524810662041},{"_id":"themes/vexo/layout/project.ejs","hash":"da6862233bad6cc4964083aec20f90134586aa3d","modified":1525401812833},{"_id":"themes/vexo/layout/tags.ejs","hash":"5b326e2bd3292b3015d0666b796544d7126acfda","modified":1524810662042},{"_id":"source/img/img-05.jpg","hash":"e191c65e1288b694fb38a3c1d869a7bd682b1451","modified":1524820159579},{"_id":"source/_posts/img/img-04.jpg","hash":"cd8a9ac6f9e317471daac3170cf173152e2949ac","modified":1524810661928},{"_id":"source/_posts/img/img-08.jpg","hash":"518ded069b82365140d6a8c8a22dfd4486a2724e","modified":1524810661948},{"_id":"source/_posts/tool/window_tools.md","hash":"79e077b224dcbe82bff539423fd5759e98bb68ab","modified":1524813979060},{"_id":"source/img/img-03.jpg","hash":"611fb734bd986465f73319c51871fcae4a1844b6","modified":1524820159574},{"_id":"source/img/img-06.jpg","hash":"a86e1621fec332c714b958b25236a95b8c37f2b3","modified":1524820159583},{"_id":"source/img/webp/header.webp","hash":"94e8936090404324191c1edd0ab4a8aea0cec91d","modified":1524820159603},{"_id":"source/img/nssm-edit.jpg","hash":"67f7b0b448a93b2a4ad7f4138fdb0cc25f308d99","modified":1524820159594},{"_id":"themes/vexo/_source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1524810662029},{"_id":"themes/vexo/_source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1524810662031},{"_id":"themes/vexo/_source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1524810662032},{"_id":"themes/vexo/layout/_partial/archive.ejs","hash":"9abbf14034d581569c0b6c992fe22035cb5306b3","modified":1524810662034},{"_id":"themes/vexo/layout/_partial/head.ejs","hash":"883b5463ae11d1679780181e9160c108e7ca7106","modified":1524819872795},{"_id":"themes/vexo/layout/_partial/footer.ejs","hash":"5fb773a03fcc24c8967a1f23b79e2d22e041d311","modified":1524819939777},{"_id":"themes/vexo/layout/_partial/header.ejs","hash":"e544f516b23bc609cc6367190f380c879b935c21","modified":1524810662037},{"_id":"themes/vexo/layout/_partial/pager.ejs","hash":"3a1b9680fbfa3baa76933c7c17216996381ad241","modified":1524810662038},{"_id":"themes/vexo/layout/_partial/tag.ejs","hash":"5d2a2c3f8ca7000945ab426a0c6939421974b224","modified":1524810662038},{"_id":"themes/vexo/layout/_partial/top.ejs","hash":"f09dea486246a580213005b21d4b38810dd16fb3","modified":1524810662038},{"_id":"themes/vexo/source/css/_config.styl","hash":"a74caeb770f4b37b6fdda0976a3befc933e4c03a","modified":1524810662045},{"_id":"themes/vexo/source/css/style.styl","hash":"19a1f52477b8fd52b534314fcb4ea36d6f73c331","modified":1524810662060},{"_id":"themes/vexo/source/js/script.js","hash":"3af31969e302cb4b167fb7ab2141927818efc6f6","modified":1524810662069},{"_id":"themes/vexo/source/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1524810662068},{"_id":"source/_posts/img/img-05.jpg","hash":"e191c65e1288b694fb38a3c1d869a7bd682b1451","modified":1524810661933},{"_id":"source/img/background-list.jpg","hash":"6c66087f3029ee4ebe9758c44ce44510fce346f1","modified":1524820159556},{"_id":"source/img/img-01.jpg","hash":"cac288cb5f48909a2e442049a699a0c9bf99e82f","modified":1524820159564},{"_id":"source/img/img-02.jpg","hash":"b57e63fd643a64a2cf09583b01f74066d107b787","modified":1524820159570},{"_id":"source/img/img-07.jpg","hash":"62feefbb94be500a845b198d5e7dc816a24b39ca","modified":1524820159588},{"_id":"source/img/webp/about.webp","hash":"3d4b91d5c3b0d3f7b8a03ee31d61822f4ccdfc51","modified":1524820159602},{"_id":"source/img/phpStudy.jpg","hash":"c35fe37a875ab7cd6e517e68927a25f93077b196","modified":1524820159601},{"_id":"source/_posts/img/img-03.jpg","hash":"611fb734bd986465f73319c51871fcae4a1844b6","modified":1524810661927},{"_id":"source/_posts/img/img-06.jpg","hash":"a86e1621fec332c714b958b25236a95b8c37f2b3","modified":1524810661937},{"_id":"source/img/Apache-edit.jpg","hash":"c42eb6329b283a9f8d117ab0a4ae255fc576c538","modified":1524820159549},{"_id":"themes/vexo/source/css/_partial/archive.styl","hash":"e80ddf26f2af3523632afeabd57f81592537985a","modified":1524810662046},{"_id":"themes/vexo/source/css/_partial/about.styl","hash":"63fe431713226ab5e11d608a9078eba2002d2ebf","modified":1524810662046},{"_id":"themes/vexo/source/css/_partial/footer.styl","hash":"acc26664e5b3bdb40534496234a66fca2994e905","modified":1524810662047},{"_id":"themes/vexo/source/css/_partial/header.styl","hash":"2780be15507555ed7b1025f195afe228a66c4cae","modified":1524810662047},{"_id":"themes/vexo/source/css/_partial/pager.styl","hash":"888384c67429c7568aa38b5ebe5acae3cc4de367","modified":1524810662048},{"_id":"themes/vexo/source/css/_partial/markdown.styl","hash":"c141d008eae51b55eb0ea0526860046974f3be49","modified":1524810662048},{"_id":"themes/vexo/source/css/_partial/project.styl","hash":"e9b6faadf4852bce3a4141cba0a102a7afb81e9f","modified":1524810662049},{"_id":"themes/vexo/source/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1524810662054},{"_id":"themes/vexo/source/css/_partial/tags.styl","hash":"5198a7f7c221341138ae5c65185e86b6e13e8e26","modified":1524810662049},{"_id":"themes/vexo/source/css/images/logo.ico","hash":"d766aad450483a79063754a2965065f057d24def","modified":1524810662055},{"_id":"themes/vexo/source/css/images/logo.png","hash":"d766aad450483a79063754a2965065f057d24def","modified":1524810662055},{"_id":"themes/vexo/source/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1524810662056},{"_id":"themes/vexo/source/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1524810662056},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1524810662064},{"_id":"themes/vexo/source/js/gitment.js","hash":"6e586a17f72c5acbbd3a08276077114610d513e6","modified":1524810662067},{"_id":"themes/vexo/source/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1524810662060},{"_id":"source/_posts/img/img-02.jpg","hash":"b57e63fd643a64a2cf09583b01f74066d107b787","modified":1524810661924},{"_id":"source/_posts/img/img-01.jpg","hash":"cac288cb5f48909a2e442049a699a0c9bf99e82f","modified":1524810661919},{"_id":"source/_posts/img/img-07.jpg","hash":"62feefbb94be500a845b198d5e7dc816a24b39ca","modified":1524810661947},{"_id":"themes/vexo/source/css/images/alipay.jpg","hash":"224a90e90c49c05dee01b39f980bbe396c23ef6e","modified":1524810662053},{"_id":"themes/vexo/source/css/images/wechat.jpg","hash":"6af0ca0fd7a3cec42b72de4ac77a32dd2d3acdb6","modified":1524810662059},{"_id":"public/about/index.html","hash":"974450b2ecb2f85604764616f35e40f23124a585","modified":1524879466022},{"_id":"public/home/index.html","hash":"7eed34142a5429224585b6bfefa62cb1a6de990e","modified":1524823422710},{"_id":"public/project/index.html","hash":"3f0365fc0876f249759d62b92ca66e876186bb2e","modified":1525401818542},{"_id":"public/tags/index.html","hash":"8762e997beb9dd26853bca9f2fedd18059efa242","modified":1525401818543},{"_id":"public/2018/04/27/shell-node-deploy/index.html","hash":"cb22d58386ad0d2b8bac40644954a12613dfdefe","modified":1524823422711},{"_id":"public/2018/04/27/tool/window_tools/index.html","hash":"487f9da6ffd4683946b7ea01f86884bb7e0dcce0","modified":1524823422711},{"_id":"public/2018/04/27/node.js_window.onerror/index.html","hash":"dd731d684b0f9d9c370b2ccd6d5c6e1c5af06282","modified":1524823422711},{"_id":"public/2018/04/27/node.js 模块之 pm2/index.html","hash":"b8997df87cddca29b598ce6cdffdb21231c58ff3","modified":1524823422711},{"_id":"public/2018/04/27/hexo/index.html","hash":"0c920ed86dfbe827571e4818fddc794c3dce4d9a","modified":1524823422712},{"_id":"public/2018/04/27/git/index.html","hash":"f2c41d6c4dbc8495f981b541dc1da5c426cfedbe","modified":1524823422712},{"_id":"public/2018/04/27/Spring.boot_init/index.html","hash":"8b67d4f9a8d01828b43b3eb703713df060254ab8","modified":1524823422712},{"_id":"public/2018/04/04/picture_upload/index.html","hash":"68998515d300a9a321e29d68832d3652a1c65392","modified":1525401781947},{"_id":"public/2017/09/14/es5/index.html","hash":"2ce5b51ce22084543e4a9a7bd4e7e08cd630ff2c","modified":1524823422712},{"_id":"public/2017/09/14/bookslist/index.html","hash":"a30a987bbafb6e0ccb1c50ce7e073681ab9effd2","modified":1524823422712},{"_id":"public/2017/08/17/repeat-request/index.html","hash":"e06a87c78a9d8ea213cb7d920292edb3ec03c7c6","modified":1524823422712},{"_id":"public/2017/08/15/http-server/index.html","hash":"3971cc3fdb6ba9bd0ee7f916cc0a218eaed65c56","modified":1524823422712},{"_id":"public/2017/08/15/nodeppt/index.html","hash":"7cc25945780070249a87535fd72be22f3a87b2af","modified":1524823422712},{"_id":"public/2017/04/27/webstorm/index.html","hash":"f255fef620117250d8f726a7b227f16a7004c339","modified":1524823422713},{"_id":"public/archives/index.html","hash":"f11dc4cc1ffbe7d25daed763aa126190fcca72de","modified":1524823422713},{"_id":"public/archives/page/2/index.html","hash":"3dd6cc3f06db2f0faae328e0215500358f5cf29a","modified":1524823422713},{"_id":"public/archives/2017/index.html","hash":"2c93fd484f1f893b3d0cc46021fc5a6e7c674815","modified":1524823422713},{"_id":"public/archives/2017/01/index.html","hash":"94e20243b3ec4c1c2194762fa441e265220043c1","modified":1524823422713},{"_id":"public/archives/2017/04/index.html","hash":"c462fda65666a0dad84c7cc6b43d71b676620dcd","modified":1524823422713},{"_id":"public/archives/2017/08/index.html","hash":"9b8669ee4636bbc7526963ff6ed0b17fc174cb5d","modified":1524823422713},{"_id":"public/archives/2017/09/index.html","hash":"7ecdf742fc20698dadbf8c0a248d634943cdbc2c","modified":1524823422713},{"_id":"public/archives/2018/index.html","hash":"3f11243ce938e25de99e97c73c9f7500644b4ef6","modified":1524823422713},{"_id":"public/archives/2018/page/2/index.html","hash":"ad0534c7cc34c832d34175e84a89af3f034f17b8","modified":1524823422714},{"_id":"public/archives/2018/04/index.html","hash":"bed1cb89806401b8d2df96bb1b888c3f14a57d6d","modified":1524823422714},{"_id":"public/archives/2018/04/page/2/index.html","hash":"fa2fe5ace44c2d86286d994b5962a02a226df5c1","modified":1524823422714},{"_id":"public/index.html","hash":"a13ec81d0d0a9ab8793d744e71263e7e9059c92c","modified":1524823422714},{"_id":"public/page/2/index.html","hash":"9d5641d9e6d2cece0ae44b0cbe51c5aa188d6345","modified":1525401781946},{"_id":"public/tags/book/index.html","hash":"7d2e882e1da448b5571c3d2bada73bc3aea7d53d","modified":1524823422714},{"_id":"public/tags/java/index.html","hash":"d6ac1ddf76c6afa4c6633babad58e494fc3ffd64","modified":1524823422714},{"_id":"public/tags/node-js/index.html","hash":"e38a8c86a834508d67eb7ccafcc24c7b7d6dcb49","modified":1524823422714},{"_id":"public/tags/tools/index.html","hash":"b05dbe8b69e55a32e5fd9430dce5007aa58925f3","modified":1524823422715},{"_id":"public/tags/node-tools/index.html","hash":"557f3e238a7da42720770cca60dda02c62a86af0","modified":1524823422715},{"_id":"public/tags/shell/index.html","hash":"4351790f180dc7310d937c0988c365a37d063aff","modified":1524823422715},{"_id":"public/tags/linux/index.html","hash":"0e93081c809a781ba55eea73e13ce10aa617dd6a","modified":1524823422715},{"_id":"public/tags/upload/index.html","hash":"2466f7ed3c32883f6686b4537f64c5df29bcd95d","modified":1524823422715},{"_id":"public/tags/javascript/index.html","hash":"742b58e9997983f8dbd5e91d8361ca1134b601ee","modified":1524823422715},{"_id":"public/tags/api/index.html","hash":"e57f2094782c39c12f3fa9721fef05f5f24acded","modified":1524823422715},{"_id":"public/2018/04/27/deepin/index.html","hash":"2c6a00a9cbded08ac048ebcbd0e8db47fa69b19b","modified":1524823422715},{"_id":"public/2018/04/27/token/index.html","hash":"83f11168b41097d0ef85a0087309beb0bf864213","modified":1524823422716},{"_id":"public/2018/04/27/windows nginx natapp/index.html","hash":"e70cf872c59dcab2abdac32b1b933372f41cf791","modified":1524823422716},{"_id":"public/2018/04/27/npm/index.html","hash":"bdec0f979c05ff07cb10ce388e8fcf4483fd7055","modified":1524823422716},{"_id":"public/2018/04/27/node.js 6.9.4_update/index.html","hash":"854d6b1986cb7a0cc249c79a26b566c5fadcef4f","modified":1524823422716},{"_id":"public/2017/01/19/nodejs开发规范/index.html","hash":"b45b7eb9c6802bf2002368cff8c097bd4c4149ee","modified":1524823422716},{"_id":"public/img/header.png","hash":"160c23ca2445809dd0f918240e64f3680f5696ea","modified":1524823422724},{"_id":"public/img/img-04.jpg","hash":"cd8a9ac6f9e317471daac3170cf173152e2949ac","modified":1524823422724},{"_id":"public/img/img-08.jpg","hash":"518ded069b82365140d6a8c8a22dfd4486a2724e","modified":1524823422724},{"_id":"public/img/window.error.png","hash":"d8328e979a39df299984835c07e66c93f8455312","modified":1524823422724},{"_id":"public/img/window-err-b.jpg","hash":"86f7bd0585a21714483978335e3671676e97a703","modified":1524823422725},{"_id":"public/img/webp/header.webp","hash":"94e8936090404324191c1edd0ab4a8aea0cec91d","modified":1524823422725},{"_id":"public/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1524823422725},{"_id":"public/css/images/logo.ico","hash":"d766aad450483a79063754a2965065f057d24def","modified":1524823422725},{"_id":"public/css/images/logo.png","hash":"d766aad450483a79063754a2965065f057d24def","modified":1524823422725},{"_id":"public/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1524823422725},{"_id":"public/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1524823422725},{"_id":"public/img/img-05.jpg","hash":"e191c65e1288b694fb38a3c1d869a7bd682b1451","modified":1524823423102},{"_id":"public/img/webp/about.webp","hash":"3d4b91d5c3b0d3f7b8a03ee31d61822f4ccdfc51","modified":1524823423103},{"_id":"public/css/images/alipay.jpg","hash":"224a90e90c49c05dee01b39f980bbe396c23ef6e","modified":1524823423104},{"_id":"public/css/images/wechat.jpg","hash":"6af0ca0fd7a3cec42b72de4ac77a32dd2d3acdb6","modified":1524823423104},{"_id":"public/js/script.js","hash":"3af31969e302cb4b167fb7ab2141927818efc6f6","modified":1524823423152},{"_id":"public/css/style.css","hash":"d7295765f3268f884cc08706599daa034ea58a3b","modified":1524823423152},{"_id":"public/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1524823423152},{"_id":"public/js/gitment.js","hash":"6e586a17f72c5acbbd3a08276077114610d513e6","modified":1524823423152},{"_id":"public/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1524823423153},{"_id":"public/img/img-03.jpg","hash":"611fb734bd986465f73319c51871fcae4a1844b6","modified":1524823423153},{"_id":"public/img/img-06.jpg","hash":"a86e1621fec332c714b958b25236a95b8c37f2b3","modified":1524823423153},{"_id":"public/img/nssm-edit.jpg","hash":"67f7b0b448a93b2a4ad7f4138fdb0cc25f308d99","modified":1524823423153},{"_id":"public/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1524823423153},{"_id":"public/img/background-list.jpg","hash":"6c66087f3029ee4ebe9758c44ce44510fce346f1","modified":1524823423163},{"_id":"public/img/img-01.jpg","hash":"cac288cb5f48909a2e442049a699a0c9bf99e82f","modified":1524823423163},{"_id":"public/img/img-02.jpg","hash":"b57e63fd643a64a2cf09583b01f74066d107b787","modified":1524823423164},{"_id":"public/img/img-07.jpg","hash":"62feefbb94be500a845b198d5e7dc816a24b39ca","modified":1524823423165},{"_id":"public/img/phpStudy.jpg","hash":"c35fe37a875ab7cd6e517e68927a25f93077b196","modified":1524823423165},{"_id":"public/img/Apache-edit.jpg","hash":"c42eb6329b283a9f8d117ab0a4ae255fc576c538","modified":1524823423172}],"Category":[],"Data":[],"Page":[{"title":"About","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: About\nlayout: about\n---","date":"2018-04-27T06:31:01.956Z","updated":"2018-04-27T06:31:01.956Z","path":"about/index.html","comments":1,"_id":"cjghsheuq0001n1yrlxtv2976","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"hexo部署项目","date":"2017-01-19T11:57:39.000Z","_content":"\n## 命令行安装\n```\nnpm install -g hexo-cli\n```\n\n## 初始化\n```\nhexo init <folder>\n```\n\n## new 新建一篇文章\n```\nhexo new [layout] <title>\n```\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 `_config.yml` 中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n## generate 生成静态文件\n```\nhexo generate\n```\n-d, --deploy\t文件生成后立即部署网站\n-w, --watch\t监视文件变动\n\n## publish 发表草稿。\n```\nhexo publish [layout] <filename>\n```\n\n## server\n* 启动服务器。默认情况下，访问网址为： http://localhost:4000/。\n```\nhexo server\n```\n-p, --port\t重设端口\n-s, --static\t只使用静态文件\n-l, --log\t启动日记记录，使用覆盖记录格式\n\n## deploy 部署网站。\n```\nhexo deploy\n```\n-g, --generate\t部署之前预先生成静态文件\n\n## render 渲染文件。\n```\nhexo render <file1> [file2] ...\n```\n-o, --output\t设置输出路径\n\n## clean\n清除缓存文件 (db.json) 和已生成的静态文件 (public)。\n\n## 部署成功结果\n- [http://blog.yxxit.com/](http://blog.yxxit.com/)\n\n## 部署错误\n```\n> /usr/local/bin/jekyll build --safe\nConfiguration file: /data/_config.yml\njekyll 3.3.0 | Error:  The landscape theme could not be found.\n```\n\n在根目录下建一个.nojekyll空文件就可以了，因为Coding默认支持Jekyll搭建网站\n\n## 参考\n- [hexo.io 官网](https://hexo.io/zh-cn/docs/themes.html)\n- [在 Coding 上搭建 Hexo 个人博客！](https://segmentfault.com/a/1190000002900848?utm_source=tuicool)\n- [hexo 部署至Git遇到的坑](http://www.jianshu.com/p/67c57c70f275)\n- [hexo常见问题解决方案](http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88)\n- [hexo博客搭建时遇到的一些问题](https://segmentfault.com/a/1190000003710962?_ea=336354)\n- [玩转git之webhook应用初探](http://ued.ctrip.com/blog/play-with-git-webhook-application.html)\n- [Hexo常见问题解决方案](https://xuanwo.org/2014/08/14/hexo-usual-problem/)","source":"home/index.md","raw":"---\ntitle: hexo部署项目\ndate: 2017-01-19 19:57:39\n---\n\n## 命令行安装\n```\nnpm install -g hexo-cli\n```\n\n## 初始化\n```\nhexo init <folder>\n```\n\n## new 新建一篇文章\n```\nhexo new [layout] <title>\n```\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 `_config.yml` 中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n## generate 生成静态文件\n```\nhexo generate\n```\n-d, --deploy\t文件生成后立即部署网站\n-w, --watch\t监视文件变动\n\n## publish 发表草稿。\n```\nhexo publish [layout] <filename>\n```\n\n## server\n* 启动服务器。默认情况下，访问网址为： http://localhost:4000/。\n```\nhexo server\n```\n-p, --port\t重设端口\n-s, --static\t只使用静态文件\n-l, --log\t启动日记记录，使用覆盖记录格式\n\n## deploy 部署网站。\n```\nhexo deploy\n```\n-g, --generate\t部署之前预先生成静态文件\n\n## render 渲染文件。\n```\nhexo render <file1> [file2] ...\n```\n-o, --output\t设置输出路径\n\n## clean\n清除缓存文件 (db.json) 和已生成的静态文件 (public)。\n\n## 部署成功结果\n- [http://blog.yxxit.com/](http://blog.yxxit.com/)\n\n## 部署错误\n```\n> /usr/local/bin/jekyll build --safe\nConfiguration file: /data/_config.yml\njekyll 3.3.0 | Error:  The landscape theme could not be found.\n```\n\n在根目录下建一个.nojekyll空文件就可以了，因为Coding默认支持Jekyll搭建网站\n\n## 参考\n- [hexo.io 官网](https://hexo.io/zh-cn/docs/themes.html)\n- [在 Coding 上搭建 Hexo 个人博客！](https://segmentfault.com/a/1190000002900848?utm_source=tuicool)\n- [hexo 部署至Git遇到的坑](http://www.jianshu.com/p/67c57c70f275)\n- [hexo常见问题解决方案](http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88)\n- [hexo博客搭建时遇到的一些问题](https://segmentfault.com/a/1190000003710962?_ea=336354)\n- [玩转git之webhook应用初探](http://ued.ctrip.com/blog/play-with-git-webhook-application.html)\n- [Hexo常见问题解决方案](https://xuanwo.org/2014/08/14/hexo-usual-problem/)","updated":"2018-04-27T06:31:01.958Z","path":"home/index.html","comments":1,"layout":"page","_id":"cjghsheut0003n1yrz4mlenqg","content":"<h2 id=\"命令行安装\"><a href=\"#命令行安装\" class=\"headerlink\" title=\"命令行安装\"></a>命令行安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"new-新建一篇文章\"><a href=\"#new-新建一篇文章\" class=\"headerlink\" title=\"new 新建一篇文章\"></a>new 新建一篇文章</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <code>_config.yml</code> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<h2 id=\"generate-生成静态文件\"><a href=\"#generate-生成静态文件\" class=\"headerlink\" title=\"generate 生成静态文件\"></a>generate 生成静态文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n<p>-d, –deploy    文件生成后立即部署网站<br>-w, –watch    监视文件变动</p>\n<h2 id=\"publish-发表草稿。\"><a href=\"#publish-发表草稿。\" class=\"headerlink\" title=\"publish 发表草稿。\"></a>publish 发表草稿。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><ul>\n<li>启动服务器。默认情况下，访问网址为： <a href=\"http://localhost:4000/。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/。</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>-p, –port    重设端口<br>-s, –static    只使用静态文件<br>-l, –log    启动日记记录，使用覆盖记录格式</p>\n<h2 id=\"deploy-部署网站。\"><a href=\"#deploy-部署网站。\" class=\"headerlink\" title=\"deploy 部署网站。\"></a>deploy 部署网站。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p>-g, –generate    部署之前预先生成静态文件</p>\n<h2 id=\"render-渲染文件。\"><a href=\"#render-渲染文件。\" class=\"headerlink\" title=\"render 渲染文件。\"></a>render 渲染文件。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>\n<p>-o, –output    设置输出路径</p>\n<h2 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h2><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>\n<h2 id=\"部署成功结果\"><a href=\"#部署成功结果\" class=\"headerlink\" title=\"部署成功结果\"></a>部署成功结果</h2><ul>\n<li><a href=\"http://blog.yxxit.com/\" target=\"_blank\" rel=\"noopener\">http://blog.yxxit.com/</a></li>\n</ul>\n<h2 id=\"部署错误\"><a href=\"#部署错误\" class=\"headerlink\" title=\"部署错误\"></a>部署错误</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; /usr/local/bin/jekyll build --safe</span><br><span class=\"line\">Configuration file: /data/_config.yml</span><br><span class=\"line\">jekyll 3.3.0 | Error:  The landscape theme could not be found.</span><br></pre></td></tr></table></figure>\n<p>在根目录下建一个.nojekyll空文件就可以了，因为Coding默认支持Jekyll搭建网站</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://hexo.io/zh-cn/docs/themes.html\" target=\"_blank\" rel=\"noopener\">hexo.io 官网</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000002900848?utm_source=tuicool\" target=\"_blank\" rel=\"noopener\">在 Coding 上搭建 Hexo 个人博客！</a></li>\n<li><a href=\"http://www.jianshu.com/p/67c57c70f275\" target=\"_blank\" rel=\"noopener\">hexo 部署至Git遇到的坑</a></li>\n<li><a href=\"http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" target=\"_blank\" rel=\"noopener\">hexo常见问题解决方案</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000003710962?_ea=336354\" target=\"_blank\" rel=\"noopener\">hexo博客搭建时遇到的一些问题</a></li>\n<li><a href=\"http://ued.ctrip.com/blog/play-with-git-webhook-application.html\" target=\"_blank\" rel=\"noopener\">玩转git之webhook应用初探</a></li>\n<li><a href=\"https://xuanwo.org/2014/08/14/hexo-usual-problem/\" target=\"_blank\" rel=\"noopener\">Hexo常见问题解决方案</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"命令行安装\"><a href=\"#命令行安装\" class=\"headerlink\" title=\"命令行安装\"></a>命令行安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"new-新建一篇文章\"><a href=\"#new-新建一篇文章\" class=\"headerlink\" title=\"new 新建一篇文章\"></a>new 新建一篇文章</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <code>_config.yml</code> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<h2 id=\"generate-生成静态文件\"><a href=\"#generate-生成静态文件\" class=\"headerlink\" title=\"generate 生成静态文件\"></a>generate 生成静态文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n<p>-d, –deploy    文件生成后立即部署网站<br>-w, –watch    监视文件变动</p>\n<h2 id=\"publish-发表草稿。\"><a href=\"#publish-发表草稿。\" class=\"headerlink\" title=\"publish 发表草稿。\"></a>publish 发表草稿。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h2><ul>\n<li>启动服务器。默认情况下，访问网址为： <a href=\"http://localhost:4000/。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/。</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>-p, –port    重设端口<br>-s, –static    只使用静态文件<br>-l, –log    启动日记记录，使用覆盖记录格式</p>\n<h2 id=\"deploy-部署网站。\"><a href=\"#deploy-部署网站。\" class=\"headerlink\" title=\"deploy 部署网站。\"></a>deploy 部署网站。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p>-g, –generate    部署之前预先生成静态文件</p>\n<h2 id=\"render-渲染文件。\"><a href=\"#render-渲染文件。\" class=\"headerlink\" title=\"render 渲染文件。\"></a>render 渲染文件。</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>\n<p>-o, –output    设置输出路径</p>\n<h2 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h2><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>\n<h2 id=\"部署成功结果\"><a href=\"#部署成功结果\" class=\"headerlink\" title=\"部署成功结果\"></a>部署成功结果</h2><ul>\n<li><a href=\"http://blog.yxxit.com/\" target=\"_blank\" rel=\"noopener\">http://blog.yxxit.com/</a></li>\n</ul>\n<h2 id=\"部署错误\"><a href=\"#部署错误\" class=\"headerlink\" title=\"部署错误\"></a>部署错误</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; /usr/local/bin/jekyll build --safe</span><br><span class=\"line\">Configuration file: /data/_config.yml</span><br><span class=\"line\">jekyll 3.3.0 | Error:  The landscape theme could not be found.</span><br></pre></td></tr></table></figure>\n<p>在根目录下建一个.nojekyll空文件就可以了，因为Coding默认支持Jekyll搭建网站</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://hexo.io/zh-cn/docs/themes.html\" target=\"_blank\" rel=\"noopener\">hexo.io 官网</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000002900848?utm_source=tuicool\" target=\"_blank\" rel=\"noopener\">在 Coding 上搭建 Hexo 个人博客！</a></li>\n<li><a href=\"http://www.jianshu.com/p/67c57c70f275\" target=\"_blank\" rel=\"noopener\">hexo 部署至Git遇到的坑</a></li>\n<li><a href=\"http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" target=\"_blank\" rel=\"noopener\">hexo常见问题解决方案</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000003710962?_ea=336354\" target=\"_blank\" rel=\"noopener\">hexo博客搭建时遇到的一些问题</a></li>\n<li><a href=\"http://ued.ctrip.com/blog/play-with-git-webhook-application.html\" target=\"_blank\" rel=\"noopener\">玩转git之webhook应用初探</a></li>\n<li><a href=\"https://xuanwo.org/2014/08/14/hexo-usual-problem/\" target=\"_blank\" rel=\"noopener\">Hexo常见问题解决方案</a></li>\n</ul>\n"},{"title":"Project","layout":"project","_content":"","source":"project/index.md","raw":"---\ntitle: Project\nlayout: project\n---\n","date":"2018-04-27T06:31:01.960Z","updated":"2018-04-27T06:31:01.960Z","path":"project/index.html","comments":1,"_id":"cjghsheuw0005n1yrhaljrzb1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\n---\n","date":"2018-04-27T06:31:01.962Z","updated":"2018-04-27T06:31:01.962Z","path":"tags/index.html","comments":1,"_id":"cjghshev40008n1yr2hl4xhgq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"list","_content":"","source":"_drafts/list.md","raw":"---\ntitle: list\ntags:\n---\n","slug":"list","published":0,"date":"2018-04-27T06:31:01.901Z","updated":"2018-04-27T06:31:01.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghsheul0000n1yrxqvmickb","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"post","title":"常用文档清单","date":"2017-09-14T10:10:11.000Z","_content":"\n### [mongoose 文档](http://www.nodeclass.com/api/mongoose.html)\n> http://www.nodeclass.com/api/mongoose.html\n mongoose api文档\n\n\n### [bootcdn](http://www.bootcdn.cn/)\n\n> http://www.bootcdn.cn/\n稳定、快速、免费的前端开源项目 CDN 加速服务\n\n### [Bootstrap](http://www.bootcss.com/)\n> http://www.bootcss.com/\n简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。\n\n\n## node.js\n\n### [koa](http://koa.bootcss.com/)\n> http://koa.bootcss.com/\nkoa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。\n\n### [vue.js](https://cn.vuejs.org/)\n> https://cn.vuejs.org/\n渐进式JavaScript 框架\n\n\n### [node.js 中文](http://nodejs.cn/)\n> http://nodejs.cn/\nNode.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。\nNode.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。\nNode.js 的包管理器 npm，是全球最大的开源库生态系统。","source":"_posts/bookslist.md","raw":"---\nlayout: post\ntitle: 常用文档清单\ndate: 2017-09-14 18:10:11\ntags: book\n---\n\n### [mongoose 文档](http://www.nodeclass.com/api/mongoose.html)\n> http://www.nodeclass.com/api/mongoose.html\n mongoose api文档\n\n\n### [bootcdn](http://www.bootcdn.cn/)\n\n> http://www.bootcdn.cn/\n稳定、快速、免费的前端开源项目 CDN 加速服务\n\n### [Bootstrap](http://www.bootcss.com/)\n> http://www.bootcss.com/\n简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。\n\n\n## node.js\n\n### [koa](http://koa.bootcss.com/)\n> http://koa.bootcss.com/\nkoa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。\n\n### [vue.js](https://cn.vuejs.org/)\n> https://cn.vuejs.org/\n渐进式JavaScript 框架\n\n\n### [node.js 中文](http://nodejs.cn/)\n> http://nodejs.cn/\nNode.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。\nNode.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。\nNode.js 的包管理器 npm，是全球最大的开源库生态系统。","slug":"bookslist","published":1,"updated":"2018-04-27T06:31:01.906Z","comments":1,"photos":[],"link":"","_id":"cjghsheur0002n1yrvd8fvzu8","content":"<h3 id=\"mongoose-文档\"><a href=\"#mongoose-文档\" class=\"headerlink\" title=\"mongoose 文档\"></a><a href=\"http://www.nodeclass.com/api/mongoose.html\" target=\"_blank\" rel=\"noopener\">mongoose 文档</a></h3><blockquote>\n<p><a href=\"http://www.nodeclass.com/api/mongoose.html\" target=\"_blank\" rel=\"noopener\">http://www.nodeclass.com/api/mongoose.html</a><br> mongoose api文档</p>\n</blockquote>\n<h3 id=\"bootcdn\"><a href=\"#bootcdn\" class=\"headerlink\" title=\"bootcdn\"></a><a href=\"http://www.bootcdn.cn/\" target=\"_blank\" rel=\"noopener\">bootcdn</a></h3><blockquote>\n<p><a href=\"http://www.bootcdn.cn/\" target=\"_blank\" rel=\"noopener\">http://www.bootcdn.cn/</a><br>稳定、快速、免费的前端开源项目 CDN 加速服务</p>\n</blockquote>\n<h3 id=\"Bootstrap\"><a href=\"#Bootstrap\" class=\"headerlink\" title=\"Bootstrap\"></a><a href=\"http://www.bootcss.com/\" target=\"_blank\" rel=\"noopener\">Bootstrap</a></h3><blockquote>\n<p><a href=\"http://www.bootcss.com/\" target=\"_blank\" rel=\"noopener\">http://www.bootcss.com/</a><br>简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。</p>\n</blockquote>\n<h2 id=\"node-js\"><a href=\"#node-js\" class=\"headerlink\" title=\"node.js\"></a>node.js</h2><h3 id=\"koa\"><a href=\"#koa\" class=\"headerlink\" title=\"koa\"></a><a href=\"http://koa.bootcss.com/\" target=\"_blank\" rel=\"noopener\">koa</a></h3><blockquote>\n<p><a href=\"http://koa.bootcss.com/\" target=\"_blank\" rel=\"noopener\">http://koa.bootcss.com/</a><br>koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。</p>\n</blockquote>\n<h3 id=\"vue-js\"><a href=\"#vue-js\" class=\"headerlink\" title=\"vue.js\"></a><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vue.js</a></h3><blockquote>\n<p><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/</a><br>渐进式JavaScript 框架</p>\n</blockquote>\n<h3 id=\"node-js-中文\"><a href=\"#node-js-中文\" class=\"headerlink\" title=\"node.js 中文\"></a><a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener\">node.js 中文</a></h3><blockquote>\n<p><a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener\">http://nodejs.cn/</a><br>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。<br>Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"mongoose-文档\"><a href=\"#mongoose-文档\" class=\"headerlink\" title=\"mongoose 文档\"></a><a href=\"http://www.nodeclass.com/api/mongoose.html\" target=\"_blank\" rel=\"noopener\">mongoose 文档</a></h3><blockquote>\n<p><a href=\"http://www.nodeclass.com/api/mongoose.html\" target=\"_blank\" rel=\"noopener\">http://www.nodeclass.com/api/mongoose.html</a><br> mongoose api文档</p>\n</blockquote>\n<h3 id=\"bootcdn\"><a href=\"#bootcdn\" class=\"headerlink\" title=\"bootcdn\"></a><a href=\"http://www.bootcdn.cn/\" target=\"_blank\" rel=\"noopener\">bootcdn</a></h3><blockquote>\n<p><a href=\"http://www.bootcdn.cn/\" target=\"_blank\" rel=\"noopener\">http://www.bootcdn.cn/</a><br>稳定、快速、免费的前端开源项目 CDN 加速服务</p>\n</blockquote>\n<h3 id=\"Bootstrap\"><a href=\"#Bootstrap\" class=\"headerlink\" title=\"Bootstrap\"></a><a href=\"http://www.bootcss.com/\" target=\"_blank\" rel=\"noopener\">Bootstrap</a></h3><blockquote>\n<p><a href=\"http://www.bootcss.com/\" target=\"_blank\" rel=\"noopener\">http://www.bootcss.com/</a><br>简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。</p>\n</blockquote>\n<h2 id=\"node-js\"><a href=\"#node-js\" class=\"headerlink\" title=\"node.js\"></a>node.js</h2><h3 id=\"koa\"><a href=\"#koa\" class=\"headerlink\" title=\"koa\"></a><a href=\"http://koa.bootcss.com/\" target=\"_blank\" rel=\"noopener\">koa</a></h3><blockquote>\n<p><a href=\"http://koa.bootcss.com/\" target=\"_blank\" rel=\"noopener\">http://koa.bootcss.com/</a><br>koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。</p>\n</blockquote>\n<h3 id=\"vue-js\"><a href=\"#vue-js\" class=\"headerlink\" title=\"vue.js\"></a><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vue.js</a></h3><blockquote>\n<p><a href=\"https://cn.vuejs.org/\" target=\"_blank\" rel=\"noopener\">https://cn.vuejs.org/</a><br>渐进式JavaScript 框架</p>\n</blockquote>\n<h3 id=\"node-js-中文\"><a href=\"#node-js-中文\" class=\"headerlink\" title=\"node.js 中文\"></a><a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener\">node.js 中文</a></h3><blockquote>\n<p><a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener\">http://nodejs.cn/</a><br>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。<br>Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p>\n</blockquote>\n"},{"title":"Spring.boot 项目创建之傻瓜教程","_content":"\n## 新建项目\n\n#### 【File】-->【New】-->【Spring Starter Project】\n![新建项目](/view/img/img-01.jpg)\n\n#### 填写项目信息\n* Name\t\t项目名称\n* Location \t文件位置\n* Type\t\t选择Maven\n* Group\t\tcom.shaw.wap\n* Artifact\twap\n* version\t0.0.1-SNAPSHOT\n* Description\t描述\n* Package\t包结构\n![New Spring Start Project](/view/img/img-02.jpg)\n\n\n#### 选择Spring Boot 版本\n\n![New Spring Start Project](/view/img/img-03.jpg)\n\n#### 导入架包\n![New Spring Start Project](/view/img/img-04.jpg)\n\n#### 项目结构\n![project](/view/img/img-05.jpg)\n\n#### 备注\napplication.properties \t配置信息\nShawSpringWapApplication main 方法\n\n## 启动服务\n\n#### 创建 HomeController.java\n\n![创建HomeController](/view/img/img-06.jpg)\n\n```\npackage com.shaw.wap;\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HomeController {\n\n\t@RequestMapping(value=\"/hello\",method=RequestMethod.GET)\n\tpublic String Say(){\n\t\treturn \"hello world!\";\n\t}\n}\n\n```\n\n#### 运行程序\n\n![运行程序](/view/img/img-07.jpg)\n\n#### 范围查看效果\n\n访问链接：http://localhost:8080/hello\n\n![查看结果](/view/img/img-08.jpg)","source":"_posts/Spring.boot_init.md","raw":"---\ntitle: Spring.boot 项目创建之傻瓜教程\ntags: java\n---\n\n## 新建项目\n\n#### 【File】-->【New】-->【Spring Starter Project】\n![新建项目](/view/img/img-01.jpg)\n\n#### 填写项目信息\n* Name\t\t项目名称\n* Location \t文件位置\n* Type\t\t选择Maven\n* Group\t\tcom.shaw.wap\n* Artifact\twap\n* version\t0.0.1-SNAPSHOT\n* Description\t描述\n* Package\t包结构\n![New Spring Start Project](/view/img/img-02.jpg)\n\n\n#### 选择Spring Boot 版本\n\n![New Spring Start Project](/view/img/img-03.jpg)\n\n#### 导入架包\n![New Spring Start Project](/view/img/img-04.jpg)\n\n#### 项目结构\n![project](/view/img/img-05.jpg)\n\n#### 备注\napplication.properties \t配置信息\nShawSpringWapApplication main 方法\n\n## 启动服务\n\n#### 创建 HomeController.java\n\n![创建HomeController](/view/img/img-06.jpg)\n\n```\npackage com.shaw.wap;\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HomeController {\n\n\t@RequestMapping(value=\"/hello\",method=RequestMethod.GET)\n\tpublic String Say(){\n\t\treturn \"hello world!\";\n\t}\n}\n\n```\n\n#### 运行程序\n\n![运行程序](/view/img/img-07.jpg)\n\n#### 范围查看效果\n\n访问链接：http://localhost:8080/hello\n\n![查看结果](/view/img/img-08.jpg)","slug":"Spring.boot_init","published":1,"date":"2018-04-27T06:31:01.903Z","updated":"2018-04-27T09:36:33.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghsheuu0004n1yr5eh8yd1p","content":"<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><h4 id=\"【File】–-gt-【New】–-gt-【Spring-Starter-Project】\"><a href=\"#【File】–-gt-【New】–-gt-【Spring-Starter-Project】\" class=\"headerlink\" title=\"【File】–&gt;【New】–&gt;【Spring Starter Project】\"></a>【File】–&gt;【New】–&gt;【Spring Starter Project】</h4><p><img src=\"/view/img/img-01.jpg\" alt=\"新建项目\"></p>\n<h4 id=\"填写项目信息\"><a href=\"#填写项目信息\" class=\"headerlink\" title=\"填写项目信息\"></a>填写项目信息</h4><ul>\n<li>Name        项目名称</li>\n<li>Location     文件位置</li>\n<li>Type        选择Maven</li>\n<li>Group        com.shaw.wap</li>\n<li>Artifact    wap</li>\n<li>version    0.0.1-SNAPSHOT</li>\n<li>Description    描述</li>\n<li>Package    包结构<br><img src=\"/view/img/img-02.jpg\" alt=\"New Spring Start Project\"></li>\n</ul>\n<h4 id=\"选择Spring-Boot-版本\"><a href=\"#选择Spring-Boot-版本\" class=\"headerlink\" title=\"选择Spring Boot 版本\"></a>选择Spring Boot 版本</h4><p><img src=\"/view/img/img-03.jpg\" alt=\"New Spring Start Project\"></p>\n<h4 id=\"导入架包\"><a href=\"#导入架包\" class=\"headerlink\" title=\"导入架包\"></a>导入架包</h4><p><img src=\"/view/img/img-04.jpg\" alt=\"New Spring Start Project\"></p>\n<h4 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h4><p><img src=\"/view/img/img-05.jpg\" alt=\"project\"></p>\n<h4 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h4><p>application.properties     配置信息<br>ShawSpringWapApplication main 方法</p>\n<h2 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h2><h4 id=\"创建-HomeController-java\"><a href=\"#创建-HomeController-java\" class=\"headerlink\" title=\"创建 HomeController.java\"></a>创建 HomeController.java</h4><p><img src=\"/view/img/img-06.jpg\" alt=\"创建HomeController\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.shaw.wap;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\">@RestController</span><br><span class=\"line\">public class HomeController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@RequestMapping(value=&quot;/hello&quot;,method=RequestMethod.GET)</span><br><span class=\"line\">\tpublic String Say()&#123;</span><br><span class=\"line\">\t\treturn &quot;hello world!&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"运行程序\"><a href=\"#运行程序\" class=\"headerlink\" title=\"运行程序\"></a>运行程序</h4><p><img src=\"/view/img/img-07.jpg\" alt=\"运行程序\"></p>\n<h4 id=\"范围查看效果\"><a href=\"#范围查看效果\" class=\"headerlink\" title=\"范围查看效果\"></a>范围查看效果</h4><p>访问链接：<a href=\"http://localhost:8080/hello\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/hello</a></p>\n<p><img src=\"/view/img/img-08.jpg\" alt=\"查看结果\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><h4 id=\"【File】–-gt-【New】–-gt-【Spring-Starter-Project】\"><a href=\"#【File】–-gt-【New】–-gt-【Spring-Starter-Project】\" class=\"headerlink\" title=\"【File】–&gt;【New】–&gt;【Spring Starter Project】\"></a>【File】–&gt;【New】–&gt;【Spring Starter Project】</h4><p><img src=\"/view/img/img-01.jpg\" alt=\"新建项目\"></p>\n<h4 id=\"填写项目信息\"><a href=\"#填写项目信息\" class=\"headerlink\" title=\"填写项目信息\"></a>填写项目信息</h4><ul>\n<li>Name        项目名称</li>\n<li>Location     文件位置</li>\n<li>Type        选择Maven</li>\n<li>Group        com.shaw.wap</li>\n<li>Artifact    wap</li>\n<li>version    0.0.1-SNAPSHOT</li>\n<li>Description    描述</li>\n<li>Package    包结构<br><img src=\"/view/img/img-02.jpg\" alt=\"New Spring Start Project\"></li>\n</ul>\n<h4 id=\"选择Spring-Boot-版本\"><a href=\"#选择Spring-Boot-版本\" class=\"headerlink\" title=\"选择Spring Boot 版本\"></a>选择Spring Boot 版本</h4><p><img src=\"/view/img/img-03.jpg\" alt=\"New Spring Start Project\"></p>\n<h4 id=\"导入架包\"><a href=\"#导入架包\" class=\"headerlink\" title=\"导入架包\"></a>导入架包</h4><p><img src=\"/view/img/img-04.jpg\" alt=\"New Spring Start Project\"></p>\n<h4 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h4><p><img src=\"/view/img/img-05.jpg\" alt=\"project\"></p>\n<h4 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h4><p>application.properties     配置信息<br>ShawSpringWapApplication main 方法</p>\n<h2 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h2><h4 id=\"创建-HomeController-java\"><a href=\"#创建-HomeController-java\" class=\"headerlink\" title=\"创建 HomeController.java\"></a>创建 HomeController.java</h4><p><img src=\"/view/img/img-06.jpg\" alt=\"创建HomeController\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.shaw.wap;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\">import org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\">@RestController</span><br><span class=\"line\">public class HomeController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t@RequestMapping(value=&quot;/hello&quot;,method=RequestMethod.GET)</span><br><span class=\"line\">\tpublic String Say()&#123;</span><br><span class=\"line\">\t\treturn &quot;hello world!&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"运行程序\"><a href=\"#运行程序\" class=\"headerlink\" title=\"运行程序\"></a>运行程序</h4><p><img src=\"/view/img/img-07.jpg\" alt=\"运行程序\"></p>\n<h4 id=\"范围查看效果\"><a href=\"#范围查看效果\" class=\"headerlink\" title=\"范围查看效果\"></a>范围查看效果</h4><p>访问链接：<a href=\"http://localhost:8080/hello\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/hello</a></p>\n<p><img src=\"/view/img/img-08.jpg\" alt=\"查看结果\"></p>\n"},{"layout":"post","title":"ES5 新增特性汇总","date":"2017-09-14T10:10:11.000Z","_content":"\n> ES5 新增特性汇总\n\n- Trailing commas are ok\n多余的逗号不报错，比如 {a:1,b:2,}\n\n- No reserved words for property names\n属性名可以使用关键字和保留字了，比如 { if:1, else:2 }\n\n- NaN, Infinity, undefined : are all constants\nNaN、Infinity、undefined 都是常量了，不可更改。\n\n- parseInt() defaults to radix 10\nparseInt 第二个参数默认为 10（真好）\n\n- /regexp/ produces new reg ex object every time\n正则字面量每次都会产生一个新的对象\n\n- JSON.parse(), JSON.stringify()\n添加 JSON 序列化和反序列化\n\n- Function.prototype.bind\n函数新增 bind 方法（贺老说 bind 写在后面有点不好用）\n\n- String.prototype.trim\n字符串终于自带头尾去空格方法了，如 ' abc '.trim() === 'abc'\n\n- Array.prototype.every, filter, forEach, indexOf, lastIndexOf, map, reduce, reduceRight, some\n数组添加了一系列方法，终于能脱离 Underscore.js 了\n\n- Date.now()\nDate.now 现在才加进来的？可怕。\n\n- Date.prototype.toISOString\n日期新增 toISOString 方法\n\n- new Date(string) and Date.parse(string) will try ISO format 1st\n新增对 ISO 日期格式的支持\n\n- Array.isArray()\n判断一个对象是不是数组……以前苦了大家了\n\n- Object.keys(), Object.create(), Object.defineProperty, Object.defineProperties,\nObject.getOwnPropertyDescriptor(), Object.getOwnPropertyNames(obj), Object.getPrototypeOf(obj)\n- Object.seal(), Object.freeze(), Object.preventExtensions(), Object.isSealed(), Object.isFrozen(),\nObject.isExtensible()\n对象新增一系列方法，使得在 JS 中模拟 Java 变得更丝滑。我最喜欢的还是 Object.create()\n\n- Property attributes: writeable, value, enumerable, configurable, get, set\n对象的属性可以添加各种配置了\n\n- 'use strict';\n- Strict Mode:\n```text\n  No more implied global variables within functions.\n  this is not bound to the global object by function form.\n  apply and call do not default to the global object.\n  No with statement.\n  Setting a writeable: false property will throw.\n  Deleting a configurable: false property will throw.\n  Restrictions on eval.\n  eval and arguments are reserved.\n  arguments not linked to parameters.\n  No more arguments.caller or arguments.callee.\n  No more octal literals.\n  Duplicate names in an object literal or function parameters are a syntax error\n```\n\n严格模式\n函数里没有隐式的全局变量了，你要创建全局变量必须是显式的。比如想用 a = 1 创建全局变量是不行的。\nthis 不会默认指向全局对象（比如 window 或者 global）了。\ncall 和 apply 也不会默认使用全局对象了。\n不准用 with\n如果一个属性的 writeable 是 false，那么你给这个属性赋值就会报错。\n如果一个属性的 configurable 是 false，那么你 delete 这个属性就会报错。\n对 eval 和 arguments 做出了限制。以下代码每行都会报错：\n```js\n  eval = 17;\n  arguments++;\n  ++eval;\n  var obj = { set p(arguments) { } };\n  var eval;\n  try { } catch (arguments) { }\n  function x(eval) { }\n  function arguments() { }\n  var y = function eval() { };\n  var f = new Function(\"arguments\", \"'use strict'; return 17;\");\n```\n\narguments 只保存原始参数。对形参的赋值不会对 arguments 有影响。\n不准用 arguments.caller 和 arguments.callee\n不支持八进制字面量，比如 var a = 015 会报错。\n对象字面量或者函数形参中，如果有重复的名字，就会报错。\n\n\n## 参考\n- [转载](https://zhuanlan.zhihu.com/p/24336831)\n","source":"_posts/es5.md","raw":"---\nlayout: post\ntitle: ES5 新增特性汇总\ndate: 2017-09-14 18:10:11\ntags: node.js\n---\n\n> ES5 新增特性汇总\n\n- Trailing commas are ok\n多余的逗号不报错，比如 {a:1,b:2,}\n\n- No reserved words for property names\n属性名可以使用关键字和保留字了，比如 { if:1, else:2 }\n\n- NaN, Infinity, undefined : are all constants\nNaN、Infinity、undefined 都是常量了，不可更改。\n\n- parseInt() defaults to radix 10\nparseInt 第二个参数默认为 10（真好）\n\n- /regexp/ produces new reg ex object every time\n正则字面量每次都会产生一个新的对象\n\n- JSON.parse(), JSON.stringify()\n添加 JSON 序列化和反序列化\n\n- Function.prototype.bind\n函数新增 bind 方法（贺老说 bind 写在后面有点不好用）\n\n- String.prototype.trim\n字符串终于自带头尾去空格方法了，如 ' abc '.trim() === 'abc'\n\n- Array.prototype.every, filter, forEach, indexOf, lastIndexOf, map, reduce, reduceRight, some\n数组添加了一系列方法，终于能脱离 Underscore.js 了\n\n- Date.now()\nDate.now 现在才加进来的？可怕。\n\n- Date.prototype.toISOString\n日期新增 toISOString 方法\n\n- new Date(string) and Date.parse(string) will try ISO format 1st\n新增对 ISO 日期格式的支持\n\n- Array.isArray()\n判断一个对象是不是数组……以前苦了大家了\n\n- Object.keys(), Object.create(), Object.defineProperty, Object.defineProperties,\nObject.getOwnPropertyDescriptor(), Object.getOwnPropertyNames(obj), Object.getPrototypeOf(obj)\n- Object.seal(), Object.freeze(), Object.preventExtensions(), Object.isSealed(), Object.isFrozen(),\nObject.isExtensible()\n对象新增一系列方法，使得在 JS 中模拟 Java 变得更丝滑。我最喜欢的还是 Object.create()\n\n- Property attributes: writeable, value, enumerable, configurable, get, set\n对象的属性可以添加各种配置了\n\n- 'use strict';\n- Strict Mode:\n```text\n  No more implied global variables within functions.\n  this is not bound to the global object by function form.\n  apply and call do not default to the global object.\n  No with statement.\n  Setting a writeable: false property will throw.\n  Deleting a configurable: false property will throw.\n  Restrictions on eval.\n  eval and arguments are reserved.\n  arguments not linked to parameters.\n  No more arguments.caller or arguments.callee.\n  No more octal literals.\n  Duplicate names in an object literal or function parameters are a syntax error\n```\n\n严格模式\n函数里没有隐式的全局变量了，你要创建全局变量必须是显式的。比如想用 a = 1 创建全局变量是不行的。\nthis 不会默认指向全局对象（比如 window 或者 global）了。\ncall 和 apply 也不会默认使用全局对象了。\n不准用 with\n如果一个属性的 writeable 是 false，那么你给这个属性赋值就会报错。\n如果一个属性的 configurable 是 false，那么你 delete 这个属性就会报错。\n对 eval 和 arguments 做出了限制。以下代码每行都会报错：\n```js\n  eval = 17;\n  arguments++;\n  ++eval;\n  var obj = { set p(arguments) { } };\n  var eval;\n  try { } catch (arguments) { }\n  function x(eval) { }\n  function arguments() { }\n  var y = function eval() { };\n  var f = new Function(\"arguments\", \"'use strict'; return 17;\");\n```\n\narguments 只保存原始参数。对形参的赋值不会对 arguments 有影响。\n不准用 arguments.caller 和 arguments.callee\n不支持八进制字面量，比如 var a = 015 会报错。\n对象字面量或者函数形参中，如果有重复的名字，就会报错。\n\n\n## 参考\n- [转载](https://zhuanlan.zhihu.com/p/24336831)\n","slug":"es5","published":1,"updated":"2018-04-27T07:28:37.847Z","comments":1,"photos":[],"link":"","_id":"cjghshev20007n1yrp4gzayvq","content":"<blockquote>\n<p>ES5 新增特性汇总</p>\n</blockquote>\n<ul>\n<li><p>Trailing commas are ok<br>多余的逗号不报错，比如 {a:1,b:2,}</p>\n</li>\n<li><p>No reserved words for property names<br>属性名可以使用关键字和保留字了，比如 { if:1, else:2 }</p>\n</li>\n<li><p>NaN, Infinity, undefined : are all constants<br>NaN、Infinity、undefined 都是常量了，不可更改。</p>\n</li>\n<li><p>parseInt() defaults to radix 10<br>parseInt 第二个参数默认为 10（真好）</p>\n</li>\n<li><p>/regexp/ produces new reg ex object every time<br>正则字面量每次都会产生一个新的对象</p>\n</li>\n<li><p>JSON.parse(), JSON.stringify()<br>添加 JSON 序列化和反序列化</p>\n</li>\n<li><p>Function.prototype.bind<br>函数新增 bind 方法（贺老说 bind 写在后面有点不好用）</p>\n</li>\n<li><p>String.prototype.trim<br>字符串终于自带头尾去空格方法了，如 ‘ abc ‘.trim() === ‘abc’</p>\n</li>\n<li><p>Array.prototype.every, filter, forEach, indexOf, lastIndexOf, map, reduce, reduceRight, some<br>数组添加了一系列方法，终于能脱离 Underscore.js 了</p>\n</li>\n<li><p>Date.now()<br>Date.now 现在才加进来的？可怕。</p>\n</li>\n<li><p>Date.prototype.toISOString<br>日期新增 toISOString 方法</p>\n</li>\n<li><p>new Date(string) and Date.parse(string) will try ISO format 1st<br>新增对 ISO 日期格式的支持</p>\n</li>\n<li><p>Array.isArray()<br>判断一个对象是不是数组……以前苦了大家了</p>\n</li>\n<li><p>Object.keys(), Object.create(), Object.defineProperty, Object.defineProperties,<br>Object.getOwnPropertyDescriptor(), Object.getOwnPropertyNames(obj), Object.getPrototypeOf(obj)</p>\n</li>\n<li><p>Object.seal(), Object.freeze(), Object.preventExtensions(), Object.isSealed(), Object.isFrozen(),<br>Object.isExtensible()<br>对象新增一系列方法，使得在 JS 中模拟 Java 变得更丝滑。我最喜欢的还是 Object.create()</p>\n</li>\n<li><p>Property attributes: writeable, value, enumerable, configurable, get, set<br>对象的属性可以添加各种配置了</p>\n</li>\n<li><p>‘use strict’;</p>\n</li>\n<li>Strict Mode:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No more implied global variables within functions.</span><br><span class=\"line\">this is not bound to the global object by function form.</span><br><span class=\"line\">apply and call do not default to the global object.</span><br><span class=\"line\">No with statement.</span><br><span class=\"line\">Setting a writeable: false property will throw.</span><br><span class=\"line\">Deleting a configurable: false property will throw.</span><br><span class=\"line\">Restrictions on eval.</span><br><span class=\"line\">eval and arguments are reserved.</span><br><span class=\"line\">arguments not linked to parameters.</span><br><span class=\"line\">No more arguments.caller or arguments.callee.</span><br><span class=\"line\">No more octal literals.</span><br><span class=\"line\">Duplicate names in an object literal or function parameters are a syntax error</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>严格模式<br>函数里没有隐式的全局变量了，你要创建全局变量必须是显式的。比如想用 a = 1 创建全局变量是不行的。<br>this 不会默认指向全局对象（比如 window 或者 global）了。<br>call 和 apply 也不会默认使用全局对象了。<br>不准用 with<br>如果一个属性的 writeable 是 false，那么你给这个属性赋值就会报错。<br>如果一个属性的 configurable 是 false，那么你 delete 这个属性就会报错。<br>对 eval 和 arguments 做出了限制。以下代码每行都会报错：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span> = <span class=\"number\">17</span>;</span><br><span class=\"line\"><span class=\"built_in\">arguments</span>++;</span><br><span class=\"line\">++<span class=\"built_in\">eval</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; set p(<span class=\"built_in\">arguments</span>) &#123; &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">eval</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123; &#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">arguments</span>) &#123; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\">eval</span>) </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arguments</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eval</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"arguments\"</span>, <span class=\"string\">\"'use strict'; return 17;\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>arguments 只保存原始参数。对形参的赋值不会对 arguments 有影响。<br>不准用 arguments.caller 和 arguments.callee<br>不支持八进制字面量，比如 var a = 015 会报错。<br>对象字面量或者函数形参中，如果有重复的名字，就会报错。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/24336831\" target=\"_blank\" rel=\"noopener\">转载</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>ES5 新增特性汇总</p>\n</blockquote>\n<ul>\n<li><p>Trailing commas are ok<br>多余的逗号不报错，比如 {a:1,b:2,}</p>\n</li>\n<li><p>No reserved words for property names<br>属性名可以使用关键字和保留字了，比如 { if:1, else:2 }</p>\n</li>\n<li><p>NaN, Infinity, undefined : are all constants<br>NaN、Infinity、undefined 都是常量了，不可更改。</p>\n</li>\n<li><p>parseInt() defaults to radix 10<br>parseInt 第二个参数默认为 10（真好）</p>\n</li>\n<li><p>/regexp/ produces new reg ex object every time<br>正则字面量每次都会产生一个新的对象</p>\n</li>\n<li><p>JSON.parse(), JSON.stringify()<br>添加 JSON 序列化和反序列化</p>\n</li>\n<li><p>Function.prototype.bind<br>函数新增 bind 方法（贺老说 bind 写在后面有点不好用）</p>\n</li>\n<li><p>String.prototype.trim<br>字符串终于自带头尾去空格方法了，如 ‘ abc ‘.trim() === ‘abc’</p>\n</li>\n<li><p>Array.prototype.every, filter, forEach, indexOf, lastIndexOf, map, reduce, reduceRight, some<br>数组添加了一系列方法，终于能脱离 Underscore.js 了</p>\n</li>\n<li><p>Date.now()<br>Date.now 现在才加进来的？可怕。</p>\n</li>\n<li><p>Date.prototype.toISOString<br>日期新增 toISOString 方法</p>\n</li>\n<li><p>new Date(string) and Date.parse(string) will try ISO format 1st<br>新增对 ISO 日期格式的支持</p>\n</li>\n<li><p>Array.isArray()<br>判断一个对象是不是数组……以前苦了大家了</p>\n</li>\n<li><p>Object.keys(), Object.create(), Object.defineProperty, Object.defineProperties,<br>Object.getOwnPropertyDescriptor(), Object.getOwnPropertyNames(obj), Object.getPrototypeOf(obj)</p>\n</li>\n<li><p>Object.seal(), Object.freeze(), Object.preventExtensions(), Object.isSealed(), Object.isFrozen(),<br>Object.isExtensible()<br>对象新增一系列方法，使得在 JS 中模拟 Java 变得更丝滑。我最喜欢的还是 Object.create()</p>\n</li>\n<li><p>Property attributes: writeable, value, enumerable, configurable, get, set<br>对象的属性可以添加各种配置了</p>\n</li>\n<li><p>‘use strict’;</p>\n</li>\n<li>Strict Mode:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No more implied global variables within functions.</span><br><span class=\"line\">this is not bound to the global object by function form.</span><br><span class=\"line\">apply and call do not default to the global object.</span><br><span class=\"line\">No with statement.</span><br><span class=\"line\">Setting a writeable: false property will throw.</span><br><span class=\"line\">Deleting a configurable: false property will throw.</span><br><span class=\"line\">Restrictions on eval.</span><br><span class=\"line\">eval and arguments are reserved.</span><br><span class=\"line\">arguments not linked to parameters.</span><br><span class=\"line\">No more arguments.caller or arguments.callee.</span><br><span class=\"line\">No more octal literals.</span><br><span class=\"line\">Duplicate names in an object literal or function parameters are a syntax error</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>严格模式<br>函数里没有隐式的全局变量了，你要创建全局变量必须是显式的。比如想用 a = 1 创建全局变量是不行的。<br>this 不会默认指向全局对象（比如 window 或者 global）了。<br>call 和 apply 也不会默认使用全局对象了。<br>不准用 with<br>如果一个属性的 writeable 是 false，那么你给这个属性赋值就会报错。<br>如果一个属性的 configurable 是 false，那么你 delete 这个属性就会报错。<br>对 eval 和 arguments 做出了限制。以下代码每行都会报错：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span> = <span class=\"number\">17</span>;</span><br><span class=\"line\"><span class=\"built_in\">arguments</span>++;</span><br><span class=\"line\">++<span class=\"built_in\">eval</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; set p(<span class=\"built_in\">arguments</span>) &#123; &#125; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">eval</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123; &#125; <span class=\"keyword\">catch</span> (<span class=\"built_in\">arguments</span>) &#123; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span>(<span class=\"params\">eval</span>) </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arguments</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eval</span>(<span class=\"params\"></span>) </span>&#123; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(<span class=\"string\">\"arguments\"</span>, <span class=\"string\">\"'use strict'; return 17;\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>arguments 只保存原始参数。对形参的赋值不会对 arguments 有影响。<br>不准用 arguments.caller 和 arguments.callee<br>不支持八进制字面量，比如 var a = 015 会报错。<br>对象字面量或者函数形参中，如果有重复的名字，就会报错。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/24336831\" target=\"_blank\" rel=\"noopener\">转载</a></li>\n</ul>\n"},{"title":"Git 常用命令","_content":"\n> Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。\n\n## 安装\n\n## 命令\n\n#### 拉取远程代码\ngit clone https://github.com/shawflying/reskit.git\n\n#### 拉取分支代码\ngit fetch\ngit checkout -b fly origin/fly\n\n#### 查看远程分支\ngit branch -r\n\n#### 拉取远程分支并创建本地分支\n1. 方法1\ngit checkout -b 本地分支名x origin/远程分支名x\n使用该方式会在本地新建分支x，并自动切换到该本地分支x。\n\n2. 方法2\ngit fetch origin 远程分支名x:本地分支名x\n使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout。\n\n#### 分支合并\n如果无冲突，OK\n如果有冲突，该如何解决\ngit log --author=\"yanxxmh\" --after=\"1 week ago\" --oneline\n\n#### checkout\n```\ngit checkout . #本地所有修改的。没有的提交的，都返回到原来的状态\ngit stash #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。\ngit reset --hard HASH #返回到某个节点，不保留修改。\ngit reset --soft HASH #返回到某个节点。保留修改\n```\n\n#### 拉取制定版本代码\n1. 将制定版本闯将一个分支\n2. 使用下面命令下载指定分支信息\n```\ngit clone -b v1 --depth 1 https://github.com/shawflying/reskit.git\ngit clone -b vue.js2.0 --depth 1 https://github.com/shawflying/reskit.git\n```\n\n### 切换分支\n\n查询所有分支\n```\ngit branch -a\n```\n\n查询当前分支\n```\ngit branch\n```\n\n切换分支\n```\ngit checkout devlop\n\ngit branch --set-upstream-to=origin/master origin/账单详情添加跳转链接\n\ngit branch --set-upstream-to=origin/账单详情添加跳转链接 origin/master\n```\n\n```\nroot@ubuntu-129:/data/code/mohoo-telecom-wechat-mobile# git pull\nUsername for 'https://git.coding.net': xxxxx\nPassword for 'https://yanxxmh@git.coding.net': \nremote: Counting objects: 4, done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 4 (delta 2), reused 0 (delta 0)\nUnpacking objects: 100% (4/4), done.\nFrom https://github.com/shawflying/reskit\n   eb8b3be..fa2f6d5  账单详情添加跳转链接 -> origin/账单详情添加跳转链接\nAlready up-to-date.\n```\n\n切换到master\n```\ngit checkout master\n```\n\n切换到其他\n```\ngit checkout \n```\n\n拉取代码\n```\ngit pull <remote> <branch>\n```\n\n当前分支状态\n```\ngit status\n```","source":"_posts/git.md","raw":"---\ntitle: Git 常用命令\ntags: tools\n---\n\n> Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。\n\n## 安装\n\n## 命令\n\n#### 拉取远程代码\ngit clone https://github.com/shawflying/reskit.git\n\n#### 拉取分支代码\ngit fetch\ngit checkout -b fly origin/fly\n\n#### 查看远程分支\ngit branch -r\n\n#### 拉取远程分支并创建本地分支\n1. 方法1\ngit checkout -b 本地分支名x origin/远程分支名x\n使用该方式会在本地新建分支x，并自动切换到该本地分支x。\n\n2. 方法2\ngit fetch origin 远程分支名x:本地分支名x\n使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout。\n\n#### 分支合并\n如果无冲突，OK\n如果有冲突，该如何解决\ngit log --author=\"yanxxmh\" --after=\"1 week ago\" --oneline\n\n#### checkout\n```\ngit checkout . #本地所有修改的。没有的提交的，都返回到原来的状态\ngit stash #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。\ngit reset --hard HASH #返回到某个节点，不保留修改。\ngit reset --soft HASH #返回到某个节点。保留修改\n```\n\n#### 拉取制定版本代码\n1. 将制定版本闯将一个分支\n2. 使用下面命令下载指定分支信息\n```\ngit clone -b v1 --depth 1 https://github.com/shawflying/reskit.git\ngit clone -b vue.js2.0 --depth 1 https://github.com/shawflying/reskit.git\n```\n\n### 切换分支\n\n查询所有分支\n```\ngit branch -a\n```\n\n查询当前分支\n```\ngit branch\n```\n\n切换分支\n```\ngit checkout devlop\n\ngit branch --set-upstream-to=origin/master origin/账单详情添加跳转链接\n\ngit branch --set-upstream-to=origin/账单详情添加跳转链接 origin/master\n```\n\n```\nroot@ubuntu-129:/data/code/mohoo-telecom-wechat-mobile# git pull\nUsername for 'https://git.coding.net': xxxxx\nPassword for 'https://yanxxmh@git.coding.net': \nremote: Counting objects: 4, done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 4 (delta 2), reused 0 (delta 0)\nUnpacking objects: 100% (4/4), done.\nFrom https://github.com/shawflying/reskit\n   eb8b3be..fa2f6d5  账单详情添加跳转链接 -> origin/账单详情添加跳转链接\nAlready up-to-date.\n```\n\n切换到master\n```\ngit checkout master\n```\n\n切换到其他\n```\ngit checkout \n```\n\n拉取代码\n```\ngit pull <remote> <branch>\n```\n\n当前分支状态\n```\ngit status\n```","slug":"git","published":1,"date":"2018-04-27T06:31:01.911Z","updated":"2018-04-27T07:28:56.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghshev60009n1yru39v3px8","content":"<blockquote>\n<p>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h4 id=\"拉取远程代码\"><a href=\"#拉取远程代码\" class=\"headerlink\" title=\"拉取远程代码\"></a>拉取远程代码</h4><p>git clone <a href=\"https://github.com/shawflying/reskit.git\" target=\"_blank\" rel=\"noopener\">https://github.com/shawflying/reskit.git</a></p>\n<h4 id=\"拉取分支代码\"><a href=\"#拉取分支代码\" class=\"headerlink\" title=\"拉取分支代码\"></a>拉取分支代码</h4><p>git fetch<br>git checkout -b fly origin/fly</p>\n<h4 id=\"查看远程分支\"><a href=\"#查看远程分支\" class=\"headerlink\" title=\"查看远程分支\"></a>查看远程分支</h4><p>git branch -r</p>\n<h4 id=\"拉取远程分支并创建本地分支\"><a href=\"#拉取远程分支并创建本地分支\" class=\"headerlink\" title=\"拉取远程分支并创建本地分支\"></a>拉取远程分支并创建本地分支</h4><ol>\n<li><p>方法1<br>git checkout -b 本地分支名x origin/远程分支名x<br>使用该方式会在本地新建分支x，并自动切换到该本地分支x。</p>\n</li>\n<li><p>方法2<br>git fetch origin 远程分支名x:本地分支名x<br>使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout。</p>\n</li>\n</ol>\n<h4 id=\"分支合并\"><a href=\"#分支合并\" class=\"headerlink\" title=\"分支合并\"></a>分支合并</h4><p>如果无冲突，OK<br>如果有冲突，该如何解决<br>git log –author=”yanxxmh” –after=”1 week ago” –oneline</p>\n<h4 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout . #本地所有修改的。没有的提交的，都返回到原来的状态</span><br><span class=\"line\">git stash #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。</span><br><span class=\"line\">git reset --hard HASH #返回到某个节点，不保留修改。</span><br><span class=\"line\">git reset --soft HASH #返回到某个节点。保留修改</span><br></pre></td></tr></table></figure>\n<h4 id=\"拉取制定版本代码\"><a href=\"#拉取制定版本代码\" class=\"headerlink\" title=\"拉取制定版本代码\"></a>拉取制定版本代码</h4><ol>\n<li>将制定版本闯将一个分支</li>\n<li>使用下面命令下载指定分支信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b v1 --depth 1 https://github.com/shawflying/reskit.git</span><br><span class=\"line\">git clone -b vue.js2.0 --depth 1 https://github.com/shawflying/reskit.git</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><p>查询所有分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure></p>\n<p>查询当前分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure></p>\n<p>切换分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout devlop</span><br><span class=\"line\"></span><br><span class=\"line\">git branch --set-upstream-to=origin/master origin/账单详情添加跳转链接</span><br><span class=\"line\"></span><br><span class=\"line\">git branch --set-upstream-to=origin/账单详情添加跳转链接 origin/master</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu-129:/data/code/mohoo-telecom-wechat-mobile# git pull</span><br><span class=\"line\">Username for &apos;https://git.coding.net&apos;: xxxxx</span><br><span class=\"line\">Password for &apos;https://yanxxmh@git.coding.net&apos;: </span><br><span class=\"line\">remote: Counting objects: 4, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (3/3), done.</span><br><span class=\"line\">remote: Total 4 (delta 2), reused 0 (delta 0)</span><br><span class=\"line\">Unpacking objects: 100% (4/4), done.</span><br><span class=\"line\">From https://github.com/shawflying/reskit</span><br><span class=\"line\">   eb8b3be..fa2f6d5  账单详情添加跳转链接 -&gt; origin/账单详情添加跳转链接</span><br><span class=\"line\">Already up-to-date.</span><br></pre></td></tr></table></figure>\n<p>切换到master<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br></pre></td></tr></table></figure></p>\n<p>切换到其他<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout</span><br></pre></td></tr></table></figure></p>\n<p>拉取代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure></p>\n<p>当前分支状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h4 id=\"拉取远程代码\"><a href=\"#拉取远程代码\" class=\"headerlink\" title=\"拉取远程代码\"></a>拉取远程代码</h4><p>git clone <a href=\"https://github.com/shawflying/reskit.git\" target=\"_blank\" rel=\"noopener\">https://github.com/shawflying/reskit.git</a></p>\n<h4 id=\"拉取分支代码\"><a href=\"#拉取分支代码\" class=\"headerlink\" title=\"拉取分支代码\"></a>拉取分支代码</h4><p>git fetch<br>git checkout -b fly origin/fly</p>\n<h4 id=\"查看远程分支\"><a href=\"#查看远程分支\" class=\"headerlink\" title=\"查看远程分支\"></a>查看远程分支</h4><p>git branch -r</p>\n<h4 id=\"拉取远程分支并创建本地分支\"><a href=\"#拉取远程分支并创建本地分支\" class=\"headerlink\" title=\"拉取远程分支并创建本地分支\"></a>拉取远程分支并创建本地分支</h4><ol>\n<li><p>方法1<br>git checkout -b 本地分支名x origin/远程分支名x<br>使用该方式会在本地新建分支x，并自动切换到该本地分支x。</p>\n</li>\n<li><p>方法2<br>git fetch origin 远程分支名x:本地分支名x<br>使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout。</p>\n</li>\n</ol>\n<h4 id=\"分支合并\"><a href=\"#分支合并\" class=\"headerlink\" title=\"分支合并\"></a>分支合并</h4><p>如果无冲突，OK<br>如果有冲突，该如何解决<br>git log –author=”yanxxmh” –after=”1 week ago” –oneline</p>\n<h4 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout . #本地所有修改的。没有的提交的，都返回到原来的状态</span><br><span class=\"line\">git stash #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。</span><br><span class=\"line\">git reset --hard HASH #返回到某个节点，不保留修改。</span><br><span class=\"line\">git reset --soft HASH #返回到某个节点。保留修改</span><br></pre></td></tr></table></figure>\n<h4 id=\"拉取制定版本代码\"><a href=\"#拉取制定版本代码\" class=\"headerlink\" title=\"拉取制定版本代码\"></a>拉取制定版本代码</h4><ol>\n<li>将制定版本闯将一个分支</li>\n<li>使用下面命令下载指定分支信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b v1 --depth 1 https://github.com/shawflying/reskit.git</span><br><span class=\"line\">git clone -b vue.js2.0 --depth 1 https://github.com/shawflying/reskit.git</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><p>查询所有分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure></p>\n<p>查询当前分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure></p>\n<p>切换分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout devlop</span><br><span class=\"line\"></span><br><span class=\"line\">git branch --set-upstream-to=origin/master origin/账单详情添加跳转链接</span><br><span class=\"line\"></span><br><span class=\"line\">git branch --set-upstream-to=origin/账单详情添加跳转链接 origin/master</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu-129:/data/code/mohoo-telecom-wechat-mobile# git pull</span><br><span class=\"line\">Username for &apos;https://git.coding.net&apos;: xxxxx</span><br><span class=\"line\">Password for &apos;https://yanxxmh@git.coding.net&apos;: </span><br><span class=\"line\">remote: Counting objects: 4, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (3/3), done.</span><br><span class=\"line\">remote: Total 4 (delta 2), reused 0 (delta 0)</span><br><span class=\"line\">Unpacking objects: 100% (4/4), done.</span><br><span class=\"line\">From https://github.com/shawflying/reskit</span><br><span class=\"line\">   eb8b3be..fa2f6d5  账单详情添加跳转链接 -&gt; origin/账单详情添加跳转链接</span><br><span class=\"line\">Already up-to-date.</span><br></pre></td></tr></table></figure>\n<p>切换到master<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br></pre></td></tr></table></figure></p>\n<p>切换到其他<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout</span><br></pre></td></tr></table></figure></p>\n<p>拉取代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure></p>\n<p>当前分支状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure></p>\n"},{"title":"hexo","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### 命令行安装\n\n```bash\n$ npm install -g hexo\n```\n\n### 初始化\n```\nhexo init <folder>\n```\n\n### 新建一篇文章\n``` bash\n$ hexo new \"My New Post\"\n```\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 `_config.yml`` 中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n启动服务器。默认情况下，访问网址为： http://localhost:4000/\n``` bash\n$ hexo server\n```\n选项\t描述\n-p, --port\t重设端口\n-s, --static\t只使用静态文件\n-l, --log\t启动日记记录，使用覆盖记录格式\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### generate 生成静态文件\n\n``` bash\n$ hexo generate\n```\n选项\t描述\n-d, --deploy\t文件生成后立即部署网站\n-w, --watch\t监视文件变动\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### deploy 部署网站。\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n### render 渲染文件。\n```\nhexo render <file1> [file2] ...\n```\n-o, --output\t设置输出路径\n\n### clean\n清除缓存文件 (db.json) 和已生成的静态文件 (public)。\n","source":"_posts/hexo.md","raw":"---\ntitle: hexo \ntags: node-tools\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### 命令行安装\n\n```bash\n$ npm install -g hexo\n```\n\n### 初始化\n```\nhexo init <folder>\n```\n\n### 新建一篇文章\n``` bash\n$ hexo new \"My New Post\"\n```\n新建一篇文章。如果没有设置 `layout` 的话，默认使用 `_config.yml`` 中的 `default_layout` 参数代替。如果标题包含空格的话，请使用引号括起来。\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n启动服务器。默认情况下，访问网址为： http://localhost:4000/\n``` bash\n$ hexo server\n```\n选项\t描述\n-p, --port\t重设端口\n-s, --static\t只使用静态文件\n-l, --log\t启动日记记录，使用覆盖记录格式\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### generate 生成静态文件\n\n``` bash\n$ hexo generate\n```\n选项\t描述\n-d, --deploy\t文件生成后立即部署网站\n-w, --watch\t监视文件变动\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### deploy 部署网站。\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\n### render 渲染文件。\n```\nhexo render <file1> [file2] ...\n```\n-o, --output\t设置输出路径\n\n### clean\n清除缓存文件 (db.json) 和已生成的静态文件 (public)。\n","slug":"hexo","published":1,"date":"2018-04-27T06:31:01.912Z","updated":"2018-04-27T07:27:29.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghshev7000an1yrtsh7k941","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"命令行安装\"><a href=\"#命令行安装\" class=\"headerlink\" title=\"命令行安装\"></a>命令行安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"新建一篇文章\"><a href=\"#新建一篇文章\" class=\"headerlink\" title=\"新建一篇文章\"></a>新建一篇文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <code>_config.yml`</code> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><p>启动服务器。默认情况下，访问网址为： <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>选项    描述<br>-p, –port    重设端口<br>-s, –static    只使用静态文件<br>-l, –log    启动日记记录，使用覆盖记录格式</p>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"generate-生成静态文件\"><a href=\"#generate-生成静态文件\" class=\"headerlink\" title=\"generate 生成静态文件\"></a>generate 生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>选项    描述<br>-d, –deploy    文件生成后立即部署网站<br>-w, –watch    监视文件变动</p>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"deploy-部署网站。\"><a href=\"#deploy-部署网站。\" class=\"headerlink\" title=\"deploy 部署网站。\"></a>deploy 部署网站。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<h3 id=\"render-渲染文件。\"><a href=\"#render-渲染文件。\" class=\"headerlink\" title=\"render 渲染文件。\"></a>render 渲染文件。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>\n<p>-o, –output    设置输出路径</p>\n<h3 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h3><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"命令行安装\"><a href=\"#命令行安装\" class=\"headerlink\" title=\"命令行安装\"></a>命令行安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"新建一篇文章\"><a href=\"#新建一篇文章\" class=\"headerlink\" title=\"新建一篇文章\"></a>新建一篇文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <code>_config.yml`</code> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><p>启动服务器。默认情况下，访问网址为： <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>选项    描述<br>-p, –port    重设端口<br>-s, –static    只使用静态文件<br>-l, –log    启动日记记录，使用覆盖记录格式</p>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"generate-生成静态文件\"><a href=\"#generate-生成静态文件\" class=\"headerlink\" title=\"generate 生成静态文件\"></a>generate 生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>选项    描述<br>-d, –deploy    文件生成后立即部署网站<br>-w, –watch    监视文件变动</p>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"deploy-部署网站。\"><a href=\"#deploy-部署网站。\" class=\"headerlink\" title=\"deploy 部署网站。\"></a>deploy 部署网站。</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<h3 id=\"render-渲染文件。\"><a href=\"#render-渲染文件。\" class=\"headerlink\" title=\"render 渲染文件。\"></a>render 渲染文件。</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>\n<p>-o, –output    设置输出路径</p>\n<h3 id=\"clean\"><a href=\"#clean\" class=\"headerlink\" title=\"clean\"></a>clean</h3><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>\n"},{"layout":"post","title":"http-server","date":"2017-08-15T14:51:10.000Z","updated":"2018-04-27T07:55:49.000Z","_content":"\n> http-server 是一个简单的零配置命令行HTTP服务器, 基于 nodeJs.\n\n\n## 安装(全局安装)\n```\nnpm install http-server -g\n```\n\n## 使用\n在站点目录下开启命令行输入\n```\n http-server\n```\n\n使用于package.json\n```json\n{\n    \"scripts\": {\n         \"start\": \"http-server -a 0.0.0.0 -p 8000\"\n     }\n }\n```\n\n入参：\n```\n-p 端口号 (默认 8080)\n\n-a IP 地址 (默认 0.0.0.0)\n\n-d 显示目录列表 (默认 'True')\n\n-i 显示 autoIndex (默认 'True')\n\n-e or --ext 如果没有提供默认的文件扩展名(默认 'html')\n\n-s or --silent 禁止日志信息输出\n\n--cors 启用 CORS via the Access-Control-Allow-Origin header\n\n-o 在开始服务后打开浏览器\n-c 为 cache-control max-age header 设置Cache time(秒) , e.g. -c10 for 10 seconds (defaults to '3600'). 禁用 caching, 则使用 -c-1.\n-U 或 --utc 使用UTC time 格式化log消息\n\n-P or --proxy Proxies all requests which can't be resolved locally to the given url. e.g.: -P http://someurl.com\n\n-S or --ssl 启用 https\n\n-C or --cert ssl cert 文件路径 (default: cert.pem)\n\n-K or --key Path to ssl key file (default: key.pem).\n\n-r or --robots Provide a /robots.txt (whose content defaults to 'User-agent: *\\nDisallow: /')\n\n-h or --help 打印以上列表并退出\n\n```","source":"_posts/http-server.md","raw":"---\nlayout: post\ntitle: http-server\ndate: 2017-08-15 22:51:10\nupdated: 2018-04-27 15:55:49\ntags: node-tools\n---\n\n> http-server 是一个简单的零配置命令行HTTP服务器, 基于 nodeJs.\n\n\n## 安装(全局安装)\n```\nnpm install http-server -g\n```\n\n## 使用\n在站点目录下开启命令行输入\n```\n http-server\n```\n\n使用于package.json\n```json\n{\n    \"scripts\": {\n         \"start\": \"http-server -a 0.0.0.0 -p 8000\"\n     }\n }\n```\n\n入参：\n```\n-p 端口号 (默认 8080)\n\n-a IP 地址 (默认 0.0.0.0)\n\n-d 显示目录列表 (默认 'True')\n\n-i 显示 autoIndex (默认 'True')\n\n-e or --ext 如果没有提供默认的文件扩展名(默认 'html')\n\n-s or --silent 禁止日志信息输出\n\n--cors 启用 CORS via the Access-Control-Allow-Origin header\n\n-o 在开始服务后打开浏览器\n-c 为 cache-control max-age header 设置Cache time(秒) , e.g. -c10 for 10 seconds (defaults to '3600'). 禁用 caching, 则使用 -c-1.\n-U 或 --utc 使用UTC time 格式化log消息\n\n-P or --proxy Proxies all requests which can't be resolved locally to the given url. e.g.: -P http://someurl.com\n\n-S or --ssl 启用 https\n\n-C or --cert ssl cert 文件路径 (default: cert.pem)\n\n-K or --key Path to ssl key file (default: key.pem).\n\n-r or --robots Provide a /robots.txt (whose content defaults to 'User-agent: *\\nDisallow: /')\n\n-h or --help 打印以上列表并退出\n\n```","slug":"http-server","published":1,"comments":1,"photos":[],"link":"","_id":"cjghshevc000dn1yrzunjid7q","content":"<blockquote>\n<p>http-server 是一个简单的零配置命令行HTTP服务器, 基于 nodeJs.</p>\n</blockquote>\n<h2 id=\"安装-全局安装\"><a href=\"#安装-全局安装\" class=\"headerlink\" title=\"安装(全局安装)\"></a>安装(全局安装)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install http-server -g</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在站点目录下开启命令行输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-server</span><br></pre></td></tr></table></figure></p>\n<p>使用于package.json<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">         <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"http-server -a 0.0.0.0 -p 8000\"</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>入参：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-p 端口号 (默认 8080)</span><br><span class=\"line\"></span><br><span class=\"line\">-a IP 地址 (默认 0.0.0.0)</span><br><span class=\"line\"></span><br><span class=\"line\">-d 显示目录列表 (默认 &apos;True&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">-i 显示 autoIndex (默认 &apos;True&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">-e or --ext 如果没有提供默认的文件扩展名(默认 &apos;html&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">-s or --silent 禁止日志信息输出</span><br><span class=\"line\"></span><br><span class=\"line\">--cors 启用 CORS via the Access-Control-Allow-Origin header</span><br><span class=\"line\"></span><br><span class=\"line\">-o 在开始服务后打开浏览器</span><br><span class=\"line\">-c 为 cache-control max-age header 设置Cache time(秒) , e.g. -c10 for 10 seconds (defaults to &apos;3600&apos;). 禁用 caching, 则使用 -c-1.</span><br><span class=\"line\">-U 或 --utc 使用UTC time 格式化log消息</span><br><span class=\"line\"></span><br><span class=\"line\">-P or --proxy Proxies all requests which can&apos;t be resolved locally to the given url. e.g.: -P http://someurl.com</span><br><span class=\"line\"></span><br><span class=\"line\">-S or --ssl 启用 https</span><br><span class=\"line\"></span><br><span class=\"line\">-C or --cert ssl cert 文件路径 (default: cert.pem)</span><br><span class=\"line\"></span><br><span class=\"line\">-K or --key Path to ssl key file (default: key.pem).</span><br><span class=\"line\"></span><br><span class=\"line\">-r or --robots Provide a /robots.txt (whose content defaults to &apos;User-agent: *\\nDisallow: /&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">-h or --help 打印以上列表并退出</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>http-server 是一个简单的零配置命令行HTTP服务器, 基于 nodeJs.</p>\n</blockquote>\n<h2 id=\"安装-全局安装\"><a href=\"#安装-全局安装\" class=\"headerlink\" title=\"安装(全局安装)\"></a>安装(全局安装)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install http-server -g</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在站点目录下开启命令行输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-server</span><br></pre></td></tr></table></figure></p>\n<p>使用于package.json<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">         <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"http-server -a 0.0.0.0 -p 8000\"</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>入参：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-p 端口号 (默认 8080)</span><br><span class=\"line\"></span><br><span class=\"line\">-a IP 地址 (默认 0.0.0.0)</span><br><span class=\"line\"></span><br><span class=\"line\">-d 显示目录列表 (默认 &apos;True&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">-i 显示 autoIndex (默认 &apos;True&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">-e or --ext 如果没有提供默认的文件扩展名(默认 &apos;html&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">-s or --silent 禁止日志信息输出</span><br><span class=\"line\"></span><br><span class=\"line\">--cors 启用 CORS via the Access-Control-Allow-Origin header</span><br><span class=\"line\"></span><br><span class=\"line\">-o 在开始服务后打开浏览器</span><br><span class=\"line\">-c 为 cache-control max-age header 设置Cache time(秒) , e.g. -c10 for 10 seconds (defaults to &apos;3600&apos;). 禁用 caching, 则使用 -c-1.</span><br><span class=\"line\">-U 或 --utc 使用UTC time 格式化log消息</span><br><span class=\"line\"></span><br><span class=\"line\">-P or --proxy Proxies all requests which can&apos;t be resolved locally to the given url. e.g.: -P http://someurl.com</span><br><span class=\"line\"></span><br><span class=\"line\">-S or --ssl 启用 https</span><br><span class=\"line\"></span><br><span class=\"line\">-C or --cert ssl cert 文件路径 (default: cert.pem)</span><br><span class=\"line\"></span><br><span class=\"line\">-K or --key Path to ssl key file (default: key.pem).</span><br><span class=\"line\"></span><br><span class=\"line\">-r or --robots Provide a /robots.txt (whose content defaults to &apos;User-agent: *\\nDisallow: /&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">-h or --help 打印以上列表并退出</span><br></pre></td></tr></table></figure></p>\n"},{"title":"node.js下用window.onerror捕获并上报Js错误","_content":"\n## 使用场景\n1. 捕获前端js异常信息，方便后期优化\n2. 方便前端交互持续优化\n3. 方便问题重现\n\n\n## 环境\n* node.js\n* 框架：koa\n* 日志模块：log4js\n\n## 前端代码\n1. 使用前端的window.onerror 事件进行监听前端代码的异常。\n2. 当前端代码发生异常时，通过post并将异常信息上传服务器。\n\n```js\nwindow.onerror = function(errorMessage, scriptURI, lineNumber, columnNumber, errorObj) {\n    var params = {\n        errorMessage: errorMessage,\n        scriptURI: scriptURI,\n        lineNumber: lineNumber,\n        columnNumber: columnNumber,\n        errorObj: errorObj\n    };\n    $.post('/yourserver/error', params, function(data) {\n        console.log(JSON.stringify(data));\n    });\n}\n```\n\n## 后端代码\n1. 记录前端异常信息\n2. 记录发生异常时设备、浏览器信息\n3. 记录发生异常的ip地址\n\n```js\nvar body = this.request.body;\nvar userAgent = this.headers['user-agent'];\nvar cookie = this.headers['cookie'];\nlogger.error('--------------------前端异常信息----------------------');\nlogger.error(\"手机及浏览器环境：\" + userAgent);\nlogger.error(\"ip地址：\" + this.ip);\nlogger.error(\"cookie：\" + cookie);\nlogger.error(\"错误信息：\" + body.errorMessage);\nlogger.error(\"出错文件：\" + body.scriptURI);\nlogger.error(\"出错行号：\" + body.lineNumber);\nlogger.error(\"出错列号：\" + body.columnNumber);\nlogger.error(\"错误详情：\" + body.errorObj);\nlogger.error(\"----------------------end-----------------------------\");\nthis.body = {status:200,data:'ok'};\n\n```\n\n## 结果\n\n浏览器端：\n![浏览器端异常信息](/view/img/window-err-b.jpg)\n\n服务器端：\n![服务器异常信息](/view/img/window.error.png)\n\n","source":"_posts/node.js_window.onerror.md","raw":"---\ntitle: node.js下用window.onerror捕获并上报Js错误\ntags: node.js\n---\n\n## 使用场景\n1. 捕获前端js异常信息，方便后期优化\n2. 方便前端交互持续优化\n3. 方便问题重现\n\n\n## 环境\n* node.js\n* 框架：koa\n* 日志模块：log4js\n\n## 前端代码\n1. 使用前端的window.onerror 事件进行监听前端代码的异常。\n2. 当前端代码发生异常时，通过post并将异常信息上传服务器。\n\n```js\nwindow.onerror = function(errorMessage, scriptURI, lineNumber, columnNumber, errorObj) {\n    var params = {\n        errorMessage: errorMessage,\n        scriptURI: scriptURI,\n        lineNumber: lineNumber,\n        columnNumber: columnNumber,\n        errorObj: errorObj\n    };\n    $.post('/yourserver/error', params, function(data) {\n        console.log(JSON.stringify(data));\n    });\n}\n```\n\n## 后端代码\n1. 记录前端异常信息\n2. 记录发生异常时设备、浏览器信息\n3. 记录发生异常的ip地址\n\n```js\nvar body = this.request.body;\nvar userAgent = this.headers['user-agent'];\nvar cookie = this.headers['cookie'];\nlogger.error('--------------------前端异常信息----------------------');\nlogger.error(\"手机及浏览器环境：\" + userAgent);\nlogger.error(\"ip地址：\" + this.ip);\nlogger.error(\"cookie：\" + cookie);\nlogger.error(\"错误信息：\" + body.errorMessage);\nlogger.error(\"出错文件：\" + body.scriptURI);\nlogger.error(\"出错行号：\" + body.lineNumber);\nlogger.error(\"出错列号：\" + body.columnNumber);\nlogger.error(\"错误详情：\" + body.errorObj);\nlogger.error(\"----------------------end-----------------------------\");\nthis.body = {status:200,data:'ok'};\n\n```\n\n## 结果\n\n浏览器端：\n![浏览器端异常信息](/view/img/window-err-b.jpg)\n\n服务器端：\n![服务器异常信息](/view/img/window.error.png)\n\n","slug":"node.js_window.onerror","published":1,"date":"2018-04-27T06:31:01.949Z","updated":"2018-04-27T09:19:17.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghshevf000en1yrddmmfq6b","content":"<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ol>\n<li>捕获前端js异常信息，方便后期优化</li>\n<li>方便前端交互持续优化</li>\n<li>方便问题重现</li>\n</ol>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>node.js</li>\n<li>框架：koa</li>\n<li>日志模块：log4js</li>\n</ul>\n<h2 id=\"前端代码\"><a href=\"#前端代码\" class=\"headerlink\" title=\"前端代码\"></a>前端代码</h2><ol>\n<li>使用前端的window.onerror 事件进行监听前端代码的异常。</li>\n<li>当前端代码发生异常时，通过post并将异常信息上传服务器。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">errorMessage, scriptURI, lineNumber, columnNumber, errorObj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> params = &#123;</span><br><span class=\"line\">        errorMessage: errorMessage,</span><br><span class=\"line\">        scriptURI: scriptURI,</span><br><span class=\"line\">        lineNumber: lineNumber,</span><br><span class=\"line\">        columnNumber: columnNumber,</span><br><span class=\"line\">        errorObj: errorObj</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    $.post(<span class=\"string\">'/yourserver/error'</span>, params, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"后端代码\"><a href=\"#后端代码\" class=\"headerlink\" title=\"后端代码\"></a>后端代码</h2><ol>\n<li>记录前端异常信息</li>\n<li>记录发生异常时设备、浏览器信息</li>\n<li>记录发生异常的ip地址</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body = <span class=\"keyword\">this</span>.request.body;</span><br><span class=\"line\"><span class=\"keyword\">var</span> userAgent = <span class=\"keyword\">this</span>.headers[<span class=\"string\">'user-agent'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> cookie = <span class=\"keyword\">this</span>.headers[<span class=\"string\">'cookie'</span>];</span><br><span class=\"line\">logger.error(<span class=\"string\">'--------------------前端异常信息----------------------'</span>);</span><br><span class=\"line\">logger.error(<span class=\"string\">\"手机及浏览器环境：\"</span> + userAgent);</span><br><span class=\"line\">logger.error(<span class=\"string\">\"ip地址：\"</span> + <span class=\"keyword\">this</span>.ip);</span><br><span class=\"line\">logger.error(<span class=\"string\">\"cookie：\"</span> + cookie);</span><br><span class=\"line\">logger.error(<span class=\"string\">\"错误信息：\"</span> + body.errorMessage);</span><br><span class=\"line\">logger.error(<span class=\"string\">\"出错文件：\"</span> + body.scriptURI);</span><br><span class=\"line\">logger.error(<span class=\"string\">\"出错行号：\"</span> + body.lineNumber);</span><br><span class=\"line\">logger.error(<span class=\"string\">\"出错列号：\"</span> + body.columnNumber);</span><br><span class=\"line\">logger.error(<span class=\"string\">\"错误详情：\"</span> + body.errorObj);</span><br><span class=\"line\">logger.error(<span class=\"string\">\"----------------------end-----------------------------\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.body = &#123;<span class=\"attr\">status</span>:<span class=\"number\">200</span>,<span class=\"attr\">data</span>:<span class=\"string\">'ok'</span>&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>浏览器端：<br><img src=\"/view/img/window-err-b.jpg\" alt=\"浏览器端异常信息\"></p>\n<p>服务器端：<br><img src=\"/view/img/window.error.png\" alt=\"服务器异常信息\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ol>\n<li>捕获前端js异常信息，方便后期优化</li>\n<li>方便前端交互持续优化</li>\n<li>方便问题重现</li>\n</ol>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>node.js</li>\n<li>框架：koa</li>\n<li>日志模块：log4js</li>\n</ul>\n<h2 id=\"前端代码\"><a href=\"#前端代码\" class=\"headerlink\" title=\"前端代码\"></a>前端代码</h2><ol>\n<li>使用前端的window.onerror 事件进行监听前端代码的异常。</li>\n<li>当前端代码发生异常时，通过post并将异常信息上传服务器。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">errorMessage, scriptURI, lineNumber, columnNumber, errorObj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> params = &#123;</span><br><span class=\"line\">        errorMessage: errorMessage,</span><br><span class=\"line\">        scriptURI: scriptURI,</span><br><span class=\"line\">        lineNumber: lineNumber,</span><br><span class=\"line\">        columnNumber: columnNumber,</span><br><span class=\"line\">        errorObj: errorObj</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    $.post(<span class=\"string\">'/yourserver/error'</span>, params, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(data));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"后端代码\"><a href=\"#后端代码\" class=\"headerlink\" title=\"后端代码\"></a>后端代码</h2><ol>\n<li>记录前端异常信息</li>\n<li>记录发生异常时设备、浏览器信息</li>\n<li>记录发生异常的ip地址</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> body = <span class=\"keyword\">this</span>.request.body;</span><br><span class=\"line\"><span class=\"keyword\">var</span> userAgent = <span class=\"keyword\">this</span>.headers[<span class=\"string\">'user-agent'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> cookie = <span class=\"keyword\">this</span>.headers[<span class=\"string\">'cookie'</span>];</span><br><span class=\"line\">logger.error(<span class=\"string\">'--------------------前端异常信息----------------------'</span>);</span><br><span class=\"line\">logger.error(<span class=\"string\">\"手机及浏览器环境：\"</span> + userAgent);</span><br><span class=\"line\">logger.error(<span class=\"string\">\"ip地址：\"</span> + <span class=\"keyword\">this</span>.ip);</span><br><span class=\"line\">logger.error(<span class=\"string\">\"cookie：\"</span> + cookie);</span><br><span class=\"line\">logger.error(<span class=\"string\">\"错误信息：\"</span> + body.errorMessage);</span><br><span class=\"line\">logger.error(<span class=\"string\">\"出错文件：\"</span> + body.scriptURI);</span><br><span class=\"line\">logger.error(<span class=\"string\">\"出错行号：\"</span> + body.lineNumber);</span><br><span class=\"line\">logger.error(<span class=\"string\">\"出错列号：\"</span> + body.columnNumber);</span><br><span class=\"line\">logger.error(<span class=\"string\">\"错误详情：\"</span> + body.errorObj);</span><br><span class=\"line\">logger.error(<span class=\"string\">\"----------------------end-----------------------------\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.body = &#123;<span class=\"attr\">status</span>:<span class=\"number\">200</span>,<span class=\"attr\">data</span>:<span class=\"string\">'ok'</span>&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>浏览器端：<br><img src=\"/view/img/window-err-b.jpg\" alt=\"浏览器端异常信息\"></p>\n<p>服务器端：<br><img src=\"/view/img/window.error.png\" alt=\"服务器异常信息\"></p>\n"},{"title":"node.js 开发规范","date":"2017-01-19T11:56:53.000Z","_content":"\n## 命名规范\n### 命名法说明\n1. camel命名法，形如 `thisIsAnApple`\n2. pascal命名法，形如`ThisIsAnApple`\n3. 下划线命名法，形如`this_is_an_apple`\n4. 中划线命名法，形如`this-is-an-apple`\n5. 匈牙利命名法，`变量名`＝`类型`＋`对象描述`\n\n### 命名法说明\n1. 变量名：必须使用camel命名法\n2. 参数名：必须使用camel命名法\n3. 函数名：必须使用camel命名法\n4. 方法/属性：必须使用camel命名法\n5. 私有（保护）成员：必须以下划线_开头\n6. 常量名：必须使用全部大写的下划线命名法，如IS_DEBUG_ENABLED\n7. 类名：必须使用pascal命名法\n8. 枚举名：必须使用pascal命名法\n9. 枚举的属性：必须使用全部大写的下划线命名法\n10. 命名空间：必须使用camel命名法\n11. 语义：命名同时还需要关注语义，如：\n\t* 变量名应当使用名词；\n\t* boolean类型的应当使用is、has等起头，表示其类型；\n\t* 函数名应当用动宾短语；getName\n\t* 类名应当用名词。Person\n\n### 项目名称\n```\nmohoo-telecom-wechat-manager\n```\n\n### 文件目录\n```\nproxy\n```\n\n### proxy,rest,contr 文件名称\n```\nAuthProxy\nAuthRest\nAuthCtrl\n```\n\n### 接口地址\n\n### 静态资源\n1. js\n2. css: page-alert-span\n3. img: page-icon-add\n\n### router\n```\nrouter.get('/index', auth.authWxUser, home.Index);\nrouter.get('/rule', auth.authWxUser, home.Rule);\n\nrouter.get('/query/devicename', auth.authWxUser, home.deviceName);//查询\nrouter.get('/create/record', auth.authWxUser, home.record);//创建\nrouter.get('/update/recordstatus', auth.authWxUser, home.recordStatus);//修改\nrouter.get('/delete/recordbyid', auth.authWxUser, home.recordById);//删除\n```\n\n### URL接口命名-单词分割\n```\n\n```\n\n### 类名，对象名\n\n```\nfunction Person(){\n\n}\n\nvar BillAndPayProxy = {};\nBillAndPayProxy.getWXPayData = function (param, callback) {\n    httpUtil.post(apis.wxDiscPayUrl, param, function (error, response, content) {\n        callback(error, content);\n    });\n};\n\n```\n\n\n### 方法名称\n* getName\n* addUserRecord\n* get/set, add/remove, create/destroy, start/stop, insert/delete, begin/end。\n\n```\nvar AuthProxy = {};\n\nAuthProxy.getName();\n```\n\n### 私有变量\n```\nvar AuthProxy = {\n\t_name: '',\n\t_age: ''\n};\nvar person = {\n\t_setSext: function() {\n\t\t// ...\n\t},\n\t_setName: function() {\n\t\t// ...\n\t}\n};\n```\n### 常量\n```\nvar PI = '3.1415926';\nvar URL_BIND = 'http://wwww.baidu.com';\n```\n\n### 变量\n\n> 总所周知，javascript是一种语法极其灵活的语言。javascript在设计之初就只是用来为HTML添加动态效果的。由于他动态，弱类型等特性，以及不同浏览器的兼容性问题，、\n造成了开发成本要比java等语言要高很多。正因为它太灵活，我们制定了适用于网易邮箱的javascript编码规范，尽可能多的降低由于语法灵活造成的问题。\n以下将具体介绍：\n\n\n变量名包括`全局变量`，`局部变量`，`类变量`，`函数参数`等等\n\n###### 基本规范\n\n`变量命名`都以`类型前缀`+`有意义的单词`组成，单词首字母都需要大写。例如：`sUserName`，`nCount`。\n\n###### 前缀规范\n\n每个局部变量都需要有一个类型前缀，按照类型可以分为：\n\n```\ns：表示字符串。例如：sName，sHtml;\n\nn：表示数字。例如：nPage，nTotal;\n\nb：表示逻辑。例如：bChecked，bHasLogin;\n\na：表示数组。例如：aList，aGroup;\n\nr：表示正则表达式。例如：rDomain，rEmail;\n\nf：表示函数。例如：fGetHtml，fInit;\n\no：表示以上未涉及到的其他对象，例如：oButton，oDate;\n\ng：global 全局变量 例如：gVersion\n```\n###### 例外情况：\n\n1：作用域不大临时变量可以简写，比如：str，num，bol，obj，fun，arr。\n\n2：循环变量可以简写，比如：i，j，k等。\n\n为什么需要这样强制定义变量前缀?\n正式因为javascript是弱语言造成的。在定义大量变量的时候，我们需要很明确的知道当前变量是什么属性，\n如果只通过普通单词，是很难区分的。\n\n2. 函数命名规范\n\n统一使用`动词`或者`动词[+名词]`形式，例如：fGetVersion()，fSubmitForm()，fInit();\n涉及返回逻辑值的函数可以使用is，has等表示逻辑的词语代替动词。\n\n如果有内部函数，使用__f+动词[+名词]形式，内部函数必需在函数最后定义。例如：\n```\nfunction fGetNumber(nTotal) {\n\tif (nTotal < 100) {\n\t\tnTotal = 100;\n\t}\n\treturn __fAdd(nTotal);\n\n\tfunction __fAdd(nNumber) {\n\t\tnNumber++;\n\t\treturn nNumber;\n\t}\n}\nfGetNumber(30)\n```\n3.其他注意事项\n\n```\n1：所有命名最好使用英语表示。\n\n2：所有变量名应该明确而必要，尽量避免不必要的容易混淆的缩写。\n\n3：netease.events.mouse.Handler，而不是 netease.events.mouse.MouseEventHandler。\n\n4：对应的方法应该使用对应的动词，例如：get/set, add/remove, create/destroy, start/stop, insert/delete, begin/end。\n\n5：应该避免双重否定意义的变量，例如：bIsNotError, bIsNotFound，不可取。\n\n6：变量应该在最小的范围内定义，并尽可能的保持最少的活动时间。\n\n7：尽量避免复杂的条件语句，可以使用临时的boolean变量代替。\n\n8：一定要避免在条件中执行语句，例如：if((i=3)>2){}，不可取。\n\n```\n\n## 匈牙利命名法\n\n### 匈牙利命名法语法：\n\n`变量名`＝`类型`＋`对象描述`\n**类型**指变量的类型\n**对象描述**指对象名字全称或名字的一部分，要求有明确含义，命名要容易记忆容易理解。\n提示: 虽然JavaScript变量表面上没有类型，但是JavaScript内部还是会为变量赋予相应的类型。\n\n提示: 匈牙利命名法是一位微软程序员发明的，多数的C,C++程序都使用此命名法。\n\nJavaScript变量匈牙利命名类型\nJavaScript变量起名类型\t变量命名前缀\nArray 数组\ta\nFloat 浮点\tl\nFunction 函数\tf\nInteger(int) 整型\tn\nObject 对象\to\nRegular Expression 正则\tr\nString 字符串\ts\ng全局变量\t\tg\nJavaScript变量名匈牙利命名法示例\n```\nvar sWebURL=\"www.jb51.net\";\n```\n从变量的名字可以看出s代表字符串WebURL是网址。\n```\nvar nCheckCount=5;\n```\n从变量的名字可以看出n代表Integer(整型)，CheckCount代表某种数量。\n\n使用匈牙利命名法非常简单直观，方便判断变量的类型，而且方便程序的阅读与维护。\n\n\n## 限制\n1. 尽量不要使用 eval()，冗余产生入侵\n2. 缩进 在同一系统中应采用同一种缩进标准，本文提倡缩进大小为4个空格。\n3. 花括号{}\n4. 空格  任何“;”后空一格、for循环中初始化“,”后空一格、数组中\",\"后空一格、对象中“:”后空一格、如：\n```\nfor (var i = 0, j = 1; i < 10; i += 1){\n  var some = [1, 2, 3];\n  var obj = {aa: 1, bb: 2}\n}\n```\n5. 函数参数里“,”后空一格、函数声明中花括号前空一格、函数表达式中括号前后各空一格，如：\n```\nfunc(a, b, c){};\nfunction func() {};\nvar func = function () {};\n```\n\n6. 所有的操作符前后都跟一个空格，如：\n```\nvar d = 0,\n    a = b + 1;\nif (a && b && c) {\n    d = a % c;\n    a += d;\n}\n```\n\n7. 换行\n在以下位置必须换行：\n  * 每个独立语句结束后；\n  * if、else、catch、finally、while等关键字前；\n  * 运算符处换行时，运算符必须在新行的行首。\n  * 对于因为单行长度超过限制时产生的换行，参考行长度中的策略进行分隔。\n\n8. 三元运算符过长\n```\n//无需换行\nvar result = content?result1:result2;\n\n//换行\nvar data = _.isEmpty(content)\n  ? _.isEmpty(content2)\n    ?content3:content2\n  :content;\n```\n\n\n## Interface 接口返回参数规范\n1. 接口名称：大驼峰吗？\n1. 返回参数，小驼峰\n```\n{status:200,data:{name:'admin',list:[]},info:''}\n{status:0,data:'查询失败',info:''}\n{status:5005,data:'服务器繁忙',info:''}\n```\n\n\n## Proxy 代理层\n1. 注释：标记入参，出参\n2. 将接口参数返回为标准模式参数\n3. 在备注中添加，功能简介，\n```\n/**\n * 录入赠送记录\n * 1. 通过。。。。\n * @param params\n * {\"openid\":\"微信唯一标识\",\"from_deviceno\":\"发起人设备号 必传\",\"to_deviceno\":\"接受人设备号 必传\",\"gifts\":\"礼物 [50M、100G] 必传\",\"type\":\"类型 [1]流量 必传\",\"remark\":\"备注 一个有规则的json串\"}\n * @param callback\n *  {\"data\":\"赠送记录唯一标识\",\"status\":200,\"info\":0}\n * @constructor\n */\nGiveFlowProxy.GfCreateGivingGiftsRecord = function (params, callback) {\n    var url = urlKit.GfCreateGivingGiftsRecord;\n    httpUtil.post(url, params, function (error, response, content) {\n        callback(error, content);\n    });\n};\n```\n\n## 写注释\n1. 注释规范\n2. 包含那些信息\n\n```\n/**\n * 方法名\n 1. 简要写一下功能操作\n * @param  {[type]}   param    [description]\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\nBillAndPayProxy.getWXPayData = function (param, callback) {\n    httpUtil.post(apis.wxDiscPayUrl, param, function (error, response, content) {\n        logger.info(\"获取微信支付数据返回结果：\" + JSON.stringify(param) + JSON.stringify(content));\n        callback(error, content);\n    });\n};\n```\n\n## 参考\n- [网易前端JavaScript编码规范](http://www.php100.com/html/webkaifa/javascript/2012/0616/10550.html)\n- [最全的Javascript编码规范(推荐)](http://www.jb51.net/article/87142.htm)\n- [javascript 命名规则 变量命名规则](http://www.jb51.net/article/22229.htm)\n\n","source":"_posts/nodejs开发规范.md","raw":"---\ntitle: node.js 开发规范\ndate: 2017-01-19 19:56:53\ntags: node.js\n---\n\n## 命名规范\n### 命名法说明\n1. camel命名法，形如 `thisIsAnApple`\n2. pascal命名法，形如`ThisIsAnApple`\n3. 下划线命名法，形如`this_is_an_apple`\n4. 中划线命名法，形如`this-is-an-apple`\n5. 匈牙利命名法，`变量名`＝`类型`＋`对象描述`\n\n### 命名法说明\n1. 变量名：必须使用camel命名法\n2. 参数名：必须使用camel命名法\n3. 函数名：必须使用camel命名法\n4. 方法/属性：必须使用camel命名法\n5. 私有（保护）成员：必须以下划线_开头\n6. 常量名：必须使用全部大写的下划线命名法，如IS_DEBUG_ENABLED\n7. 类名：必须使用pascal命名法\n8. 枚举名：必须使用pascal命名法\n9. 枚举的属性：必须使用全部大写的下划线命名法\n10. 命名空间：必须使用camel命名法\n11. 语义：命名同时还需要关注语义，如：\n\t* 变量名应当使用名词；\n\t* boolean类型的应当使用is、has等起头，表示其类型；\n\t* 函数名应当用动宾短语；getName\n\t* 类名应当用名词。Person\n\n### 项目名称\n```\nmohoo-telecom-wechat-manager\n```\n\n### 文件目录\n```\nproxy\n```\n\n### proxy,rest,contr 文件名称\n```\nAuthProxy\nAuthRest\nAuthCtrl\n```\n\n### 接口地址\n\n### 静态资源\n1. js\n2. css: page-alert-span\n3. img: page-icon-add\n\n### router\n```\nrouter.get('/index', auth.authWxUser, home.Index);\nrouter.get('/rule', auth.authWxUser, home.Rule);\n\nrouter.get('/query/devicename', auth.authWxUser, home.deviceName);//查询\nrouter.get('/create/record', auth.authWxUser, home.record);//创建\nrouter.get('/update/recordstatus', auth.authWxUser, home.recordStatus);//修改\nrouter.get('/delete/recordbyid', auth.authWxUser, home.recordById);//删除\n```\n\n### URL接口命名-单词分割\n```\n\n```\n\n### 类名，对象名\n\n```\nfunction Person(){\n\n}\n\nvar BillAndPayProxy = {};\nBillAndPayProxy.getWXPayData = function (param, callback) {\n    httpUtil.post(apis.wxDiscPayUrl, param, function (error, response, content) {\n        callback(error, content);\n    });\n};\n\n```\n\n\n### 方法名称\n* getName\n* addUserRecord\n* get/set, add/remove, create/destroy, start/stop, insert/delete, begin/end。\n\n```\nvar AuthProxy = {};\n\nAuthProxy.getName();\n```\n\n### 私有变量\n```\nvar AuthProxy = {\n\t_name: '',\n\t_age: ''\n};\nvar person = {\n\t_setSext: function() {\n\t\t// ...\n\t},\n\t_setName: function() {\n\t\t// ...\n\t}\n};\n```\n### 常量\n```\nvar PI = '3.1415926';\nvar URL_BIND = 'http://wwww.baidu.com';\n```\n\n### 变量\n\n> 总所周知，javascript是一种语法极其灵活的语言。javascript在设计之初就只是用来为HTML添加动态效果的。由于他动态，弱类型等特性，以及不同浏览器的兼容性问题，、\n造成了开发成本要比java等语言要高很多。正因为它太灵活，我们制定了适用于网易邮箱的javascript编码规范，尽可能多的降低由于语法灵活造成的问题。\n以下将具体介绍：\n\n\n变量名包括`全局变量`，`局部变量`，`类变量`，`函数参数`等等\n\n###### 基本规范\n\n`变量命名`都以`类型前缀`+`有意义的单词`组成，单词首字母都需要大写。例如：`sUserName`，`nCount`。\n\n###### 前缀规范\n\n每个局部变量都需要有一个类型前缀，按照类型可以分为：\n\n```\ns：表示字符串。例如：sName，sHtml;\n\nn：表示数字。例如：nPage，nTotal;\n\nb：表示逻辑。例如：bChecked，bHasLogin;\n\na：表示数组。例如：aList，aGroup;\n\nr：表示正则表达式。例如：rDomain，rEmail;\n\nf：表示函数。例如：fGetHtml，fInit;\n\no：表示以上未涉及到的其他对象，例如：oButton，oDate;\n\ng：global 全局变量 例如：gVersion\n```\n###### 例外情况：\n\n1：作用域不大临时变量可以简写，比如：str，num，bol，obj，fun，arr。\n\n2：循环变量可以简写，比如：i，j，k等。\n\n为什么需要这样强制定义变量前缀?\n正式因为javascript是弱语言造成的。在定义大量变量的时候，我们需要很明确的知道当前变量是什么属性，\n如果只通过普通单词，是很难区分的。\n\n2. 函数命名规范\n\n统一使用`动词`或者`动词[+名词]`形式，例如：fGetVersion()，fSubmitForm()，fInit();\n涉及返回逻辑值的函数可以使用is，has等表示逻辑的词语代替动词。\n\n如果有内部函数，使用__f+动词[+名词]形式，内部函数必需在函数最后定义。例如：\n```\nfunction fGetNumber(nTotal) {\n\tif (nTotal < 100) {\n\t\tnTotal = 100;\n\t}\n\treturn __fAdd(nTotal);\n\n\tfunction __fAdd(nNumber) {\n\t\tnNumber++;\n\t\treturn nNumber;\n\t}\n}\nfGetNumber(30)\n```\n3.其他注意事项\n\n```\n1：所有命名最好使用英语表示。\n\n2：所有变量名应该明确而必要，尽量避免不必要的容易混淆的缩写。\n\n3：netease.events.mouse.Handler，而不是 netease.events.mouse.MouseEventHandler。\n\n4：对应的方法应该使用对应的动词，例如：get/set, add/remove, create/destroy, start/stop, insert/delete, begin/end。\n\n5：应该避免双重否定意义的变量，例如：bIsNotError, bIsNotFound，不可取。\n\n6：变量应该在最小的范围内定义，并尽可能的保持最少的活动时间。\n\n7：尽量避免复杂的条件语句，可以使用临时的boolean变量代替。\n\n8：一定要避免在条件中执行语句，例如：if((i=3)>2){}，不可取。\n\n```\n\n## 匈牙利命名法\n\n### 匈牙利命名法语法：\n\n`变量名`＝`类型`＋`对象描述`\n**类型**指变量的类型\n**对象描述**指对象名字全称或名字的一部分，要求有明确含义，命名要容易记忆容易理解。\n提示: 虽然JavaScript变量表面上没有类型，但是JavaScript内部还是会为变量赋予相应的类型。\n\n提示: 匈牙利命名法是一位微软程序员发明的，多数的C,C++程序都使用此命名法。\n\nJavaScript变量匈牙利命名类型\nJavaScript变量起名类型\t变量命名前缀\nArray 数组\ta\nFloat 浮点\tl\nFunction 函数\tf\nInteger(int) 整型\tn\nObject 对象\to\nRegular Expression 正则\tr\nString 字符串\ts\ng全局变量\t\tg\nJavaScript变量名匈牙利命名法示例\n```\nvar sWebURL=\"www.jb51.net\";\n```\n从变量的名字可以看出s代表字符串WebURL是网址。\n```\nvar nCheckCount=5;\n```\n从变量的名字可以看出n代表Integer(整型)，CheckCount代表某种数量。\n\n使用匈牙利命名法非常简单直观，方便判断变量的类型，而且方便程序的阅读与维护。\n\n\n## 限制\n1. 尽量不要使用 eval()，冗余产生入侵\n2. 缩进 在同一系统中应采用同一种缩进标准，本文提倡缩进大小为4个空格。\n3. 花括号{}\n4. 空格  任何“;”后空一格、for循环中初始化“,”后空一格、数组中\",\"后空一格、对象中“:”后空一格、如：\n```\nfor (var i = 0, j = 1; i < 10; i += 1){\n  var some = [1, 2, 3];\n  var obj = {aa: 1, bb: 2}\n}\n```\n5. 函数参数里“,”后空一格、函数声明中花括号前空一格、函数表达式中括号前后各空一格，如：\n```\nfunc(a, b, c){};\nfunction func() {};\nvar func = function () {};\n```\n\n6. 所有的操作符前后都跟一个空格，如：\n```\nvar d = 0,\n    a = b + 1;\nif (a && b && c) {\n    d = a % c;\n    a += d;\n}\n```\n\n7. 换行\n在以下位置必须换行：\n  * 每个独立语句结束后；\n  * if、else、catch、finally、while等关键字前；\n  * 运算符处换行时，运算符必须在新行的行首。\n  * 对于因为单行长度超过限制时产生的换行，参考行长度中的策略进行分隔。\n\n8. 三元运算符过长\n```\n//无需换行\nvar result = content?result1:result2;\n\n//换行\nvar data = _.isEmpty(content)\n  ? _.isEmpty(content2)\n    ?content3:content2\n  :content;\n```\n\n\n## Interface 接口返回参数规范\n1. 接口名称：大驼峰吗？\n1. 返回参数，小驼峰\n```\n{status:200,data:{name:'admin',list:[]},info:''}\n{status:0,data:'查询失败',info:''}\n{status:5005,data:'服务器繁忙',info:''}\n```\n\n\n## Proxy 代理层\n1. 注释：标记入参，出参\n2. 将接口参数返回为标准模式参数\n3. 在备注中添加，功能简介，\n```\n/**\n * 录入赠送记录\n * 1. 通过。。。。\n * @param params\n * {\"openid\":\"微信唯一标识\",\"from_deviceno\":\"发起人设备号 必传\",\"to_deviceno\":\"接受人设备号 必传\",\"gifts\":\"礼物 [50M、100G] 必传\",\"type\":\"类型 [1]流量 必传\",\"remark\":\"备注 一个有规则的json串\"}\n * @param callback\n *  {\"data\":\"赠送记录唯一标识\",\"status\":200,\"info\":0}\n * @constructor\n */\nGiveFlowProxy.GfCreateGivingGiftsRecord = function (params, callback) {\n    var url = urlKit.GfCreateGivingGiftsRecord;\n    httpUtil.post(url, params, function (error, response, content) {\n        callback(error, content);\n    });\n};\n```\n\n## 写注释\n1. 注释规范\n2. 包含那些信息\n\n```\n/**\n * 方法名\n 1. 简要写一下功能操作\n * @param  {[type]}   param    [description]\n * @param  {Function} callback [description]\n * @return {[type]}            [description]\n */\nBillAndPayProxy.getWXPayData = function (param, callback) {\n    httpUtil.post(apis.wxDiscPayUrl, param, function (error, response, content) {\n        logger.info(\"获取微信支付数据返回结果：\" + JSON.stringify(param) + JSON.stringify(content));\n        callback(error, content);\n    });\n};\n```\n\n## 参考\n- [网易前端JavaScript编码规范](http://www.php100.com/html/webkaifa/javascript/2012/0616/10550.html)\n- [最全的Javascript编码规范(推荐)](http://www.jb51.net/article/87142.htm)\n- [javascript 命名规则 变量命名规则](http://www.jb51.net/article/22229.htm)\n\n","slug":"nodejs开发规范","published":1,"updated":"2018-04-27T07:29:13.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghshevh000gn1yr441k91t2","content":"<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><h3 id=\"命名法说明\"><a href=\"#命名法说明\" class=\"headerlink\" title=\"命名法说明\"></a>命名法说明</h3><ol>\n<li>camel命名法，形如 <code>thisIsAnApple</code></li>\n<li>pascal命名法，形如<code>ThisIsAnApple</code></li>\n<li>下划线命名法，形如<code>this_is_an_apple</code></li>\n<li>中划线命名法，形如<code>this-is-an-apple</code></li>\n<li>匈牙利命名法，<code>变量名</code>＝<code>类型</code>＋<code>对象描述</code></li>\n</ol>\n<h3 id=\"命名法说明-1\"><a href=\"#命名法说明-1\" class=\"headerlink\" title=\"命名法说明\"></a>命名法说明</h3><ol>\n<li>变量名：必须使用camel命名法</li>\n<li>参数名：必须使用camel命名法</li>\n<li>函数名：必须使用camel命名法</li>\n<li>方法/属性：必须使用camel命名法</li>\n<li>私有（保护）成员：必须以下划线_开头</li>\n<li>常量名：必须使用全部大写的下划线命名法，如IS_DEBUG_ENABLED</li>\n<li>类名：必须使用pascal命名法</li>\n<li>枚举名：必须使用pascal命名法</li>\n<li>枚举的属性：必须使用全部大写的下划线命名法</li>\n<li>命名空间：必须使用camel命名法</li>\n<li>语义：命名同时还需要关注语义，如：<ul>\n<li>变量名应当使用名词；</li>\n<li>boolean类型的应当使用is、has等起头，表示其类型；</li>\n<li>函数名应当用动宾短语；getName</li>\n<li>类名应当用名词。Person</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"项目名称\"><a href=\"#项目名称\" class=\"headerlink\" title=\"项目名称\"></a>项目名称</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mohoo-telecom-wechat-manager</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy</span><br></pre></td></tr></table></figure>\n<h3 id=\"proxy-rest-contr-文件名称\"><a href=\"#proxy-rest-contr-文件名称\" class=\"headerlink\" title=\"proxy,rest,contr 文件名称\"></a>proxy,rest,contr 文件名称</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AuthProxy</span><br><span class=\"line\">AuthRest</span><br><span class=\"line\">AuthCtrl</span><br></pre></td></tr></table></figure>\n<h3 id=\"接口地址\"><a href=\"#接口地址\" class=\"headerlink\" title=\"接口地址\"></a>接口地址</h3><h3 id=\"静态资源\"><a href=\"#静态资源\" class=\"headerlink\" title=\"静态资源\"></a>静态资源</h3><ol>\n<li>js</li>\n<li>css: page-alert-span</li>\n<li>img: page-icon-add</li>\n</ol>\n<h3 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a>router</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(&apos;/index&apos;, auth.authWxUser, home.Index);</span><br><span class=\"line\">router.get(&apos;/rule&apos;, auth.authWxUser, home.Rule);</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(&apos;/query/devicename&apos;, auth.authWxUser, home.deviceName);//查询</span><br><span class=\"line\">router.get(&apos;/create/record&apos;, auth.authWxUser, home.record);//创建</span><br><span class=\"line\">router.get(&apos;/update/recordstatus&apos;, auth.authWxUser, home.recordStatus);//修改</span><br><span class=\"line\">router.get(&apos;/delete/recordbyid&apos;, auth.authWxUser, home.recordById);//删除</span><br></pre></td></tr></table></figure>\n<h3 id=\"URL接口命名-单词分割\"><a href=\"#URL接口命名-单词分割\" class=\"headerlink\" title=\"URL接口命名-单词分割\"></a>URL接口命名-单词分割</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"类名，对象名\"><a href=\"#类名，对象名\" class=\"headerlink\" title=\"类名，对象名\"></a>类名，对象名</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var BillAndPayProxy = &#123;&#125;;</span><br><span class=\"line\">BillAndPayProxy.getWXPayData = function (param, callback) &#123;</span><br><span class=\"line\">    httpUtil.post(apis.wxDiscPayUrl, param, function (error, response, content) &#123;</span><br><span class=\"line\">        callback(error, content);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法名称\"><a href=\"#方法名称\" class=\"headerlink\" title=\"方法名称\"></a>方法名称</h3><ul>\n<li>getName</li>\n<li>addUserRecord</li>\n<li>get/set, add/remove, create/destroy, start/stop, insert/delete, begin/end。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var AuthProxy = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">AuthProxy.getName();</span><br></pre></td></tr></table></figure>\n<h3 id=\"私有变量\"><a href=\"#私有变量\" class=\"headerlink\" title=\"私有变量\"></a>私有变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var AuthProxy = &#123;</span><br><span class=\"line\">\t_name: &apos;&apos;,</span><br><span class=\"line\">\t_age: &apos;&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var person = &#123;</span><br><span class=\"line\">\t_setSext: function() &#123;</span><br><span class=\"line\">\t\t// ...</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t_setName: function() &#123;</span><br><span class=\"line\">\t\t// ...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var PI = &apos;3.1415926&apos;;</span><br><span class=\"line\">var URL_BIND = &apos;http://wwww.baidu.com&apos;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><blockquote>\n<p>总所周知，javascript是一种语法极其灵活的语言。javascript在设计之初就只是用来为HTML添加动态效果的。由于他动态，弱类型等特性，以及不同浏览器的兼容性问题，、<br>造成了开发成本要比java等语言要高很多。正因为它太灵活，我们制定了适用于网易邮箱的javascript编码规范，尽可能多的降低由于语法灵活造成的问题。<br>以下将具体介绍：</p>\n</blockquote>\n<p>变量名包括<code>全局变量</code>，<code>局部变量</code>，<code>类变量</code>，<code>函数参数</code>等等</p>\n<h6 id=\"基本规范\"><a href=\"#基本规范\" class=\"headerlink\" title=\"基本规范\"></a>基本规范</h6><p><code>变量命名</code>都以<code>类型前缀</code>+<code>有意义的单词</code>组成，单词首字母都需要大写。例如：<code>sUserName</code>，<code>nCount</code>。</p>\n<h6 id=\"前缀规范\"><a href=\"#前缀规范\" class=\"headerlink\" title=\"前缀规范\"></a>前缀规范</h6><p>每个局部变量都需要有一个类型前缀，按照类型可以分为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s：表示字符串。例如：sName，sHtml;</span><br><span class=\"line\"></span><br><span class=\"line\">n：表示数字。例如：nPage，nTotal;</span><br><span class=\"line\"></span><br><span class=\"line\">b：表示逻辑。例如：bChecked，bHasLogin;</span><br><span class=\"line\"></span><br><span class=\"line\">a：表示数组。例如：aList，aGroup;</span><br><span class=\"line\"></span><br><span class=\"line\">r：表示正则表达式。例如：rDomain，rEmail;</span><br><span class=\"line\"></span><br><span class=\"line\">f：表示函数。例如：fGetHtml，fInit;</span><br><span class=\"line\"></span><br><span class=\"line\">o：表示以上未涉及到的其他对象，例如：oButton，oDate;</span><br><span class=\"line\"></span><br><span class=\"line\">g：global 全局变量 例如：gVersion</span><br></pre></td></tr></table></figure>\n<h6 id=\"例外情况：\"><a href=\"#例外情况：\" class=\"headerlink\" title=\"例外情况：\"></a>例外情况：</h6><p>1：作用域不大临时变量可以简写，比如：str，num，bol，obj，fun，arr。</p>\n<p>2：循环变量可以简写，比如：i，j，k等。</p>\n<p>为什么需要这样强制定义变量前缀?<br>正式因为javascript是弱语言造成的。在定义大量变量的时候，我们需要很明确的知道当前变量是什么属性，<br>如果只通过普通单词，是很难区分的。</p>\n<ol start=\"2\">\n<li>函数命名规范</li>\n</ol>\n<p>统一使用<code>动词</code>或者<code>动词[+名词]</code>形式，例如：fGetVersion()，fSubmitForm()，fInit();<br>涉及返回逻辑值的函数可以使用is，has等表示逻辑的词语代替动词。</p>\n<p>如果有内部函数，使用__f+动词[+名词]形式，内部函数必需在函数最后定义。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fGetNumber(nTotal) &#123;</span><br><span class=\"line\">\tif (nTotal &lt; 100) &#123;</span><br><span class=\"line\">\t\tnTotal = 100;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn __fAdd(nTotal);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunction __fAdd(nNumber) &#123;</span><br><span class=\"line\">\t\tnNumber++;</span><br><span class=\"line\">\t\treturn nNumber;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fGetNumber(30)</span><br></pre></td></tr></table></figure></p>\n<p>3.其他注意事项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1：所有命名最好使用英语表示。</span><br><span class=\"line\"></span><br><span class=\"line\">2：所有变量名应该明确而必要，尽量避免不必要的容易混淆的缩写。</span><br><span class=\"line\"></span><br><span class=\"line\">3：netease.events.mouse.Handler，而不是 netease.events.mouse.MouseEventHandler。</span><br><span class=\"line\"></span><br><span class=\"line\">4：对应的方法应该使用对应的动词，例如：get/set, add/remove, create/destroy, start/stop, insert/delete, begin/end。</span><br><span class=\"line\"></span><br><span class=\"line\">5：应该避免双重否定意义的变量，例如：bIsNotError, bIsNotFound，不可取。</span><br><span class=\"line\"></span><br><span class=\"line\">6：变量应该在最小的范围内定义，并尽可能的保持最少的活动时间。</span><br><span class=\"line\"></span><br><span class=\"line\">7：尽量避免复杂的条件语句，可以使用临时的boolean变量代替。</span><br><span class=\"line\"></span><br><span class=\"line\">8：一定要避免在条件中执行语句，例如：if((i=3)&gt;2)&#123;&#125;，不可取。</span><br></pre></td></tr></table></figure>\n<h2 id=\"匈牙利命名法\"><a href=\"#匈牙利命名法\" class=\"headerlink\" title=\"匈牙利命名法\"></a>匈牙利命名法</h2><h3 id=\"匈牙利命名法语法：\"><a href=\"#匈牙利命名法语法：\" class=\"headerlink\" title=\"匈牙利命名法语法：\"></a>匈牙利命名法语法：</h3><p><code>变量名</code>＝<code>类型</code>＋<code>对象描述</code><br><strong>类型</strong>指变量的类型<br><strong>对象描述</strong>指对象名字全称或名字的一部分，要求有明确含义，命名要容易记忆容易理解。<br>提示: 虽然JavaScript变量表面上没有类型，但是JavaScript内部还是会为变量赋予相应的类型。</p>\n<p>提示: 匈牙利命名法是一位微软程序员发明的，多数的C,C++程序都使用此命名法。</p>\n<p>JavaScript变量匈牙利命名类型<br>JavaScript变量起名类型    变量命名前缀<br>Array 数组    a<br>Float 浮点    l<br>Function 函数    f<br>Integer(int) 整型    n<br>Object 对象    o<br>Regular Expression 正则    r<br>String 字符串    s<br>g全局变量        g<br>JavaScript变量名匈牙利命名法示例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sWebURL=&quot;www.jb51.net&quot;;</span><br></pre></td></tr></table></figure></p>\n<p>从变量的名字可以看出s代表字符串WebURL是网址。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var nCheckCount=5;</span><br></pre></td></tr></table></figure></p>\n<p>从变量的名字可以看出n代表Integer(整型)，CheckCount代表某种数量。</p>\n<p>使用匈牙利命名法非常简单直观，方便判断变量的类型，而且方便程序的阅读与维护。</p>\n<h2 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h2><ol>\n<li>尽量不要使用 eval()，冗余产生入侵</li>\n<li>缩进 在同一系统中应采用同一种缩进标准，本文提倡缩进大小为4个空格。</li>\n<li>花括号{}</li>\n<li><p>空格  任何“;”后空一格、for循环中初始化“,”后空一格、数组中”,”后空一格、对象中“:”后空一格、如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var i = 0, j = 1; i &lt; 10; i += 1)&#123;</span><br><span class=\"line\">  var some = [1, 2, 3];</span><br><span class=\"line\">  var obj = &#123;aa: 1, bb: 2&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数参数里“,”后空一格、函数声明中花括号前空一格、函数表达式中括号前后各空一格，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func(a, b, c)&#123;&#125;;</span><br><span class=\"line\">function func() &#123;&#125;;</span><br><span class=\"line\">var func = function () &#123;&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>所有的操作符前后都跟一个空格，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var d = 0,</span><br><span class=\"line\">    a = b + 1;</span><br><span class=\"line\">if (a &amp;&amp; b &amp;&amp; c) &#123;</span><br><span class=\"line\">    d = a % c;</span><br><span class=\"line\">    a += d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>换行<br>在以下位置必须换行：</p>\n<ul>\n<li>每个独立语句结束后；</li>\n<li>if、else、catch、finally、while等关键字前；</li>\n<li>运算符处换行时，运算符必须在新行的行首。</li>\n<li>对于因为单行长度超过限制时产生的换行，参考行长度中的策略进行分隔。</li>\n</ul>\n</li>\n<li><p>三元运算符过长</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//无需换行</span><br><span class=\"line\">var result = content?result1:result2;</span><br><span class=\"line\"></span><br><span class=\"line\">//换行</span><br><span class=\"line\">var data = _.isEmpty(content)</span><br><span class=\"line\">  ? _.isEmpty(content2)</span><br><span class=\"line\">    ?content3:content2</span><br><span class=\"line\">  :content;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Interface-接口返回参数规范\"><a href=\"#Interface-接口返回参数规范\" class=\"headerlink\" title=\"Interface 接口返回参数规范\"></a>Interface 接口返回参数规范</h2><ol>\n<li>接口名称：大驼峰吗？</li>\n<li>返回参数，小驼峰<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;status:200,data:&#123;name:&apos;admin&apos;,list:[]&#125;,info:&apos;&apos;&#125;</span><br><span class=\"line\">&#123;status:0,data:&apos;查询失败&apos;,info:&apos;&apos;&#125;</span><br><span class=\"line\">&#123;status:5005,data:&apos;服务器繁忙&apos;,info:&apos;&apos;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Proxy-代理层\"><a href=\"#Proxy-代理层\" class=\"headerlink\" title=\"Proxy 代理层\"></a>Proxy 代理层</h2><ol>\n<li>注释：标记入参，出参</li>\n<li>将接口参数返回为标准模式参数</li>\n<li>在备注中添加，功能简介，<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 录入赠送记录</span><br><span class=\"line\"> * 1. 通过。。。。</span><br><span class=\"line\"> * @param params</span><br><span class=\"line\"> * &#123;&quot;openid&quot;:&quot;微信唯一标识&quot;,&quot;from_deviceno&quot;:&quot;发起人设备号 必传&quot;,&quot;to_deviceno&quot;:&quot;接受人设备号 必传&quot;,&quot;gifts&quot;:&quot;礼物 [50M、100G] 必传&quot;,&quot;type&quot;:&quot;类型 [1]流量 必传&quot;,&quot;remark&quot;:&quot;备注 一个有规则的json串&quot;&#125;</span><br><span class=\"line\"> * @param callback</span><br><span class=\"line\"> *  &#123;&quot;data&quot;:&quot;赠送记录唯一标识&quot;,&quot;status&quot;:200,&quot;info&quot;:0&#125;</span><br><span class=\"line\"> * @constructor</span><br><span class=\"line\"> */</span><br><span class=\"line\">GiveFlowProxy.GfCreateGivingGiftsRecord = function (params, callback) &#123;</span><br><span class=\"line\">    var url = urlKit.GfCreateGivingGiftsRecord;</span><br><span class=\"line\">    httpUtil.post(url, params, function (error, response, content) &#123;</span><br><span class=\"line\">        callback(error, content);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"写注释\"><a href=\"#写注释\" class=\"headerlink\" title=\"写注释\"></a>写注释</h2><ol>\n<li>注释规范</li>\n<li>包含那些信息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 方法名</span><br><span class=\"line\"> 1. 简要写一下功能操作</span><br><span class=\"line\"> * @param  &#123;[type]&#125;   param    [description]</span><br><span class=\"line\"> * @param  &#123;Function&#125; callback [description]</span><br><span class=\"line\"> * @return &#123;[type]&#125;            [description]</span><br><span class=\"line\"> */</span><br><span class=\"line\">BillAndPayProxy.getWXPayData = function (param, callback) &#123;</span><br><span class=\"line\">    httpUtil.post(apis.wxDiscPayUrl, param, function (error, response, content) &#123;</span><br><span class=\"line\">        logger.info(&quot;获取微信支付数据返回结果：&quot; + JSON.stringify(param) + JSON.stringify(content));</span><br><span class=\"line\">        callback(error, content);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.php100.com/html/webkaifa/javascript/2012/0616/10550.html\" target=\"_blank\" rel=\"noopener\">网易前端JavaScript编码规范</a></li>\n<li><a href=\"http://www.jb51.net/article/87142.htm\" target=\"_blank\" rel=\"noopener\">最全的Javascript编码规范(推荐)</a></li>\n<li><a href=\"http://www.jb51.net/article/22229.htm\" target=\"_blank\" rel=\"noopener\">javascript 命名规则 变量命名规则</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><h3 id=\"命名法说明\"><a href=\"#命名法说明\" class=\"headerlink\" title=\"命名法说明\"></a>命名法说明</h3><ol>\n<li>camel命名法，形如 <code>thisIsAnApple</code></li>\n<li>pascal命名法，形如<code>ThisIsAnApple</code></li>\n<li>下划线命名法，形如<code>this_is_an_apple</code></li>\n<li>中划线命名法，形如<code>this-is-an-apple</code></li>\n<li>匈牙利命名法，<code>变量名</code>＝<code>类型</code>＋<code>对象描述</code></li>\n</ol>\n<h3 id=\"命名法说明-1\"><a href=\"#命名法说明-1\" class=\"headerlink\" title=\"命名法说明\"></a>命名法说明</h3><ol>\n<li>变量名：必须使用camel命名法</li>\n<li>参数名：必须使用camel命名法</li>\n<li>函数名：必须使用camel命名法</li>\n<li>方法/属性：必须使用camel命名法</li>\n<li>私有（保护）成员：必须以下划线_开头</li>\n<li>常量名：必须使用全部大写的下划线命名法，如IS_DEBUG_ENABLED</li>\n<li>类名：必须使用pascal命名法</li>\n<li>枚举名：必须使用pascal命名法</li>\n<li>枚举的属性：必须使用全部大写的下划线命名法</li>\n<li>命名空间：必须使用camel命名法</li>\n<li>语义：命名同时还需要关注语义，如：<ul>\n<li>变量名应当使用名词；</li>\n<li>boolean类型的应当使用is、has等起头，表示其类型；</li>\n<li>函数名应当用动宾短语；getName</li>\n<li>类名应当用名词。Person</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"项目名称\"><a href=\"#项目名称\" class=\"headerlink\" title=\"项目名称\"></a>项目名称</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mohoo-telecom-wechat-manager</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy</span><br></pre></td></tr></table></figure>\n<h3 id=\"proxy-rest-contr-文件名称\"><a href=\"#proxy-rest-contr-文件名称\" class=\"headerlink\" title=\"proxy,rest,contr 文件名称\"></a>proxy,rest,contr 文件名称</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AuthProxy</span><br><span class=\"line\">AuthRest</span><br><span class=\"line\">AuthCtrl</span><br></pre></td></tr></table></figure>\n<h3 id=\"接口地址\"><a href=\"#接口地址\" class=\"headerlink\" title=\"接口地址\"></a>接口地址</h3><h3 id=\"静态资源\"><a href=\"#静态资源\" class=\"headerlink\" title=\"静态资源\"></a>静态资源</h3><ol>\n<li>js</li>\n<li>css: page-alert-span</li>\n<li>img: page-icon-add</li>\n</ol>\n<h3 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a>router</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(&apos;/index&apos;, auth.authWxUser, home.Index);</span><br><span class=\"line\">router.get(&apos;/rule&apos;, auth.authWxUser, home.Rule);</span><br><span class=\"line\"></span><br><span class=\"line\">router.get(&apos;/query/devicename&apos;, auth.authWxUser, home.deviceName);//查询</span><br><span class=\"line\">router.get(&apos;/create/record&apos;, auth.authWxUser, home.record);//创建</span><br><span class=\"line\">router.get(&apos;/update/recordstatus&apos;, auth.authWxUser, home.recordStatus);//修改</span><br><span class=\"line\">router.get(&apos;/delete/recordbyid&apos;, auth.authWxUser, home.recordById);//删除</span><br></pre></td></tr></table></figure>\n<h3 id=\"URL接口命名-单词分割\"><a href=\"#URL接口命名-单词分割\" class=\"headerlink\" title=\"URL接口命名-单词分割\"></a>URL接口命名-单词分割</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"类名，对象名\"><a href=\"#类名，对象名\" class=\"headerlink\" title=\"类名，对象名\"></a>类名，对象名</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var BillAndPayProxy = &#123;&#125;;</span><br><span class=\"line\">BillAndPayProxy.getWXPayData = function (param, callback) &#123;</span><br><span class=\"line\">    httpUtil.post(apis.wxDiscPayUrl, param, function (error, response, content) &#123;</span><br><span class=\"line\">        callback(error, content);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法名称\"><a href=\"#方法名称\" class=\"headerlink\" title=\"方法名称\"></a>方法名称</h3><ul>\n<li>getName</li>\n<li>addUserRecord</li>\n<li>get/set, add/remove, create/destroy, start/stop, insert/delete, begin/end。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var AuthProxy = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">AuthProxy.getName();</span><br></pre></td></tr></table></figure>\n<h3 id=\"私有变量\"><a href=\"#私有变量\" class=\"headerlink\" title=\"私有变量\"></a>私有变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var AuthProxy = &#123;</span><br><span class=\"line\">\t_name: &apos;&apos;,</span><br><span class=\"line\">\t_age: &apos;&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var person = &#123;</span><br><span class=\"line\">\t_setSext: function() &#123;</span><br><span class=\"line\">\t\t// ...</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t_setName: function() &#123;</span><br><span class=\"line\">\t\t// ...</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var PI = &apos;3.1415926&apos;;</span><br><span class=\"line\">var URL_BIND = &apos;http://wwww.baidu.com&apos;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><blockquote>\n<p>总所周知，javascript是一种语法极其灵活的语言。javascript在设计之初就只是用来为HTML添加动态效果的。由于他动态，弱类型等特性，以及不同浏览器的兼容性问题，、<br>造成了开发成本要比java等语言要高很多。正因为它太灵活，我们制定了适用于网易邮箱的javascript编码规范，尽可能多的降低由于语法灵活造成的问题。<br>以下将具体介绍：</p>\n</blockquote>\n<p>变量名包括<code>全局变量</code>，<code>局部变量</code>，<code>类变量</code>，<code>函数参数</code>等等</p>\n<h6 id=\"基本规范\"><a href=\"#基本规范\" class=\"headerlink\" title=\"基本规范\"></a>基本规范</h6><p><code>变量命名</code>都以<code>类型前缀</code>+<code>有意义的单词</code>组成，单词首字母都需要大写。例如：<code>sUserName</code>，<code>nCount</code>。</p>\n<h6 id=\"前缀规范\"><a href=\"#前缀规范\" class=\"headerlink\" title=\"前缀规范\"></a>前缀规范</h6><p>每个局部变量都需要有一个类型前缀，按照类型可以分为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s：表示字符串。例如：sName，sHtml;</span><br><span class=\"line\"></span><br><span class=\"line\">n：表示数字。例如：nPage，nTotal;</span><br><span class=\"line\"></span><br><span class=\"line\">b：表示逻辑。例如：bChecked，bHasLogin;</span><br><span class=\"line\"></span><br><span class=\"line\">a：表示数组。例如：aList，aGroup;</span><br><span class=\"line\"></span><br><span class=\"line\">r：表示正则表达式。例如：rDomain，rEmail;</span><br><span class=\"line\"></span><br><span class=\"line\">f：表示函数。例如：fGetHtml，fInit;</span><br><span class=\"line\"></span><br><span class=\"line\">o：表示以上未涉及到的其他对象，例如：oButton，oDate;</span><br><span class=\"line\"></span><br><span class=\"line\">g：global 全局变量 例如：gVersion</span><br></pre></td></tr></table></figure>\n<h6 id=\"例外情况：\"><a href=\"#例外情况：\" class=\"headerlink\" title=\"例外情况：\"></a>例外情况：</h6><p>1：作用域不大临时变量可以简写，比如：str，num，bol，obj，fun，arr。</p>\n<p>2：循环变量可以简写，比如：i，j，k等。</p>\n<p>为什么需要这样强制定义变量前缀?<br>正式因为javascript是弱语言造成的。在定义大量变量的时候，我们需要很明确的知道当前变量是什么属性，<br>如果只通过普通单词，是很难区分的。</p>\n<ol start=\"2\">\n<li>函数命名规范</li>\n</ol>\n<p>统一使用<code>动词</code>或者<code>动词[+名词]</code>形式，例如：fGetVersion()，fSubmitForm()，fInit();<br>涉及返回逻辑值的函数可以使用is，has等表示逻辑的词语代替动词。</p>\n<p>如果有内部函数，使用__f+动词[+名词]形式，内部函数必需在函数最后定义。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fGetNumber(nTotal) &#123;</span><br><span class=\"line\">\tif (nTotal &lt; 100) &#123;</span><br><span class=\"line\">\t\tnTotal = 100;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn __fAdd(nTotal);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunction __fAdd(nNumber) &#123;</span><br><span class=\"line\">\t\tnNumber++;</span><br><span class=\"line\">\t\treturn nNumber;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fGetNumber(30)</span><br></pre></td></tr></table></figure></p>\n<p>3.其他注意事项</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1：所有命名最好使用英语表示。</span><br><span class=\"line\"></span><br><span class=\"line\">2：所有变量名应该明确而必要，尽量避免不必要的容易混淆的缩写。</span><br><span class=\"line\"></span><br><span class=\"line\">3：netease.events.mouse.Handler，而不是 netease.events.mouse.MouseEventHandler。</span><br><span class=\"line\"></span><br><span class=\"line\">4：对应的方法应该使用对应的动词，例如：get/set, add/remove, create/destroy, start/stop, insert/delete, begin/end。</span><br><span class=\"line\"></span><br><span class=\"line\">5：应该避免双重否定意义的变量，例如：bIsNotError, bIsNotFound，不可取。</span><br><span class=\"line\"></span><br><span class=\"line\">6：变量应该在最小的范围内定义，并尽可能的保持最少的活动时间。</span><br><span class=\"line\"></span><br><span class=\"line\">7：尽量避免复杂的条件语句，可以使用临时的boolean变量代替。</span><br><span class=\"line\"></span><br><span class=\"line\">8：一定要避免在条件中执行语句，例如：if((i=3)&gt;2)&#123;&#125;，不可取。</span><br></pre></td></tr></table></figure>\n<h2 id=\"匈牙利命名法\"><a href=\"#匈牙利命名法\" class=\"headerlink\" title=\"匈牙利命名法\"></a>匈牙利命名法</h2><h3 id=\"匈牙利命名法语法：\"><a href=\"#匈牙利命名法语法：\" class=\"headerlink\" title=\"匈牙利命名法语法：\"></a>匈牙利命名法语法：</h3><p><code>变量名</code>＝<code>类型</code>＋<code>对象描述</code><br><strong>类型</strong>指变量的类型<br><strong>对象描述</strong>指对象名字全称或名字的一部分，要求有明确含义，命名要容易记忆容易理解。<br>提示: 虽然JavaScript变量表面上没有类型，但是JavaScript内部还是会为变量赋予相应的类型。</p>\n<p>提示: 匈牙利命名法是一位微软程序员发明的，多数的C,C++程序都使用此命名法。</p>\n<p>JavaScript变量匈牙利命名类型<br>JavaScript变量起名类型    变量命名前缀<br>Array 数组    a<br>Float 浮点    l<br>Function 函数    f<br>Integer(int) 整型    n<br>Object 对象    o<br>Regular Expression 正则    r<br>String 字符串    s<br>g全局变量        g<br>JavaScript变量名匈牙利命名法示例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var sWebURL=&quot;www.jb51.net&quot;;</span><br></pre></td></tr></table></figure></p>\n<p>从变量的名字可以看出s代表字符串WebURL是网址。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var nCheckCount=5;</span><br></pre></td></tr></table></figure></p>\n<p>从变量的名字可以看出n代表Integer(整型)，CheckCount代表某种数量。</p>\n<p>使用匈牙利命名法非常简单直观，方便判断变量的类型，而且方便程序的阅读与维护。</p>\n<h2 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h2><ol>\n<li>尽量不要使用 eval()，冗余产生入侵</li>\n<li>缩进 在同一系统中应采用同一种缩进标准，本文提倡缩进大小为4个空格。</li>\n<li>花括号{}</li>\n<li><p>空格  任何“;”后空一格、for循环中初始化“,”后空一格、数组中”,”后空一格、对象中“:”后空一格、如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var i = 0, j = 1; i &lt; 10; i += 1)&#123;</span><br><span class=\"line\">  var some = [1, 2, 3];</span><br><span class=\"line\">  var obj = &#123;aa: 1, bb: 2&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数参数里“,”后空一格、函数声明中花括号前空一格、函数表达式中括号前后各空一格，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func(a, b, c)&#123;&#125;;</span><br><span class=\"line\">function func() &#123;&#125;;</span><br><span class=\"line\">var func = function () &#123;&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>所有的操作符前后都跟一个空格，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var d = 0,</span><br><span class=\"line\">    a = b + 1;</span><br><span class=\"line\">if (a &amp;&amp; b &amp;&amp; c) &#123;</span><br><span class=\"line\">    d = a % c;</span><br><span class=\"line\">    a += d;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>换行<br>在以下位置必须换行：</p>\n<ul>\n<li>每个独立语句结束后；</li>\n<li>if、else、catch、finally、while等关键字前；</li>\n<li>运算符处换行时，运算符必须在新行的行首。</li>\n<li>对于因为单行长度超过限制时产生的换行，参考行长度中的策略进行分隔。</li>\n</ul>\n</li>\n<li><p>三元运算符过长</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//无需换行</span><br><span class=\"line\">var result = content?result1:result2;</span><br><span class=\"line\"></span><br><span class=\"line\">//换行</span><br><span class=\"line\">var data = _.isEmpty(content)</span><br><span class=\"line\">  ? _.isEmpty(content2)</span><br><span class=\"line\">    ?content3:content2</span><br><span class=\"line\">  :content;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Interface-接口返回参数规范\"><a href=\"#Interface-接口返回参数规范\" class=\"headerlink\" title=\"Interface 接口返回参数规范\"></a>Interface 接口返回参数规范</h2><ol>\n<li>接口名称：大驼峰吗？</li>\n<li>返回参数，小驼峰<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;status:200,data:&#123;name:&apos;admin&apos;,list:[]&#125;,info:&apos;&apos;&#125;</span><br><span class=\"line\">&#123;status:0,data:&apos;查询失败&apos;,info:&apos;&apos;&#125;</span><br><span class=\"line\">&#123;status:5005,data:&apos;服务器繁忙&apos;,info:&apos;&apos;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"Proxy-代理层\"><a href=\"#Proxy-代理层\" class=\"headerlink\" title=\"Proxy 代理层\"></a>Proxy 代理层</h2><ol>\n<li>注释：标记入参，出参</li>\n<li>将接口参数返回为标准模式参数</li>\n<li>在备注中添加，功能简介，<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 录入赠送记录</span><br><span class=\"line\"> * 1. 通过。。。。</span><br><span class=\"line\"> * @param params</span><br><span class=\"line\"> * &#123;&quot;openid&quot;:&quot;微信唯一标识&quot;,&quot;from_deviceno&quot;:&quot;发起人设备号 必传&quot;,&quot;to_deviceno&quot;:&quot;接受人设备号 必传&quot;,&quot;gifts&quot;:&quot;礼物 [50M、100G] 必传&quot;,&quot;type&quot;:&quot;类型 [1]流量 必传&quot;,&quot;remark&quot;:&quot;备注 一个有规则的json串&quot;&#125;</span><br><span class=\"line\"> * @param callback</span><br><span class=\"line\"> *  &#123;&quot;data&quot;:&quot;赠送记录唯一标识&quot;,&quot;status&quot;:200,&quot;info&quot;:0&#125;</span><br><span class=\"line\"> * @constructor</span><br><span class=\"line\"> */</span><br><span class=\"line\">GiveFlowProxy.GfCreateGivingGiftsRecord = function (params, callback) &#123;</span><br><span class=\"line\">    var url = urlKit.GfCreateGivingGiftsRecord;</span><br><span class=\"line\">    httpUtil.post(url, params, function (error, response, content) &#123;</span><br><span class=\"line\">        callback(error, content);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"写注释\"><a href=\"#写注释\" class=\"headerlink\" title=\"写注释\"></a>写注释</h2><ol>\n<li>注释规范</li>\n<li>包含那些信息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 方法名</span><br><span class=\"line\"> 1. 简要写一下功能操作</span><br><span class=\"line\"> * @param  &#123;[type]&#125;   param    [description]</span><br><span class=\"line\"> * @param  &#123;Function&#125; callback [description]</span><br><span class=\"line\"> * @return &#123;[type]&#125;            [description]</span><br><span class=\"line\"> */</span><br><span class=\"line\">BillAndPayProxy.getWXPayData = function (param, callback) &#123;</span><br><span class=\"line\">    httpUtil.post(apis.wxDiscPayUrl, param, function (error, response, content) &#123;</span><br><span class=\"line\">        logger.info(&quot;获取微信支付数据返回结果：&quot; + JSON.stringify(param) + JSON.stringify(content));</span><br><span class=\"line\">        callback(error, content);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.php100.com/html/webkaifa/javascript/2012/0616/10550.html\" target=\"_blank\" rel=\"noopener\">网易前端JavaScript编码规范</a></li>\n<li><a href=\"http://www.jb51.net/article/87142.htm\" target=\"_blank\" rel=\"noopener\">最全的Javascript编码规范(推荐)</a></li>\n<li><a href=\"http://www.jb51.net/article/22229.htm\" target=\"_blank\" rel=\"noopener\">javascript 命名规则 变量命名规则</a></li>\n</ul>\n"},{"title":"node.js 6.9.4 升级","_content":"\n## node.js 简介\nNode.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。\nNode.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。\nNode.js 的包管理器 npm，是全球最大的开源库生态系统。\n\n## node 升级\nNode.js的开发非常活跃，它的最新稳定版本也频繁变化，你不时会发现，一个模块不能在你当前的Node版本上使用，此时你需要升级Node\n\n## 方法一、使用源码，进行编译安装\n\n### 下载源码，并上传到服务器\n\n```\nwget https://nodejs.org/dist/v6.9.2/node-v6.9.2-linux-x64.tar.xz\n```\n\n### 解压源码\n\n```\ntar xzvf node......gz\n```\n\n### 编译安装\n```\n./configuration\nmake\nmake install\n```\n\n### 安装完毕\n\n```\nnode -v  # 结果：6.9.4\n```\n\n## 说明：\n* npm 也会同时升级\n* pm2 也要进行升级\n\n## 方法二、apt-get 升级\n\n### 1. 设置代理\n```\nexport http_proxy=http://127.0.0.1:808\n```\n\n### apt-get update 更新系统\n```\napt-get update\n```\n\n### 提示错误\n\n```\n已下载 247 kB，耗时 5秒 (41.5 kB/s)\n正在读取软件包列表... 完成\nW: GPG 错误：http://apt.oneapm.com stable Release: 由于没有公钥，无法验证下列签名： NO_PUBKEY 8CF9B240B421195B\nW: 仓库 “http://apt.oneapm.com stable Release” 没有数字签名。\nN: 无法认证来自该源的数据，所以使用它会带来潜在风险。\nN: 参见 apt-secure(8) 手册以了解仓库创建和用户配置方面的细节\n```\n### 修复命令\n```\ngpg --keyserver pgpkeys.mit.edu --recv-key 8CF9B240B421195B\n\ngpg -a --export  8CF9B240B421195B | sudo apt-key add -\n```\n\n### 重新更新源：\n```\nsudo apt-get update\n```\n\n### 安装源 更新所有的软件：\n\n```\napt-get dist-upgrade\n```\n\n## 方法三、 node 切换版本 mvn\n\nnvm 是 Mac 下的 node 管理工具，有点类似管理 Ruby 的 rvm，如果是需要管理 Windows 下的 node，官方推荐是使用 nvmw 或 nvm-windows 。\n\n### 一、卸载已安装到全局的 node/npm\n\n如果之前是在官网下载的 node 安装包，运行后会自动安装在全局目录，其中\n\nnode 命令在 /usr/local/bin/node ，npm 命令在全局 node_modules 目录中，具体路径为 /usr/local/lib/node_modules/npm\n\n安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：\n\n```\nnpm ls -g --depth=0 #查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装\n\nsudo rm -rf /usr/local/lib/node_modules #删除全局 node_modules 目录\nsudo rm /usr/local/bin/node #删除 node\ncd  /usr/local/bin && ls -l | grep \"../lib/node_modules/\" | awk '{print $9}'| xargs rm #删除全局 node 模块注册的软链\n```\n\n### 二、安装 nvm\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash\n```\n\n### 三、安装切换各版本 node/npm\n\n```\nnvm install stable #安装最新稳定版 node，现在是 5.0.0\nnvm install 4.2.2 #安装 4.2.2 版本\nnvm install 0.12.7 #安装 0.12.7 版本\n\n# 特别说明：以下模块安装仅供演示说明，并非必须安装模块\nnvm use 0 #切换至 0.12.7 版本\nnpm install -g mz-fis #安装 mz-fis 模块至全局目录，安装完成的路径是 /Users/<你的用户名>/.nvm/versions/node/v0.12.7/lib/mz-fis\nnvm use 4 #切换至 4.2.2 版本\nnpm install -g react-native-cli #安装 react-native-cli 模块至全局目录，安装完成的路径是 /Users/<你的用户名>/.nvm/versions/node/v4.2.2/lib/react-native-cli\n\nnvm alias default 0.12.7 #设置默认 node 版本为 0.12.7\n```\n\n### 四、使用 .nvmrc 文件配置项目所使用的 node 版本\n\n如果你的默认 node 版本（通过 nvm alias 命令设置的）与项目所需的版本不同，则可在项目根目录或其任意父级目录中创建 .nvmrc 文件，在文件中指定使用的 node 版本号，例如：\n\n```\ncd <项目根目录>  #进入项目根目录\necho 4 > .nvmrc #添加 .nvmrc 文件\nnvm use #无需指定版本号，会自动使用 .nvmrc 文件中配置的版本\nnode -v #查看 node 是否切换为对应版本\n```\n\n### 五、nvm 与 n 的区别\n\nnode 版本管理工具还有一个是 TJ 大神的 n 命令，n 命令是作为一个 node 的模块而存在，而 nvm 是一个独立于 node/npm 的外部 shell 脚本，因此 n 命令相比 nvm 更加局限。\n\n由于 npm 安装的模块路径均为 /usr/local/lib/node_modules ，当使用 n 切换不同的 node 版本时，实际上会共用全局的 node/npm 目录。 因此不能很好的满足『按不同 node 版本使用不同全局 node 模块』的需求。\n\n### 参考\n[Ubuntu下如何使用命令行（apt-get）更新软件](http://jingyan.baidu.com/article/4853e1e53204251909f7260f.html)\n[更新linux时候提示无法“由于没有公钥，无法验证下列签名 ***”的解决方案](http://blog.csdn.net/loovejava/article/details/21837935)\n[使用 nvm 管理不同版本的 node 与 npm](http://www.tuicool.com/articles/Vzquy2)","source":"_posts/node.js 6.9.4_update.md","raw":"---\ntitle: node.js 6.9.4 升级\ntags: shell\n---\n\n## node.js 简介\nNode.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。\nNode.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。\nNode.js 的包管理器 npm，是全球最大的开源库生态系统。\n\n## node 升级\nNode.js的开发非常活跃，它的最新稳定版本也频繁变化，你不时会发现，一个模块不能在你当前的Node版本上使用，此时你需要升级Node\n\n## 方法一、使用源码，进行编译安装\n\n### 下载源码，并上传到服务器\n\n```\nwget https://nodejs.org/dist/v6.9.2/node-v6.9.2-linux-x64.tar.xz\n```\n\n### 解压源码\n\n```\ntar xzvf node......gz\n```\n\n### 编译安装\n```\n./configuration\nmake\nmake install\n```\n\n### 安装完毕\n\n```\nnode -v  # 结果：6.9.4\n```\n\n## 说明：\n* npm 也会同时升级\n* pm2 也要进行升级\n\n## 方法二、apt-get 升级\n\n### 1. 设置代理\n```\nexport http_proxy=http://127.0.0.1:808\n```\n\n### apt-get update 更新系统\n```\napt-get update\n```\n\n### 提示错误\n\n```\n已下载 247 kB，耗时 5秒 (41.5 kB/s)\n正在读取软件包列表... 完成\nW: GPG 错误：http://apt.oneapm.com stable Release: 由于没有公钥，无法验证下列签名： NO_PUBKEY 8CF9B240B421195B\nW: 仓库 “http://apt.oneapm.com stable Release” 没有数字签名。\nN: 无法认证来自该源的数据，所以使用它会带来潜在风险。\nN: 参见 apt-secure(8) 手册以了解仓库创建和用户配置方面的细节\n```\n### 修复命令\n```\ngpg --keyserver pgpkeys.mit.edu --recv-key 8CF9B240B421195B\n\ngpg -a --export  8CF9B240B421195B | sudo apt-key add -\n```\n\n### 重新更新源：\n```\nsudo apt-get update\n```\n\n### 安装源 更新所有的软件：\n\n```\napt-get dist-upgrade\n```\n\n## 方法三、 node 切换版本 mvn\n\nnvm 是 Mac 下的 node 管理工具，有点类似管理 Ruby 的 rvm，如果是需要管理 Windows 下的 node，官方推荐是使用 nvmw 或 nvm-windows 。\n\n### 一、卸载已安装到全局的 node/npm\n\n如果之前是在官网下载的 node 安装包，运行后会自动安装在全局目录，其中\n\nnode 命令在 /usr/local/bin/node ，npm 命令在全局 node_modules 目录中，具体路径为 /usr/local/lib/node_modules/npm\n\n安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：\n\n```\nnpm ls -g --depth=0 #查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装\n\nsudo rm -rf /usr/local/lib/node_modules #删除全局 node_modules 目录\nsudo rm /usr/local/bin/node #删除 node\ncd  /usr/local/bin && ls -l | grep \"../lib/node_modules/\" | awk '{print $9}'| xargs rm #删除全局 node 模块注册的软链\n```\n\n### 二、安装 nvm\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash\n```\n\n### 三、安装切换各版本 node/npm\n\n```\nnvm install stable #安装最新稳定版 node，现在是 5.0.0\nnvm install 4.2.2 #安装 4.2.2 版本\nnvm install 0.12.7 #安装 0.12.7 版本\n\n# 特别说明：以下模块安装仅供演示说明，并非必须安装模块\nnvm use 0 #切换至 0.12.7 版本\nnpm install -g mz-fis #安装 mz-fis 模块至全局目录，安装完成的路径是 /Users/<你的用户名>/.nvm/versions/node/v0.12.7/lib/mz-fis\nnvm use 4 #切换至 4.2.2 版本\nnpm install -g react-native-cli #安装 react-native-cli 模块至全局目录，安装完成的路径是 /Users/<你的用户名>/.nvm/versions/node/v4.2.2/lib/react-native-cli\n\nnvm alias default 0.12.7 #设置默认 node 版本为 0.12.7\n```\n\n### 四、使用 .nvmrc 文件配置项目所使用的 node 版本\n\n如果你的默认 node 版本（通过 nvm alias 命令设置的）与项目所需的版本不同，则可在项目根目录或其任意父级目录中创建 .nvmrc 文件，在文件中指定使用的 node 版本号，例如：\n\n```\ncd <项目根目录>  #进入项目根目录\necho 4 > .nvmrc #添加 .nvmrc 文件\nnvm use #无需指定版本号，会自动使用 .nvmrc 文件中配置的版本\nnode -v #查看 node 是否切换为对应版本\n```\n\n### 五、nvm 与 n 的区别\n\nnode 版本管理工具还有一个是 TJ 大神的 n 命令，n 命令是作为一个 node 的模块而存在，而 nvm 是一个独立于 node/npm 的外部 shell 脚本，因此 n 命令相比 nvm 更加局限。\n\n由于 npm 安装的模块路径均为 /usr/local/lib/node_modules ，当使用 n 切换不同的 node 版本时，实际上会共用全局的 node/npm 目录。 因此不能很好的满足『按不同 node 版本使用不同全局 node 模块』的需求。\n\n### 参考\n[Ubuntu下如何使用命令行（apt-get）更新软件](http://jingyan.baidu.com/article/4853e1e53204251909f7260f.html)\n[更新linux时候提示无法“由于没有公钥，无法验证下列签名 ***”的解决方案](http://blog.csdn.net/loovejava/article/details/21837935)\n[使用 nvm 管理不同版本的 node 与 npm](http://www.tuicool.com/articles/Vzquy2)","slug":"node.js 6.9.4_update","published":1,"date":"2018-04-27T06:31:01.948Z","updated":"2018-04-27T07:26:30.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghshevj000in1yrvn78lrz7","content":"<h2 id=\"node-js-简介\"><a href=\"#node-js-简介\" class=\"headerlink\" title=\"node.js 简介\"></a>node.js 简介</h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。<br>Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p>\n<h2 id=\"node-升级\"><a href=\"#node-升级\" class=\"headerlink\" title=\"node 升级\"></a>node 升级</h2><p>Node.js的开发非常活跃，它的最新稳定版本也频繁变化，你不时会发现，一个模块不能在你当前的Node版本上使用，此时你需要升级Node</p>\n<h2 id=\"方法一、使用源码，进行编译安装\"><a href=\"#方法一、使用源码，进行编译安装\" class=\"headerlink\" title=\"方法一、使用源码，进行编译安装\"></a>方法一、使用源码，进行编译安装</h2><h3 id=\"下载源码，并上传到服务器\"><a href=\"#下载源码，并上传到服务器\" class=\"headerlink\" title=\"下载源码，并上传到服务器\"></a>下载源码，并上传到服务器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v6.9.2/node-v6.9.2-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<h3 id=\"解压源码\"><a href=\"#解压源码\" class=\"headerlink\" title=\"解压源码\"></a>解压源码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzvf node......gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configuration</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装完毕\"><a href=\"#安装完毕\" class=\"headerlink\" title=\"安装完毕\"></a>安装完毕</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v  # 结果：6.9.4</span><br></pre></td></tr></table></figure>\n<h2 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h2><ul>\n<li>npm 也会同时升级</li>\n<li>pm2 也要进行升级</li>\n</ul>\n<h2 id=\"方法二、apt-get-升级\"><a href=\"#方法二、apt-get-升级\" class=\"headerlink\" title=\"方法二、apt-get 升级\"></a>方法二、apt-get 升级</h2><h3 id=\"1-设置代理\"><a href=\"#1-设置代理\" class=\"headerlink\" title=\"1. 设置代理\"></a>1. 设置代理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export http_proxy=http://127.0.0.1:808</span><br></pre></td></tr></table></figure>\n<h3 id=\"apt-get-update-更新系统\"><a href=\"#apt-get-update-更新系统\" class=\"headerlink\" title=\"apt-get update 更新系统\"></a>apt-get update 更新系统</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br></pre></td></tr></table></figure>\n<h3 id=\"提示错误\"><a href=\"#提示错误\" class=\"headerlink\" title=\"提示错误\"></a>提示错误</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">已下载 247 kB，耗时 5秒 (41.5 kB/s)</span><br><span class=\"line\">正在读取软件包列表... 完成</span><br><span class=\"line\">W: GPG 错误：http://apt.oneapm.com stable Release: 由于没有公钥，无法验证下列签名： NO_PUBKEY 8CF9B240B421195B</span><br><span class=\"line\">W: 仓库 “http://apt.oneapm.com stable Release” 没有数字签名。</span><br><span class=\"line\">N: 无法认证来自该源的数据，所以使用它会带来潜在风险。</span><br><span class=\"line\">N: 参见 apt-secure(8) 手册以了解仓库创建和用户配置方面的细节</span><br></pre></td></tr></table></figure>\n<h3 id=\"修复命令\"><a href=\"#修复命令\" class=\"headerlink\" title=\"修复命令\"></a>修复命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --keyserver pgpkeys.mit.edu --recv-key 8CF9B240B421195B</span><br><span class=\"line\"></span><br><span class=\"line\">gpg -a --export  8CF9B240B421195B | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新更新源：\"><a href=\"#重新更新源：\" class=\"headerlink\" title=\"重新更新源：\"></a>重新更新源：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装源-更新所有的软件：\"><a href=\"#安装源-更新所有的软件：\" class=\"headerlink\" title=\"安装源 更新所有的软件：\"></a>安装源 更新所有的软件：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get dist-upgrade</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法三、-node-切换版本-mvn\"><a href=\"#方法三、-node-切换版本-mvn\" class=\"headerlink\" title=\"方法三、 node 切换版本 mvn\"></a>方法三、 node 切换版本 mvn</h2><p>nvm 是 Mac 下的 node 管理工具，有点类似管理 Ruby 的 rvm，如果是需要管理 Windows 下的 node，官方推荐是使用 nvmw 或 nvm-windows 。</p>\n<h3 id=\"一、卸载已安装到全局的-node-npm\"><a href=\"#一、卸载已安装到全局的-node-npm\" class=\"headerlink\" title=\"一、卸载已安装到全局的 node/npm\"></a>一、卸载已安装到全局的 node/npm</h3><p>如果之前是在官网下载的 node 安装包，运行后会自动安装在全局目录，其中</p>\n<p>node 命令在 /usr/local/bin/node ，npm 命令在全局 node_modules 目录中，具体路径为 /usr/local/lib/node_modules/npm</p>\n<p>安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ls -g --depth=0 #查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装</span><br><span class=\"line\"></span><br><span class=\"line\">sudo rm -rf /usr/local/lib/node_modules #删除全局 node_modules 目录</span><br><span class=\"line\">sudo rm /usr/local/bin/node #删除 node</span><br><span class=\"line\">cd  /usr/local/bin &amp;&amp; ls -l | grep &quot;../lib/node_modules/&quot; | awk &apos;&#123;print $9&#125;&apos;| xargs rm #删除全局 node 模块注册的软链</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、安装-nvm\"><a href=\"#二、安装-nvm\" class=\"headerlink\" title=\"二、安装 nvm\"></a>二、安装 nvm</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、安装切换各版本-node-npm\"><a href=\"#三、安装切换各版本-node-npm\" class=\"headerlink\" title=\"三、安装切换各版本 node/npm\"></a>三、安装切换各版本 node/npm</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install stable #安装最新稳定版 node，现在是 5.0.0</span><br><span class=\"line\">nvm install 4.2.2 #安装 4.2.2 版本</span><br><span class=\"line\">nvm install 0.12.7 #安装 0.12.7 版本</span><br><span class=\"line\"></span><br><span class=\"line\"># 特别说明：以下模块安装仅供演示说明，并非必须安装模块</span><br><span class=\"line\">nvm use 0 #切换至 0.12.7 版本</span><br><span class=\"line\">npm install -g mz-fis #安装 mz-fis 模块至全局目录，安装完成的路径是 /Users/&lt;你的用户名&gt;/.nvm/versions/node/v0.12.7/lib/mz-fis</span><br><span class=\"line\">nvm use 4 #切换至 4.2.2 版本</span><br><span class=\"line\">npm install -g react-native-cli #安装 react-native-cli 模块至全局目录，安装完成的路径是 /Users/&lt;你的用户名&gt;/.nvm/versions/node/v4.2.2/lib/react-native-cli</span><br><span class=\"line\"></span><br><span class=\"line\">nvm alias default 0.12.7 #设置默认 node 版本为 0.12.7</span><br></pre></td></tr></table></figure>\n<h3 id=\"四、使用-nvmrc-文件配置项目所使用的-node-版本\"><a href=\"#四、使用-nvmrc-文件配置项目所使用的-node-版本\" class=\"headerlink\" title=\"四、使用 .nvmrc 文件配置项目所使用的 node 版本\"></a>四、使用 .nvmrc 文件配置项目所使用的 node 版本</h3><p>如果你的默认 node 版本（通过 nvm alias 命令设置的）与项目所需的版本不同，则可在项目根目录或其任意父级目录中创建 .nvmrc 文件，在文件中指定使用的 node 版本号，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &lt;项目根目录&gt;  #进入项目根目录</span><br><span class=\"line\">echo 4 &gt; .nvmrc #添加 .nvmrc 文件</span><br><span class=\"line\">nvm use #无需指定版本号，会自动使用 .nvmrc 文件中配置的版本</span><br><span class=\"line\">node -v #查看 node 是否切换为对应版本</span><br></pre></td></tr></table></figure>\n<h3 id=\"五、nvm-与-n-的区别\"><a href=\"#五、nvm-与-n-的区别\" class=\"headerlink\" title=\"五、nvm 与 n 的区别\"></a>五、nvm 与 n 的区别</h3><p>node 版本管理工具还有一个是 TJ 大神的 n 命令，n 命令是作为一个 node 的模块而存在，而 nvm 是一个独立于 node/npm 的外部 shell 脚本，因此 n 命令相比 nvm 更加局限。</p>\n<p>由于 npm 安装的模块路径均为 /usr/local/lib/node_modules ，当使用 n 切换不同的 node 版本时，实际上会共用全局的 node/npm 目录。 因此不能很好的满足『按不同 node 版本使用不同全局 node 模块』的需求。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://jingyan.baidu.com/article/4853e1e53204251909f7260f.html\" target=\"_blank\" rel=\"noopener\">Ubuntu下如何使用命令行（apt-get）更新软件</a><br><a href=\"http://blog.csdn.net/loovejava/article/details/21837935\" target=\"_blank\" rel=\"noopener\">更新linux时候提示无法“由于没有公钥，无法验证下列签名 ***”的解决方案</a><br><a href=\"http://www.tuicool.com/articles/Vzquy2\" target=\"_blank\" rel=\"noopener\">使用 nvm 管理不同版本的 node 与 npm</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"node-js-简介\"><a href=\"#node-js-简介\" class=\"headerlink\" title=\"node.js 简介\"></a>node.js 简介</h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。<br>Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。<br>Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p>\n<h2 id=\"node-升级\"><a href=\"#node-升级\" class=\"headerlink\" title=\"node 升级\"></a>node 升级</h2><p>Node.js的开发非常活跃，它的最新稳定版本也频繁变化，你不时会发现，一个模块不能在你当前的Node版本上使用，此时你需要升级Node</p>\n<h2 id=\"方法一、使用源码，进行编译安装\"><a href=\"#方法一、使用源码，进行编译安装\" class=\"headerlink\" title=\"方法一、使用源码，进行编译安装\"></a>方法一、使用源码，进行编译安装</h2><h3 id=\"下载源码，并上传到服务器\"><a href=\"#下载源码，并上传到服务器\" class=\"headerlink\" title=\"下载源码，并上传到服务器\"></a>下载源码，并上传到服务器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://nodejs.org/dist/v6.9.2/node-v6.9.2-linux-x64.tar.xz</span><br></pre></td></tr></table></figure>\n<h3 id=\"解压源码\"><a href=\"#解压源码\" class=\"headerlink\" title=\"解压源码\"></a>解压源码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzvf node......gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configuration</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装完毕\"><a href=\"#安装完毕\" class=\"headerlink\" title=\"安装完毕\"></a>安装完毕</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v  # 结果：6.9.4</span><br></pre></td></tr></table></figure>\n<h2 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h2><ul>\n<li>npm 也会同时升级</li>\n<li>pm2 也要进行升级</li>\n</ul>\n<h2 id=\"方法二、apt-get-升级\"><a href=\"#方法二、apt-get-升级\" class=\"headerlink\" title=\"方法二、apt-get 升级\"></a>方法二、apt-get 升级</h2><h3 id=\"1-设置代理\"><a href=\"#1-设置代理\" class=\"headerlink\" title=\"1. 设置代理\"></a>1. 设置代理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export http_proxy=http://127.0.0.1:808</span><br></pre></td></tr></table></figure>\n<h3 id=\"apt-get-update-更新系统\"><a href=\"#apt-get-update-更新系统\" class=\"headerlink\" title=\"apt-get update 更新系统\"></a>apt-get update 更新系统</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br></pre></td></tr></table></figure>\n<h3 id=\"提示错误\"><a href=\"#提示错误\" class=\"headerlink\" title=\"提示错误\"></a>提示错误</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">已下载 247 kB，耗时 5秒 (41.5 kB/s)</span><br><span class=\"line\">正在读取软件包列表... 完成</span><br><span class=\"line\">W: GPG 错误：http://apt.oneapm.com stable Release: 由于没有公钥，无法验证下列签名： NO_PUBKEY 8CF9B240B421195B</span><br><span class=\"line\">W: 仓库 “http://apt.oneapm.com stable Release” 没有数字签名。</span><br><span class=\"line\">N: 无法认证来自该源的数据，所以使用它会带来潜在风险。</span><br><span class=\"line\">N: 参见 apt-secure(8) 手册以了解仓库创建和用户配置方面的细节</span><br></pre></td></tr></table></figure>\n<h3 id=\"修复命令\"><a href=\"#修复命令\" class=\"headerlink\" title=\"修复命令\"></a>修复命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --keyserver pgpkeys.mit.edu --recv-key 8CF9B240B421195B</span><br><span class=\"line\"></span><br><span class=\"line\">gpg -a --export  8CF9B240B421195B | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新更新源：\"><a href=\"#重新更新源：\" class=\"headerlink\" title=\"重新更新源：\"></a>重新更新源：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装源-更新所有的软件：\"><a href=\"#安装源-更新所有的软件：\" class=\"headerlink\" title=\"安装源 更新所有的软件：\"></a>安装源 更新所有的软件：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get dist-upgrade</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法三、-node-切换版本-mvn\"><a href=\"#方法三、-node-切换版本-mvn\" class=\"headerlink\" title=\"方法三、 node 切换版本 mvn\"></a>方法三、 node 切换版本 mvn</h2><p>nvm 是 Mac 下的 node 管理工具，有点类似管理 Ruby 的 rvm，如果是需要管理 Windows 下的 node，官方推荐是使用 nvmw 或 nvm-windows 。</p>\n<h3 id=\"一、卸载已安装到全局的-node-npm\"><a href=\"#一、卸载已安装到全局的-node-npm\" class=\"headerlink\" title=\"一、卸载已安装到全局的 node/npm\"></a>一、卸载已安装到全局的 node/npm</h3><p>如果之前是在官网下载的 node 安装包，运行后会自动安装在全局目录，其中</p>\n<p>node 命令在 /usr/local/bin/node ，npm 命令在全局 node_modules 目录中，具体路径为 /usr/local/lib/node_modules/npm</p>\n<p>安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ls -g --depth=0 #查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装</span><br><span class=\"line\"></span><br><span class=\"line\">sudo rm -rf /usr/local/lib/node_modules #删除全局 node_modules 目录</span><br><span class=\"line\">sudo rm /usr/local/bin/node #删除 node</span><br><span class=\"line\">cd  /usr/local/bin &amp;&amp; ls -l | grep &quot;../lib/node_modules/&quot; | awk &apos;&#123;print $9&#125;&apos;| xargs rm #删除全局 node 模块注册的软链</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、安装-nvm\"><a href=\"#二、安装-nvm\" class=\"headerlink\" title=\"二、安装 nvm\"></a>二、安装 nvm</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、安装切换各版本-node-npm\"><a href=\"#三、安装切换各版本-node-npm\" class=\"headerlink\" title=\"三、安装切换各版本 node/npm\"></a>三、安装切换各版本 node/npm</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install stable #安装最新稳定版 node，现在是 5.0.0</span><br><span class=\"line\">nvm install 4.2.2 #安装 4.2.2 版本</span><br><span class=\"line\">nvm install 0.12.7 #安装 0.12.7 版本</span><br><span class=\"line\"></span><br><span class=\"line\"># 特别说明：以下模块安装仅供演示说明，并非必须安装模块</span><br><span class=\"line\">nvm use 0 #切换至 0.12.7 版本</span><br><span class=\"line\">npm install -g mz-fis #安装 mz-fis 模块至全局目录，安装完成的路径是 /Users/&lt;你的用户名&gt;/.nvm/versions/node/v0.12.7/lib/mz-fis</span><br><span class=\"line\">nvm use 4 #切换至 4.2.2 版本</span><br><span class=\"line\">npm install -g react-native-cli #安装 react-native-cli 模块至全局目录，安装完成的路径是 /Users/&lt;你的用户名&gt;/.nvm/versions/node/v4.2.2/lib/react-native-cli</span><br><span class=\"line\"></span><br><span class=\"line\">nvm alias default 0.12.7 #设置默认 node 版本为 0.12.7</span><br></pre></td></tr></table></figure>\n<h3 id=\"四、使用-nvmrc-文件配置项目所使用的-node-版本\"><a href=\"#四、使用-nvmrc-文件配置项目所使用的-node-版本\" class=\"headerlink\" title=\"四、使用 .nvmrc 文件配置项目所使用的 node 版本\"></a>四、使用 .nvmrc 文件配置项目所使用的 node 版本</h3><p>如果你的默认 node 版本（通过 nvm alias 命令设置的）与项目所需的版本不同，则可在项目根目录或其任意父级目录中创建 .nvmrc 文件，在文件中指定使用的 node 版本号，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &lt;项目根目录&gt;  #进入项目根目录</span><br><span class=\"line\">echo 4 &gt; .nvmrc #添加 .nvmrc 文件</span><br><span class=\"line\">nvm use #无需指定版本号，会自动使用 .nvmrc 文件中配置的版本</span><br><span class=\"line\">node -v #查看 node 是否切换为对应版本</span><br></pre></td></tr></table></figure>\n<h3 id=\"五、nvm-与-n-的区别\"><a href=\"#五、nvm-与-n-的区别\" class=\"headerlink\" title=\"五、nvm 与 n 的区别\"></a>五、nvm 与 n 的区别</h3><p>node 版本管理工具还有一个是 TJ 大神的 n 命令，n 命令是作为一个 node 的模块而存在，而 nvm 是一个独立于 node/npm 的外部 shell 脚本，因此 n 命令相比 nvm 更加局限。</p>\n<p>由于 npm 安装的模块路径均为 /usr/local/lib/node_modules ，当使用 n 切换不同的 node 版本时，实际上会共用全局的 node/npm 目录。 因此不能很好的满足『按不同 node 版本使用不同全局 node 模块』的需求。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"http://jingyan.baidu.com/article/4853e1e53204251909f7260f.html\" target=\"_blank\" rel=\"noopener\">Ubuntu下如何使用命令行（apt-get）更新软件</a><br><a href=\"http://blog.csdn.net/loovejava/article/details/21837935\" target=\"_blank\" rel=\"noopener\">更新linux时候提示无法“由于没有公钥，无法验证下列签名 ***”的解决方案</a><br><a href=\"http://www.tuicool.com/articles/Vzquy2\" target=\"_blank\" rel=\"noopener\">使用 nvm 管理不同版本的 node 与 npm</a></p>\n"},{"layout":"post","title":"deepin","date":"2018-04-27T07:55:49.000Z","_content":"\n# deepin 深度系统\n一个全新的简单、易用、美观的 Linux 操作系统。\n\n* 国产桌面系统，对中国用户做了很多优化\n* 使用的时候，可以不折腾，能够快速的上手。\n* 首先因为基于 Debian，软件源和 ppa 不是太偏门的基本都有。\n* 和 CrossOver 合作，所以 QQ 的体验也不错。不太懂 Linux 的同学终于不用苦于给 Wine 打补丁/升级之类的操作了。一些小小的软件通过 CrossOver 也能在 Deepin 上跑跑（看运气）。然而我是作为一个程序员的角度看的，Deepin 真的已经很易用了。\n* Deepin 的历史可以追溯到 2004年，其前身 Hiweed Linux 是中国第一个基于 Debian的本地化衍生版，并提供轻量级的可用LiveCD，旨在创造\n## 系统安装\n1. 需要一个优盘\n2. 下载最新镜像deepin-15.5-amd64.iso\n3. 启动优盘，设置U盘启动\n4. 安装部署系统，完成之后，去掉优盘\n5. 重启进入系统\n## 软件安装\n### 安装方式\n* 可以通过 apt-get install 命令，安装各种 linux 上的软件\n* 可以通过官方自带的 **深度商店** 安装常见的软件\n* 获取源码编译安装\n* 支持deb安装包安装 code_1.20.0-1518023506_amd64.deb\n* 可以通过 CrossOver 安装 windows 软件\n* wget -qO- https://get.docker.com/ | sh 下载安装方式\n\n### 安装问题\n1. apt-get install 安装时，需要阅读内容，删除也是要注意的\n2. 删除或安装时，有时候会删除一些**其他有用的模块**\n\n#### 深度软件中心\n深度软件中心（Software Center）是Linux平台通用的软件管理中心，安装软件。\n\n#### CrossOver 安装 windows 软件\nhome目录隐藏的.cxoffice目录下，在你安装的容器名里\n目录位置/home/mohoo/.cxoffice\n\n#### wine 安装程序目录\n百度云盘：\n/home/mohoo/.deepinwine/Deepin-BaiduNetDisk/dosdevices/c:/BaiduNetdiskDownload\n\n#### deb 安装包\nDebian包是Unixar的标准归档，将包文件信息以及包内容，经过gzip和tar打包而成。\n处理这些包的经典程序是dpkg，经常是通过Debian的apt-get来运作。\n通过**Alien**工具，可以将deb包转换成rpm、tar.gz格式。\ndeb包在Linux操作系统中类似于windows中的软件包（exe)，几乎不需要什么复杂的编译即可通过鼠标点击安装使用。此外,deb广泛应用于越狱后iOS软件及MeeGo（含Maemo软件）中。\n\ndeb 格式是 Debian 系统(包含 Debian 和 Ubuntu )专属安装包格式，配合 APT 软件管理系统，成为了当前在 Linux 下非常流行的一种安装包。进入 2.x 时代之后有 Cydia 作者 Jay Freeman（saurik） 移植到 iPhone 平台上，一起的还有 APT 软件管理系统。\n\ndeepin 源于 Debian   \ndpkg 是Debian Package的简写，是为Debian 专门开发的套件管理系统，方便软件的安装、更新及移除。\n所有源自Debian的Linux发行版都使用dpkg，例如Ubuntu、Knoppix 等。\n#### dep 平台\n* Debian\n* Ubuntu\n* Deepin\n* Knoppix\n* 越狱后iOS软件及MeeGo:苹果iPhone应用格式   \n\n- [百度经验](https://baike.baidu.com/item/deb/7025498?fr=aladdin#1)\n### 开发环境\n* golang\n* docker \n* mysql\n* mongodb\n* redis\n* php\n* nginx\n* python\n* java\n\n### 服务软件\n* ssh 自带\n* htop\n* curl 访问网站 请求接口\n* xterm\n* Oh-my-zsh\n* Tmux\n* Metasploit Metasploit是一款开源的安全漏洞检测工具\n* nautilus 命令行打开文件\n* git\n* zsh 命令行插件\n* sysv-rc-conf\n* [janus是⼀个⾮常好⽤的vim集成开发环境](https://www.cnblogs.com/ishell/p/4546169.html)\n* autojump 终端下多⽬录跳转神器\n* cheat python 命令行函数提示工具\n* apache2-utils ab压力测试\n* xdg-open 命令行快速打开各类型文件\n* imagemagick  apt-get install imagemagick    \n* pandoc 文档转换工具\n\n### 软件工具\n* **gedit** 编辑器 自带 gedit ./nginx.conf\n* gvim 安装后  gvim ./nginx.conf\n* sublime text 3\n* vscode\n* qq\n* 微信\n* foxmail\n* 钉钉\n* 百度网盘\n* Shadowsocks-Qt5\n* XMind\n* FileZilla\n* 有道云笔记网页版\n* Virtual Box\n* Synapse 快速搜索 工具  ctrl + space\n* MongoDB Compass 不错，很强大\n* Typora MD编写阅读能力非常棒,支持table 直接黏贴\n* Zeal API 文档\n* Remmina 远程桌面\n\n* https://www.gitkraken.com/download/linux-deb\n* http://blog.csdn.net/FungLeo/article/details/78439337\n## 系统更新\n1. 在设置更新选项时进行更新\n2. 命令行方式更新\n```\nsudo apt-get update && sudo apt-get dist-upgrade -y\n```\nhttps://www.cnblogs.com/gglin/p/7016454.html\n\n## 快捷键\n```sh\n# 截图\nCtrl + Alt + A\n# 终端\nCtrl + Alt + T\n# 雷神模式\nAlt + F2\n# 工作区\nWin + -> | <-\nWin + Shift + -> | <-\n```\n\n## Remmina 远程桌面\n\n### 链接windows\n1. 设置rdp协议\n2. 设置远程ip地址\n3. 设置全屏 + 设置设置鼠标\nhttp://blog.csdn.net/skykingf/article/details/71539237\n\n## xdg-open 命令行快速打开各类型文件\n在Ubuntu下，当需要打开其他格式文件时，咱们通常做法是进入到文件所在的目录，双击打开，很影响效率。事实上，可以通过命令xdg-open打开这些格式文件，甚至是网页，像打开文件一样简单\n\nxdg-open { file | URL } \nxdg-open { --help | --manual | --version } \n\nxdg-open la_isla_bonita.mp3 \nxdg-open http://baidu.com \n已在现有的浏览器会话中创建新的窗口。 \n\n## apache2-utils\nsudo apt-get install -y apache2-utils\n-n 1000 表示总请求数位1000\n-c 表示并发用户数为10\n```sh\nab -n 1000 -c 100 http://127.0.0.1:8080/api/get\nab -n 1000 -c 100 http://127.0.0.1:8888/api\n# 将内容转换为html\nab -n 10000 -c 1000 -t 1 -w http://127.0.0.1:8888/api >> 1.html\n```\n- [apache ab测试命令详解](https://www.cnblogs.com/dragonflyer/p/6137514.html)\n## pandoc 文件格式转换神器\nPandoc生成epub、html与在线电子书\n\n```sh\npandoc --version\npandoc --help\n# 转html格式\npandoc 01-chapter2.markdown -o chapter2.html -c Github.css\n# 转word格式\npandoc 01-chapter2.markdown -o chapter2.docx -c Github.css\n# 转pdf格式\npandoc  01-chapter2.markdown -o 01-chapter2.pdf --latex-engine=xelatex -V mainfont=heiti\\ \n```\nhttps://github.com/jgm/pandoc\nhttps://github.com/jgm/pandoc/releases/tag/2.1.1\n\n### github 下载\n对于 Linux以及 macOS，则修改 /etc/hosts \n```\n219.76.4.4 s3.amazonaws.com\n219.76.4.4 github-cloud.s3.amazonaws.com\n```\n## Cheat ： 一个实用 Linux 命令示例集合\n### 简介\ncheat 允许你在命令行中创建和查看交互式的速查表cheatsheet。它旨在帮助提醒 *nix 系统管理员他们经常使用但还没频繁到会记住的命令的选项。\ncheat 是使用 python 开发的，所以可以用 pip 来在你的系统上安装 cheat。\npip 是一个与 setuptools 捆绑在一起的 Python 模块，它是在 Linux 中安装 Python 包推荐的工具之一。\n\n对于 Debian/Ubuntu 用户，请使用 apt-get 命令或apt 命令来安装 pip。\n### 如何使用 Cheat\n```sh\npip install docopt pygments\n# 命令来查看速查表\ncheat tar\n# 运行下面的命令查看可用的速查表。\n$ cheat -l\n# 进入帮助页面获取更多详细信息。\n$ cheat -h\n```\n- [Cheat ： 一个实用 Linux 命令示例集合](https://linux.cn/article-9193-1.html)\n\n- [Cheat](https://linux.cn/article-3760-1.html)—— 给Linux初学者和管理员一个终极命令行\"备忘单\"\n## autojump\n一个可以在 Linux 文件系统快速导航的高级 cd 命令\n```sh\n# 安装\nsudo apt-get install autojump\n# 配置 为了使得 autojump 在 BASH shell 中永久有效，你需要运行下面的命令。\necho '. /usr/share/autojump/autojump.sh' >> ~/.bashrc\n# 使用\n$ j -v\n$ autojump -v\n# 跳到先前到过的目录 ‘/var/www‘ j ww 才能到什么目录\n```\n参考：\nhttps://linux.cn/article-5983-1.html\n\n## 超棒的离线文档阅读器：Zeal\n一开始 Zeal 是不带 API 文档的, 需要你自己按需下载. \nZeal 可以定义全局快捷键, 另外还有大量的插件可以配合大多数编辑器以及 IDE 使用, 我用的是 Visual Studio Code, 搜索安装 Dash, 在编辑器内就可以直接打开 Zeal 查看 API . 默认快捷键是 Ctrl + H, 跟编辑器默认的替换快捷键有冲突, 自己可以修改.\n下载：直接在应用商店下载\n使用：`Tools > Docsets > Available`\n\n参考：\nhttps://zealdocs.org/usage.html\nhttp://blog.csdn.net/xlinsist/article/details/51014532\nhttps://zealdocs.org/\n\n## sysv-rc-conf\nsysv-rc-conf是一个强大的服务管理程序，群众的意见是sysv-rc-conf比chkconfig、rcconf好用。\n\n```sh\n# 安装：\nsudo apt-get install sysv-rc-conf\n# 运行\nsudo sysv-rc-conf\n```\nhttp://blog.csdn.net/gatieme/article/details/45251389\n\n## zsh\n```sh\nsudo apt-get install zsh\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n\n# 设置输入命令，按tab键\n# 安装时，有可能导致，git 等失效！\n```\n[为什么说 zsh 是 shell 中的极品？](https://www.zhihu.com/question/21418449)\n\nhttps://www.zhihu.com/question/21418449 \n## MongoDB Compass\n```\nwget https://downloads.mongodb.com/compass/mongodb-compass_1.6.0_amd64.deb;    \nsudo dpkg -i mongodb-compass_1.6.0_amd64.deb\n```\n## phpStudy for Linux 不建议安装，会导致deepin的其他逐渐被删掉\n\n## node.js\nUbuntu下安装使用nvm\n/home/mohoo/.bashrc\n#### 安装\n```\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash\n```\n#### 使用\n\n安装成功后,**需要关闭xshell**，重新启动。nvm才会生效。\n\n查看nvm是否安装成功\n\n```sh\n# 查看nvm是否安装成功\nroot@linuxidc:~# command -v nvm\nnvm\n# 查看Java命令\ncommand -v java\n/usr/bin/java\n# nvm 安装node.js \nnvm install v9.3.0\n# node.js 版本存放位置\n/home/mohoo/.nvm/versions\n```\n### npm install 安装模块\n* npm install -g yarn pm2 http-server eslint\n* npm install -g gitbook gitbook-cli\n* npm install -g webpack gulp parcel-bundler\n* npm install -g nodeppt\n* npm install -g hexo hexo-cli\n* npm install -g phantomjs browsersync\n\n## golang\n\n### 安装及配置\n下载压缩包 go1.9.2.linux-amd64.tar.gz\n```\nwget https://www.golangtc.com/static/go/1.9.2/go1.9.2.linux-amd64.tar.gz\n```\n解压该文件，由于默认的go路径，在/usr/local下， 所以用如下命令，解压创建/usr/local/go\n```sh\ntar -C /usr/local -xzf go1.9.2.linux-amd64.tar.gz\n```\n配置环境变量，`sudo vim /etc/profile`下，添加对应的goroot和gopath的配置环境\n```sh\n## 环境目录\nexport GOROOT=/usr/local/go\n## 工作目录\nexport GOPATH=/home/mohoo/data/godev  \nexport PATH=$PATH:$GOROOT/bin  \n```\n之后，`source /etc/profile` 使得其配置文件有效.\n\n检查go的版本，`$ go version `\n### 编辑文件\n/home/mohoo/data/godev/src/helloword.go \n```go\npackage main\nimport \"fmt\" \nfunc main() { \n    fmt.Printf(\"Hello, world.\\n\") \n}\n```\n### 运行代码\n1. go run helloworld.go 直接可以看到结果\n2. go bulid helloworld.go，生成了helloworld的文件, ./helloworld 直接执行，输出了 Hello world\n\n### 参考：\n[linux下安装go](https://www.cnblogs.com/unqiang/p/6594451.html)\n[Linux上go的安装配置以及简单使用](http://blog.csdn.net/u011054678/article/details/72877465)\n\n## vscode\n在linux系统中安装VSCode(Visual Studio Code)\n\n### 方法一、从deepin 官网下载\n\n### 方法二、从软件中心，输入`Visual Studio Code`，下载安装\n\n### 方法三、下载源码，安装一下\n\n1. 从官网下载压缩包(话说下载下来解压就直接可以运行了咧,都不需要make)\n  访问Visual Studio Code官网 https://code.visualstudio.com/docs?dv=linux64 即可下载最新版本\n\n2. 解压 ,如果文件名不对,可能解压不出来的(扩展名:tar.gz)\n```ｓｈ\ntar jxcv code-stable-code_1.7.2-1479766213_amd64.tar.gz\n```\n3. 然后移动到 /usr/local/ 目录\n```sh\nmv VSCode-linux-x64 /usr/local/\n```\n4. 可能还需要给可执行的权限, 然后就已经可以运行了\n```sh\nchmod +x /usr/local/VSCode-linux-x64/code\n```\n5. 复制一个VScode图标文件到 /usr/share/icons/ 目录(后面会有用)\n```sh\ncp /usr/local/VSCode-linux-x64/resources/app/resources/linux/code.png /usr/share/icons/\n```\n6. 创建启动器, 在/usr/share/applications/ 目录, 也可以将它复制到桌面目录直接在中断使用命令: \n```sh\nvim /usr/share/applications/VSCode.desktop\n```\n然后输入以下文本:\n\n```\n[Desktop Entry]\nName=Visual Studio Code\nComment=Multi-platform code editor for Linux\nExec=/usr/local/VSCode-linux-x64/code\nIcon=/usr/share/icons/code.png\nType=Application\nStartupNotify=true\nCategories=TextEditor;Development;Utility;\nMimeType=text/plain;\n```\n保存后退出, 然后可以复制到桌面:\n```\ncp /usr/share/applications/VSCode.desktop ~/桌面/\n```\n之后 就会发现 桌面和 应用程序菜单都有了 VSCode的快捷方式了\n\n参考：\n- [在linux系统中安装VSCode(Visual Studio Code)](https://www.cnblogs.com/lzpong/p/6145511.html)\n\n## docker\n1、卸载老版本，较老版本的Docker被称为docker或docker-engine。如果这些已安装，请卸载它们以及关联的依赖关系。\n\n```sh\nsudo apt-get remove docker \\\n                  docker-common \\\n                  docker-selinux \\\n                  docker-engine\n```\n### 安装docker\n安装源切换为：网易云\n```sh\n# 建议使用方式，直接最新版本\nwget -qO- https://get.docker.com/ | sh\nsudo usermod -aG docker mohoo\n# apt-get install -y docker-engine\n```\n\n### 启动docker\n\n问题：\nCannot connect to the Docker daemon. Is the docker daemon running on this host?\n原因：权限不够，使用sudo docker ps 就可以了\n参考：\n\nhttp://www.jb51.net/article/94801.htm\nhttps://www.cnblogs.com/lxjshuju/p/7183689.html\n\n## mysql\n```sh\n# mysql 安装\nsudo apt-get install -y mysql-server\n\nmysql -V\n\n# 启动mysql命令(其它关闭，重启等功能只需将start换成相应的stop,restart等字母即可)：\nsudo service mysql start \n\nmysql -u用户名 -p密码\n# 设置 root的密码\nmysql -uroot -p\nroot root\n```\nhttp://www.jb51.net/article/84399.htm\n\n## mongodb\n\nMongoDB 是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。\n\nMongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。\n\n它的特点是高性能、易部署、易使用，存储数据非常方便。主要功能特性有：\n* 面向集合存储，易存储对象类型的数据。\n* 模式自由。\n* 支持动态查询。\n* 支持完全索引，包含内部对象。\n* 支持查询。\n* 支持复制和故障恢复。\n* 使用高效的二进制数据存储，包括大型对象（如视频等）。\n* 自动处理碎片，以支持云计算层次的扩展性。\n* 支持RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。\n* 文件存储格式为BSON（一种JSON的扩展）。\n* 可通过网络访问。\n\n###　下载完安装包，并解压 tgz（以下演示的是 64 位 Linux上的安装） 。\n```\ncurl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz    # 下载\ntar -zxvf mongodb-linux-x86_64-3.0.6.tgz                                   # 解压\n\nmv  mongodb-linux-x86_64-3.0.6/ /usr/local/mongodb                         # 将解压包拷贝到指定目录\n```\n###　MongoDB 的可执行文件位于 bin 目录下，所以可以将其添加到 PATH 路径中：\n```\nexport PATH=/usr/local/mongodb/bin:$PATH\n```\n###　创建数据库目录\nMongoDB的数据存储在data目录的db目录下，但是这个目录在安装过程不会自动创建，所以你需要手动创建data目录，并在data目录中创建db目录。\n以下实例中我们将data目录创建于根目录下(/)。\n注意：/data/db 是 MongoDB 默认的启动的数据库路径(--dbpath)。\n```\nmkdir -p /data/db\n```\n###　命令行中运行 MongoDB 服务\n你可以再命令行中执行mongo安装目录中的bin目录执行mongod命令来启动mongdb服务。\n注意：如果你的数据库目录不是/data/db，可以通过 --dbpath 来指定。\n\n```\n/usr/local/mongodb/bin/\n/usr/local/mongodb/bin/mongod --dbpath /home/mohoo/data/mongodb\n```\n### 自启动配置                                                               \nsudo vim /etc/rc.local\n\n## redis\n### 安装 Redis\n```\n$sudo apt-get update\n$sudo apt-get install redis-server\n```\n### 启动 Redis\n$ redis-server\n### 查看 redis 是否启动？\n$ redis-cli\n以上命令将打开以下终端：\nredis 127.0.0.1:6379>\n\n## php\nnginx 本地配置不太清楚怎么配置\n\ndocker pull registry.docker-cn.com/library/ubuntu:16.04\n\n解决方案：使用docker\nhttp://www.51testing.com/html/87/15091687-3649846.html\nhttp://www.runoob.com/docker/docker-install-php.html\n\n## python\n###　下载\n```sh\nwget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tar.xz\n```\n### 安装及配置\n1. 打开WEB浏览器访问http://www.python.org/download/\n2. 选择适用于Unix/Linux的源码压缩包。\n3. 下载及解压压缩包。\n4. 如果你需要自定义一些选项修改Modules/Setup\n5. 执行 ./configure 脚本\n6. make\n7. make install\n8. 执行以上操作后，Python会安装在 /usr/local/bin 目录中，Python库安装在/usr/local/lib/pythonXX，XX为你使用的Python的版本号。\n## java 默认安装了\nhttps://www.cnblogs.com/yuanbo123/p/5819564.html\n\n### 下载资源\nhttp://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n### 解压\ntar -zxvf jdk-8u102-linux-x64.tar.gz\n### 移动目录\nsudo mv jdk1.8.0_161/ /usr/local/java\n### 配置环境\nsudo vim /etc/profile\n```shell\nexport JAVA_HOME=/usr/local/java/\nexport JRE_HOME=/usr/local/java/jre\nexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH\nexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH\n```\n### 刷新配置\nsource /etc/profile\n\n### 校验\njava\n\n## nginx\n\n### 安装\n```sh\n# 下载源文件\nwget -c https://nginx.org/download/nginx-1.10.1.tar.gz\n# 解压\ntar -zxvf nginx-1.10.1.tar.gz\ncd nginx-1.10.1\n# configure\n./configure --conf-path=/home/mohoo/data/Project/work/nginx/nginx.conf\n# 编译安装\nmake\nmake install\n# 查找安装路径：\nwhereis nginx\n```\n\n### 启动、停止nginx\n使用sudo 权限\n\n```sh\n# 校验nginx 配置信息\n./nginx -t \n# 启动nginx\n./nginx  \n# 配置信息重载\n./nginx -s reload nginx\ncurl http://localhost\n```\n### nginx 自定义配置\n\n```sh\n# 自定义配置（不推荐）安装时进行配置,自定义配置\n./configure --conf-path=/usr/local/nginx/conf/nginx.conf\n# 配置信息\n./configure \\\n--prefix=/usr/local/nginx \\\n--conf-path=/usr/local/nginx/conf/nginx.conf \\\n--pid-path=/usr/local/nginx/conf/nginx.pid \\\n--lock-path=/var/lock/nginx.lock \\\n--error-log-path=/var/log/nginx/error.log \\\n--http-log-path=/var/log/nginx/access.log \\\n--with-http_gzip_static_module \\\n--http-client-body-temp-path=/var/temp/nginx/client \\\n--http-proxy-temp-path=/var/temp/nginx/proxy \\\n--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \\\n--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\\n--http-scgi-temp-path=/var/temp/nginx/scgi\n```\n\n\n```conf\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    server_tokens  off;  \n    fastcgi_intercept_errors on;\n    log_format logstash '$http_host $remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\" \"http_x_forwarded_for\" $request_time $upstream_response_time';\n\n\taccess_log logs/access.log logstash;\n   \taccess_log  /data/wwwlog/access.log  logstash;\n\terror_log  /data/wwwlog/error.log;\n\n   geo $white_ip {\n        #ranges;\n        default no;\n    }\n\t\n    include gzip.conf;    \n    keepalive_timeout           60 20;\n    client_header_timeout       3m;\n    client_body_timeout         3m;\n    send_timeout                3m;\n\n    client_header_buffer_size           16k;\n    large_client_header_buffers         4 32k;\n    server_names_hash_max_size          512;\n    server_names_hash_bucket_size       64;\n\n    sendfile        on;\n    tcp_nopush      on;\n    tcp_nodelay     on;\n\n    limit_req_zone $binary_remote_addr zone=http:10m rate=100r/s;\n    limit_req_zone $http_user_agent zone=useragenttrack:10m rate=100r/s;\n    \n\n    server {\n        listen       80;\n\t    root /data/wwwroot/html;\n        index index.html index.htm;\n        server_name  localhost;\n        error_page  404              /404.html;\n        error_page   500 502 503 504  /50x.html;\n\n        location /design/html/ {\n            root /home/data/graduation-design/client/;\n        }\n\n        location /mwechat{\n            proxy_pass http://127.0.0.1:8765;\n        }\n\t\n    }\n}\n```\n\n注：将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录\nhttps://www.cnblogs.com/hdnav/p/7941165.html\n\n```sh\n# 访问登录页面\ncurl http://localhost/design/html/login.html\n# 访问用户接口\ncurl http://localhost/design/users/info\n```\n\n### 多捣腾捣腾就可以了解很多之前想的东西\n很多人,很多知识点是相通的,可以借鉴别人的知识体系,查漏补缺.\n\n\n## sublime_text\nhttp://www.sublimetext.com/docs/3/linux_repositories.html\nhttps://jingyan.baidu.com/article/e5c39bf5c840d039d7603336.html\n\napt\nInstall the GPG key:\n\n```sh\nwget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -\n```\nEnsure apt is set up to work with https sources:\n\nsudo apt-get install apt-transport-https\nSelect the channel to use:\n\nStable\n```sh\necho \"deb https://download.sublimetext.com/ apt/stable/\" | sudo tee /etc/apt/sources.list.d/sublime-text.list\n```\nDev\n```sh\necho \"deb https://download.sublimetext.com/ apt/dev/\" | sudo tee /etc/apt/sources.list.d/sublime-text.list\n```\nUpdate apt sources and install Sublime Text\n\n```sh\nsudo apt-get update\nsudo apt-get install sublime-text\n```\n\nhttps://www.cnblogs.com/shenckicc/p/6032998.html\n\n解决无法输入中文：\n\nhttp://blog.csdn.net/cywosp/article/details/32350899\n\n## php\n\n\n### 系统性能配置优化\n* 设置> 个性化 > 开启窗口特效  主要作用，边框圆角美化，背景设置为毛玻璃，会导致不太美观\n* 开启高效模式\n* 热区优化\n* 模式选择:高效模式,时尚模式:不习惯\n* 大小设置为小\n* 系统注销后，长时间不处理，系统无法唤起。\n* 代码存放在home下面，不需要反复授权\nhttps://lanseyujie.com/post/deepin-optimization-techniques.html\nhttps://lanseyujie.com/post/deepin-install-shadowsocks.html\n- [ubuntu 安装 GCC 和 G++ C++ 开发环境](https://www.cnblogs.com/felixzh/p/5110939.html)\n\n### linux 场景\n1. 可以安装在各种计算机硬件设备中,手机,平板电脑,**路由器**,视频游戏控制台,台式计算机,大型机和超级计算机\n2. 严格来讲，Linux这个词本身只表示Linux内核，但实际上人们已经习惯了用Linux来形容整个基于Linux内核，并且使用GNU 工程各种工具和数据库的操作系统。\n\n### 现在几乎所有开源的系统都是基于linux/unix 系统\n1. 深入学习这个还是非常有必要的\n2. 到了知其然,知其所以然的时候\n3. 很多软件在linux 都能得到很好的支持.\n4. 服务器端基本上都是Linux ,如果可以在本地开发环境就原生拥有这些特性,那么后续的开发维护都比较方便\n5. docker等服务都是基于Linux系统,1. 是开源的 2. win 使用docker环境比较麻烦,不如直接使用docker\n6. linux 的配置命令 可以脚本化,方便于维护.\n7. 在接下来的一段时间里,我争取使用linux 简单而强大,配置完成后可以很方便的进行配置维护\n8. 在window下,你配置的东西,每次做系统,都会变更很多东西,这些东西不能同步,而Linux不同,可以脚本化.\n9. linux 下默认的编辑器是vim 那么可以有意识的去尝试使用 \n10. 尝试deepin 系统的有点和不足 尝试在linux 下进行办公\n\n### deepin 优点\nlinux:应用范围更广, 移动端:Android ,服务器端:几乎占据绝对主流,\n1. 命令行终端不错 支持很多特性 ssh 多屏幕 不需要使用第三方的东西了\n2. 输入法也还可以,不会让人适应很长时间\n3. 性能还可以，至少 windows 系统没有那么流畅。\n4. 开发状态和服务器状态保持一致，减少平台切换的麻烦\n5. 针对自己常用到的场景，已经妥妥的支持了\n6. 入门比较轻松，切换成本比较低。\n","source":"_posts/deepin.md","raw":"---\nlayout: post\ntitle: deepin\ndate: 2018-04-27 15:55:49\ntags: linux\n---\n\n# deepin 深度系统\n一个全新的简单、易用、美观的 Linux 操作系统。\n\n* 国产桌面系统，对中国用户做了很多优化\n* 使用的时候，可以不折腾，能够快速的上手。\n* 首先因为基于 Debian，软件源和 ppa 不是太偏门的基本都有。\n* 和 CrossOver 合作，所以 QQ 的体验也不错。不太懂 Linux 的同学终于不用苦于给 Wine 打补丁/升级之类的操作了。一些小小的软件通过 CrossOver 也能在 Deepin 上跑跑（看运气）。然而我是作为一个程序员的角度看的，Deepin 真的已经很易用了。\n* Deepin 的历史可以追溯到 2004年，其前身 Hiweed Linux 是中国第一个基于 Debian的本地化衍生版，并提供轻量级的可用LiveCD，旨在创造\n## 系统安装\n1. 需要一个优盘\n2. 下载最新镜像deepin-15.5-amd64.iso\n3. 启动优盘，设置U盘启动\n4. 安装部署系统，完成之后，去掉优盘\n5. 重启进入系统\n## 软件安装\n### 安装方式\n* 可以通过 apt-get install 命令，安装各种 linux 上的软件\n* 可以通过官方自带的 **深度商店** 安装常见的软件\n* 获取源码编译安装\n* 支持deb安装包安装 code_1.20.0-1518023506_amd64.deb\n* 可以通过 CrossOver 安装 windows 软件\n* wget -qO- https://get.docker.com/ | sh 下载安装方式\n\n### 安装问题\n1. apt-get install 安装时，需要阅读内容，删除也是要注意的\n2. 删除或安装时，有时候会删除一些**其他有用的模块**\n\n#### 深度软件中心\n深度软件中心（Software Center）是Linux平台通用的软件管理中心，安装软件。\n\n#### CrossOver 安装 windows 软件\nhome目录隐藏的.cxoffice目录下，在你安装的容器名里\n目录位置/home/mohoo/.cxoffice\n\n#### wine 安装程序目录\n百度云盘：\n/home/mohoo/.deepinwine/Deepin-BaiduNetDisk/dosdevices/c:/BaiduNetdiskDownload\n\n#### deb 安装包\nDebian包是Unixar的标准归档，将包文件信息以及包内容，经过gzip和tar打包而成。\n处理这些包的经典程序是dpkg，经常是通过Debian的apt-get来运作。\n通过**Alien**工具，可以将deb包转换成rpm、tar.gz格式。\ndeb包在Linux操作系统中类似于windows中的软件包（exe)，几乎不需要什么复杂的编译即可通过鼠标点击安装使用。此外,deb广泛应用于越狱后iOS软件及MeeGo（含Maemo软件）中。\n\ndeb 格式是 Debian 系统(包含 Debian 和 Ubuntu )专属安装包格式，配合 APT 软件管理系统，成为了当前在 Linux 下非常流行的一种安装包。进入 2.x 时代之后有 Cydia 作者 Jay Freeman（saurik） 移植到 iPhone 平台上，一起的还有 APT 软件管理系统。\n\ndeepin 源于 Debian   \ndpkg 是Debian Package的简写，是为Debian 专门开发的套件管理系统，方便软件的安装、更新及移除。\n所有源自Debian的Linux发行版都使用dpkg，例如Ubuntu、Knoppix 等。\n#### dep 平台\n* Debian\n* Ubuntu\n* Deepin\n* Knoppix\n* 越狱后iOS软件及MeeGo:苹果iPhone应用格式   \n\n- [百度经验](https://baike.baidu.com/item/deb/7025498?fr=aladdin#1)\n### 开发环境\n* golang\n* docker \n* mysql\n* mongodb\n* redis\n* php\n* nginx\n* python\n* java\n\n### 服务软件\n* ssh 自带\n* htop\n* curl 访问网站 请求接口\n* xterm\n* Oh-my-zsh\n* Tmux\n* Metasploit Metasploit是一款开源的安全漏洞检测工具\n* nautilus 命令行打开文件\n* git\n* zsh 命令行插件\n* sysv-rc-conf\n* [janus是⼀个⾮常好⽤的vim集成开发环境](https://www.cnblogs.com/ishell/p/4546169.html)\n* autojump 终端下多⽬录跳转神器\n* cheat python 命令行函数提示工具\n* apache2-utils ab压力测试\n* xdg-open 命令行快速打开各类型文件\n* imagemagick  apt-get install imagemagick    \n* pandoc 文档转换工具\n\n### 软件工具\n* **gedit** 编辑器 自带 gedit ./nginx.conf\n* gvim 安装后  gvim ./nginx.conf\n* sublime text 3\n* vscode\n* qq\n* 微信\n* foxmail\n* 钉钉\n* 百度网盘\n* Shadowsocks-Qt5\n* XMind\n* FileZilla\n* 有道云笔记网页版\n* Virtual Box\n* Synapse 快速搜索 工具  ctrl + space\n* MongoDB Compass 不错，很强大\n* Typora MD编写阅读能力非常棒,支持table 直接黏贴\n* Zeal API 文档\n* Remmina 远程桌面\n\n* https://www.gitkraken.com/download/linux-deb\n* http://blog.csdn.net/FungLeo/article/details/78439337\n## 系统更新\n1. 在设置更新选项时进行更新\n2. 命令行方式更新\n```\nsudo apt-get update && sudo apt-get dist-upgrade -y\n```\nhttps://www.cnblogs.com/gglin/p/7016454.html\n\n## 快捷键\n```sh\n# 截图\nCtrl + Alt + A\n# 终端\nCtrl + Alt + T\n# 雷神模式\nAlt + F2\n# 工作区\nWin + -> | <-\nWin + Shift + -> | <-\n```\n\n## Remmina 远程桌面\n\n### 链接windows\n1. 设置rdp协议\n2. 设置远程ip地址\n3. 设置全屏 + 设置设置鼠标\nhttp://blog.csdn.net/skykingf/article/details/71539237\n\n## xdg-open 命令行快速打开各类型文件\n在Ubuntu下，当需要打开其他格式文件时，咱们通常做法是进入到文件所在的目录，双击打开，很影响效率。事实上，可以通过命令xdg-open打开这些格式文件，甚至是网页，像打开文件一样简单\n\nxdg-open { file | URL } \nxdg-open { --help | --manual | --version } \n\nxdg-open la_isla_bonita.mp3 \nxdg-open http://baidu.com \n已在现有的浏览器会话中创建新的窗口。 \n\n## apache2-utils\nsudo apt-get install -y apache2-utils\n-n 1000 表示总请求数位1000\n-c 表示并发用户数为10\n```sh\nab -n 1000 -c 100 http://127.0.0.1:8080/api/get\nab -n 1000 -c 100 http://127.0.0.1:8888/api\n# 将内容转换为html\nab -n 10000 -c 1000 -t 1 -w http://127.0.0.1:8888/api >> 1.html\n```\n- [apache ab测试命令详解](https://www.cnblogs.com/dragonflyer/p/6137514.html)\n## pandoc 文件格式转换神器\nPandoc生成epub、html与在线电子书\n\n```sh\npandoc --version\npandoc --help\n# 转html格式\npandoc 01-chapter2.markdown -o chapter2.html -c Github.css\n# 转word格式\npandoc 01-chapter2.markdown -o chapter2.docx -c Github.css\n# 转pdf格式\npandoc  01-chapter2.markdown -o 01-chapter2.pdf --latex-engine=xelatex -V mainfont=heiti\\ \n```\nhttps://github.com/jgm/pandoc\nhttps://github.com/jgm/pandoc/releases/tag/2.1.1\n\n### github 下载\n对于 Linux以及 macOS，则修改 /etc/hosts \n```\n219.76.4.4 s3.amazonaws.com\n219.76.4.4 github-cloud.s3.amazonaws.com\n```\n## Cheat ： 一个实用 Linux 命令示例集合\n### 简介\ncheat 允许你在命令行中创建和查看交互式的速查表cheatsheet。它旨在帮助提醒 *nix 系统管理员他们经常使用但还没频繁到会记住的命令的选项。\ncheat 是使用 python 开发的，所以可以用 pip 来在你的系统上安装 cheat。\npip 是一个与 setuptools 捆绑在一起的 Python 模块，它是在 Linux 中安装 Python 包推荐的工具之一。\n\n对于 Debian/Ubuntu 用户，请使用 apt-get 命令或apt 命令来安装 pip。\n### 如何使用 Cheat\n```sh\npip install docopt pygments\n# 命令来查看速查表\ncheat tar\n# 运行下面的命令查看可用的速查表。\n$ cheat -l\n# 进入帮助页面获取更多详细信息。\n$ cheat -h\n```\n- [Cheat ： 一个实用 Linux 命令示例集合](https://linux.cn/article-9193-1.html)\n\n- [Cheat](https://linux.cn/article-3760-1.html)—— 给Linux初学者和管理员一个终极命令行\"备忘单\"\n## autojump\n一个可以在 Linux 文件系统快速导航的高级 cd 命令\n```sh\n# 安装\nsudo apt-get install autojump\n# 配置 为了使得 autojump 在 BASH shell 中永久有效，你需要运行下面的命令。\necho '. /usr/share/autojump/autojump.sh' >> ~/.bashrc\n# 使用\n$ j -v\n$ autojump -v\n# 跳到先前到过的目录 ‘/var/www‘ j ww 才能到什么目录\n```\n参考：\nhttps://linux.cn/article-5983-1.html\n\n## 超棒的离线文档阅读器：Zeal\n一开始 Zeal 是不带 API 文档的, 需要你自己按需下载. \nZeal 可以定义全局快捷键, 另外还有大量的插件可以配合大多数编辑器以及 IDE 使用, 我用的是 Visual Studio Code, 搜索安装 Dash, 在编辑器内就可以直接打开 Zeal 查看 API . 默认快捷键是 Ctrl + H, 跟编辑器默认的替换快捷键有冲突, 自己可以修改.\n下载：直接在应用商店下载\n使用：`Tools > Docsets > Available`\n\n参考：\nhttps://zealdocs.org/usage.html\nhttp://blog.csdn.net/xlinsist/article/details/51014532\nhttps://zealdocs.org/\n\n## sysv-rc-conf\nsysv-rc-conf是一个强大的服务管理程序，群众的意见是sysv-rc-conf比chkconfig、rcconf好用。\n\n```sh\n# 安装：\nsudo apt-get install sysv-rc-conf\n# 运行\nsudo sysv-rc-conf\n```\nhttp://blog.csdn.net/gatieme/article/details/45251389\n\n## zsh\n```sh\nsudo apt-get install zsh\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n\n# 设置输入命令，按tab键\n# 安装时，有可能导致，git 等失效！\n```\n[为什么说 zsh 是 shell 中的极品？](https://www.zhihu.com/question/21418449)\n\nhttps://www.zhihu.com/question/21418449 \n## MongoDB Compass\n```\nwget https://downloads.mongodb.com/compass/mongodb-compass_1.6.0_amd64.deb;    \nsudo dpkg -i mongodb-compass_1.6.0_amd64.deb\n```\n## phpStudy for Linux 不建议安装，会导致deepin的其他逐渐被删掉\n\n## node.js\nUbuntu下安装使用nvm\n/home/mohoo/.bashrc\n#### 安装\n```\nwget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash\n```\n#### 使用\n\n安装成功后,**需要关闭xshell**，重新启动。nvm才会生效。\n\n查看nvm是否安装成功\n\n```sh\n# 查看nvm是否安装成功\nroot@linuxidc:~# command -v nvm\nnvm\n# 查看Java命令\ncommand -v java\n/usr/bin/java\n# nvm 安装node.js \nnvm install v9.3.0\n# node.js 版本存放位置\n/home/mohoo/.nvm/versions\n```\n### npm install 安装模块\n* npm install -g yarn pm2 http-server eslint\n* npm install -g gitbook gitbook-cli\n* npm install -g webpack gulp parcel-bundler\n* npm install -g nodeppt\n* npm install -g hexo hexo-cli\n* npm install -g phantomjs browsersync\n\n## golang\n\n### 安装及配置\n下载压缩包 go1.9.2.linux-amd64.tar.gz\n```\nwget https://www.golangtc.com/static/go/1.9.2/go1.9.2.linux-amd64.tar.gz\n```\n解压该文件，由于默认的go路径，在/usr/local下， 所以用如下命令，解压创建/usr/local/go\n```sh\ntar -C /usr/local -xzf go1.9.2.linux-amd64.tar.gz\n```\n配置环境变量，`sudo vim /etc/profile`下，添加对应的goroot和gopath的配置环境\n```sh\n## 环境目录\nexport GOROOT=/usr/local/go\n## 工作目录\nexport GOPATH=/home/mohoo/data/godev  \nexport PATH=$PATH:$GOROOT/bin  \n```\n之后，`source /etc/profile` 使得其配置文件有效.\n\n检查go的版本，`$ go version `\n### 编辑文件\n/home/mohoo/data/godev/src/helloword.go \n```go\npackage main\nimport \"fmt\" \nfunc main() { \n    fmt.Printf(\"Hello, world.\\n\") \n}\n```\n### 运行代码\n1. go run helloworld.go 直接可以看到结果\n2. go bulid helloworld.go，生成了helloworld的文件, ./helloworld 直接执行，输出了 Hello world\n\n### 参考：\n[linux下安装go](https://www.cnblogs.com/unqiang/p/6594451.html)\n[Linux上go的安装配置以及简单使用](http://blog.csdn.net/u011054678/article/details/72877465)\n\n## vscode\n在linux系统中安装VSCode(Visual Studio Code)\n\n### 方法一、从deepin 官网下载\n\n### 方法二、从软件中心，输入`Visual Studio Code`，下载安装\n\n### 方法三、下载源码，安装一下\n\n1. 从官网下载压缩包(话说下载下来解压就直接可以运行了咧,都不需要make)\n  访问Visual Studio Code官网 https://code.visualstudio.com/docs?dv=linux64 即可下载最新版本\n\n2. 解压 ,如果文件名不对,可能解压不出来的(扩展名:tar.gz)\n```ｓｈ\ntar jxcv code-stable-code_1.7.2-1479766213_amd64.tar.gz\n```\n3. 然后移动到 /usr/local/ 目录\n```sh\nmv VSCode-linux-x64 /usr/local/\n```\n4. 可能还需要给可执行的权限, 然后就已经可以运行了\n```sh\nchmod +x /usr/local/VSCode-linux-x64/code\n```\n5. 复制一个VScode图标文件到 /usr/share/icons/ 目录(后面会有用)\n```sh\ncp /usr/local/VSCode-linux-x64/resources/app/resources/linux/code.png /usr/share/icons/\n```\n6. 创建启动器, 在/usr/share/applications/ 目录, 也可以将它复制到桌面目录直接在中断使用命令: \n```sh\nvim /usr/share/applications/VSCode.desktop\n```\n然后输入以下文本:\n\n```\n[Desktop Entry]\nName=Visual Studio Code\nComment=Multi-platform code editor for Linux\nExec=/usr/local/VSCode-linux-x64/code\nIcon=/usr/share/icons/code.png\nType=Application\nStartupNotify=true\nCategories=TextEditor;Development;Utility;\nMimeType=text/plain;\n```\n保存后退出, 然后可以复制到桌面:\n```\ncp /usr/share/applications/VSCode.desktop ~/桌面/\n```\n之后 就会发现 桌面和 应用程序菜单都有了 VSCode的快捷方式了\n\n参考：\n- [在linux系统中安装VSCode(Visual Studio Code)](https://www.cnblogs.com/lzpong/p/6145511.html)\n\n## docker\n1、卸载老版本，较老版本的Docker被称为docker或docker-engine。如果这些已安装，请卸载它们以及关联的依赖关系。\n\n```sh\nsudo apt-get remove docker \\\n                  docker-common \\\n                  docker-selinux \\\n                  docker-engine\n```\n### 安装docker\n安装源切换为：网易云\n```sh\n# 建议使用方式，直接最新版本\nwget -qO- https://get.docker.com/ | sh\nsudo usermod -aG docker mohoo\n# apt-get install -y docker-engine\n```\n\n### 启动docker\n\n问题：\nCannot connect to the Docker daemon. Is the docker daemon running on this host?\n原因：权限不够，使用sudo docker ps 就可以了\n参考：\n\nhttp://www.jb51.net/article/94801.htm\nhttps://www.cnblogs.com/lxjshuju/p/7183689.html\n\n## mysql\n```sh\n# mysql 安装\nsudo apt-get install -y mysql-server\n\nmysql -V\n\n# 启动mysql命令(其它关闭，重启等功能只需将start换成相应的stop,restart等字母即可)：\nsudo service mysql start \n\nmysql -u用户名 -p密码\n# 设置 root的密码\nmysql -uroot -p\nroot root\n```\nhttp://www.jb51.net/article/84399.htm\n\n## mongodb\n\nMongoDB 是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。\n\nMongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。\n\n它的特点是高性能、易部署、易使用，存储数据非常方便。主要功能特性有：\n* 面向集合存储，易存储对象类型的数据。\n* 模式自由。\n* 支持动态查询。\n* 支持完全索引，包含内部对象。\n* 支持查询。\n* 支持复制和故障恢复。\n* 使用高效的二进制数据存储，包括大型对象（如视频等）。\n* 自动处理碎片，以支持云计算层次的扩展性。\n* 支持RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。\n* 文件存储格式为BSON（一种JSON的扩展）。\n* 可通过网络访问。\n\n###　下载完安装包，并解压 tgz（以下演示的是 64 位 Linux上的安装） 。\n```\ncurl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz    # 下载\ntar -zxvf mongodb-linux-x86_64-3.0.6.tgz                                   # 解压\n\nmv  mongodb-linux-x86_64-3.0.6/ /usr/local/mongodb                         # 将解压包拷贝到指定目录\n```\n###　MongoDB 的可执行文件位于 bin 目录下，所以可以将其添加到 PATH 路径中：\n```\nexport PATH=/usr/local/mongodb/bin:$PATH\n```\n###　创建数据库目录\nMongoDB的数据存储在data目录的db目录下，但是这个目录在安装过程不会自动创建，所以你需要手动创建data目录，并在data目录中创建db目录。\n以下实例中我们将data目录创建于根目录下(/)。\n注意：/data/db 是 MongoDB 默认的启动的数据库路径(--dbpath)。\n```\nmkdir -p /data/db\n```\n###　命令行中运行 MongoDB 服务\n你可以再命令行中执行mongo安装目录中的bin目录执行mongod命令来启动mongdb服务。\n注意：如果你的数据库目录不是/data/db，可以通过 --dbpath 来指定。\n\n```\n/usr/local/mongodb/bin/\n/usr/local/mongodb/bin/mongod --dbpath /home/mohoo/data/mongodb\n```\n### 自启动配置                                                               \nsudo vim /etc/rc.local\n\n## redis\n### 安装 Redis\n```\n$sudo apt-get update\n$sudo apt-get install redis-server\n```\n### 启动 Redis\n$ redis-server\n### 查看 redis 是否启动？\n$ redis-cli\n以上命令将打开以下终端：\nredis 127.0.0.1:6379>\n\n## php\nnginx 本地配置不太清楚怎么配置\n\ndocker pull registry.docker-cn.com/library/ubuntu:16.04\n\n解决方案：使用docker\nhttp://www.51testing.com/html/87/15091687-3649846.html\nhttp://www.runoob.com/docker/docker-install-php.html\n\n## python\n###　下载\n```sh\nwget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tar.xz\n```\n### 安装及配置\n1. 打开WEB浏览器访问http://www.python.org/download/\n2. 选择适用于Unix/Linux的源码压缩包。\n3. 下载及解压压缩包。\n4. 如果你需要自定义一些选项修改Modules/Setup\n5. 执行 ./configure 脚本\n6. make\n7. make install\n8. 执行以上操作后，Python会安装在 /usr/local/bin 目录中，Python库安装在/usr/local/lib/pythonXX，XX为你使用的Python的版本号。\n## java 默认安装了\nhttps://www.cnblogs.com/yuanbo123/p/5819564.html\n\n### 下载资源\nhttp://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n### 解压\ntar -zxvf jdk-8u102-linux-x64.tar.gz\n### 移动目录\nsudo mv jdk1.8.0_161/ /usr/local/java\n### 配置环境\nsudo vim /etc/profile\n```shell\nexport JAVA_HOME=/usr/local/java/\nexport JRE_HOME=/usr/local/java/jre\nexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH\nexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH\n```\n### 刷新配置\nsource /etc/profile\n\n### 校验\njava\n\n## nginx\n\n### 安装\n```sh\n# 下载源文件\nwget -c https://nginx.org/download/nginx-1.10.1.tar.gz\n# 解压\ntar -zxvf nginx-1.10.1.tar.gz\ncd nginx-1.10.1\n# configure\n./configure --conf-path=/home/mohoo/data/Project/work/nginx/nginx.conf\n# 编译安装\nmake\nmake install\n# 查找安装路径：\nwhereis nginx\n```\n\n### 启动、停止nginx\n使用sudo 权限\n\n```sh\n# 校验nginx 配置信息\n./nginx -t \n# 启动nginx\n./nginx  \n# 配置信息重载\n./nginx -s reload nginx\ncurl http://localhost\n```\n### nginx 自定义配置\n\n```sh\n# 自定义配置（不推荐）安装时进行配置,自定义配置\n./configure --conf-path=/usr/local/nginx/conf/nginx.conf\n# 配置信息\n./configure \\\n--prefix=/usr/local/nginx \\\n--conf-path=/usr/local/nginx/conf/nginx.conf \\\n--pid-path=/usr/local/nginx/conf/nginx.pid \\\n--lock-path=/var/lock/nginx.lock \\\n--error-log-path=/var/log/nginx/error.log \\\n--http-log-path=/var/log/nginx/access.log \\\n--with-http_gzip_static_module \\\n--http-client-body-temp-path=/var/temp/nginx/client \\\n--http-proxy-temp-path=/var/temp/nginx/proxy \\\n--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \\\n--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\\n--http-scgi-temp-path=/var/temp/nginx/scgi\n```\n\n\n```conf\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    server_tokens  off;  \n    fastcgi_intercept_errors on;\n    log_format logstash '$http_host $remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\" \"http_x_forwarded_for\" $request_time $upstream_response_time';\n\n\taccess_log logs/access.log logstash;\n   \taccess_log  /data/wwwlog/access.log  logstash;\n\terror_log  /data/wwwlog/error.log;\n\n   geo $white_ip {\n        #ranges;\n        default no;\n    }\n\t\n    include gzip.conf;    \n    keepalive_timeout           60 20;\n    client_header_timeout       3m;\n    client_body_timeout         3m;\n    send_timeout                3m;\n\n    client_header_buffer_size           16k;\n    large_client_header_buffers         4 32k;\n    server_names_hash_max_size          512;\n    server_names_hash_bucket_size       64;\n\n    sendfile        on;\n    tcp_nopush      on;\n    tcp_nodelay     on;\n\n    limit_req_zone $binary_remote_addr zone=http:10m rate=100r/s;\n    limit_req_zone $http_user_agent zone=useragenttrack:10m rate=100r/s;\n    \n\n    server {\n        listen       80;\n\t    root /data/wwwroot/html;\n        index index.html index.htm;\n        server_name  localhost;\n        error_page  404              /404.html;\n        error_page   500 502 503 504  /50x.html;\n\n        location /design/html/ {\n            root /home/data/graduation-design/client/;\n        }\n\n        location /mwechat{\n            proxy_pass http://127.0.0.1:8765;\n        }\n\t\n    }\n}\n```\n\n注：将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录\nhttps://www.cnblogs.com/hdnav/p/7941165.html\n\n```sh\n# 访问登录页面\ncurl http://localhost/design/html/login.html\n# 访问用户接口\ncurl http://localhost/design/users/info\n```\n\n### 多捣腾捣腾就可以了解很多之前想的东西\n很多人,很多知识点是相通的,可以借鉴别人的知识体系,查漏补缺.\n\n\n## sublime_text\nhttp://www.sublimetext.com/docs/3/linux_repositories.html\nhttps://jingyan.baidu.com/article/e5c39bf5c840d039d7603336.html\n\napt\nInstall the GPG key:\n\n```sh\nwget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -\n```\nEnsure apt is set up to work with https sources:\n\nsudo apt-get install apt-transport-https\nSelect the channel to use:\n\nStable\n```sh\necho \"deb https://download.sublimetext.com/ apt/stable/\" | sudo tee /etc/apt/sources.list.d/sublime-text.list\n```\nDev\n```sh\necho \"deb https://download.sublimetext.com/ apt/dev/\" | sudo tee /etc/apt/sources.list.d/sublime-text.list\n```\nUpdate apt sources and install Sublime Text\n\n```sh\nsudo apt-get update\nsudo apt-get install sublime-text\n```\n\nhttps://www.cnblogs.com/shenckicc/p/6032998.html\n\n解决无法输入中文：\n\nhttp://blog.csdn.net/cywosp/article/details/32350899\n\n## php\n\n\n### 系统性能配置优化\n* 设置> 个性化 > 开启窗口特效  主要作用，边框圆角美化，背景设置为毛玻璃，会导致不太美观\n* 开启高效模式\n* 热区优化\n* 模式选择:高效模式,时尚模式:不习惯\n* 大小设置为小\n* 系统注销后，长时间不处理，系统无法唤起。\n* 代码存放在home下面，不需要反复授权\nhttps://lanseyujie.com/post/deepin-optimization-techniques.html\nhttps://lanseyujie.com/post/deepin-install-shadowsocks.html\n- [ubuntu 安装 GCC 和 G++ C++ 开发环境](https://www.cnblogs.com/felixzh/p/5110939.html)\n\n### linux 场景\n1. 可以安装在各种计算机硬件设备中,手机,平板电脑,**路由器**,视频游戏控制台,台式计算机,大型机和超级计算机\n2. 严格来讲，Linux这个词本身只表示Linux内核，但实际上人们已经习惯了用Linux来形容整个基于Linux内核，并且使用GNU 工程各种工具和数据库的操作系统。\n\n### 现在几乎所有开源的系统都是基于linux/unix 系统\n1. 深入学习这个还是非常有必要的\n2. 到了知其然,知其所以然的时候\n3. 很多软件在linux 都能得到很好的支持.\n4. 服务器端基本上都是Linux ,如果可以在本地开发环境就原生拥有这些特性,那么后续的开发维护都比较方便\n5. docker等服务都是基于Linux系统,1. 是开源的 2. win 使用docker环境比较麻烦,不如直接使用docker\n6. linux 的配置命令 可以脚本化,方便于维护.\n7. 在接下来的一段时间里,我争取使用linux 简单而强大,配置完成后可以很方便的进行配置维护\n8. 在window下,你配置的东西,每次做系统,都会变更很多东西,这些东西不能同步,而Linux不同,可以脚本化.\n9. linux 下默认的编辑器是vim 那么可以有意识的去尝试使用 \n10. 尝试deepin 系统的有点和不足 尝试在linux 下进行办公\n\n### deepin 优点\nlinux:应用范围更广, 移动端:Android ,服务器端:几乎占据绝对主流,\n1. 命令行终端不错 支持很多特性 ssh 多屏幕 不需要使用第三方的东西了\n2. 输入法也还可以,不会让人适应很长时间\n3. 性能还可以，至少 windows 系统没有那么流畅。\n4. 开发状态和服务器状态保持一致，减少平台切换的麻烦\n5. 针对自己常用到的场景，已经妥妥的支持了\n6. 入门比较轻松，切换成本比较低。\n","slug":"deepin","published":1,"updated":"2018-04-27T08:56:02.069Z","comments":1,"photos":[],"link":"","_id":"cjghshevl000ln1yrc5f3mrk9","content":"<h1 id=\"deepin-深度系统\"><a href=\"#deepin-深度系统\" class=\"headerlink\" title=\"deepin 深度系统\"></a>deepin 深度系统</h1><p>一个全新的简单、易用、美观的 Linux 操作系统。</p>\n<ul>\n<li>国产桌面系统，对中国用户做了很多优化</li>\n<li>使用的时候，可以不折腾，能够快速的上手。</li>\n<li>首先因为基于 Debian，软件源和 ppa 不是太偏门的基本都有。</li>\n<li>和 CrossOver 合作，所以 QQ 的体验也不错。不太懂 Linux 的同学终于不用苦于给 Wine 打补丁/升级之类的操作了。一些小小的软件通过 CrossOver 也能在 Deepin 上跑跑（看运气）。然而我是作为一个程序员的角度看的，Deepin 真的已经很易用了。</li>\n<li>Deepin 的历史可以追溯到 2004年，其前身 Hiweed Linux 是中国第一个基于 Debian的本地化衍生版，并提供轻量级的可用LiveCD，旨在创造<h2 id=\"系统安装\"><a href=\"#系统安装\" class=\"headerlink\" title=\"系统安装\"></a>系统安装</h2></li>\n</ul>\n<ol>\n<li>需要一个优盘</li>\n<li>下载最新镜像deepin-15.5-amd64.iso</li>\n<li>启动优盘，设置U盘启动</li>\n<li>安装部署系统，完成之后，去掉优盘</li>\n<li>重启进入系统<h2 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h2><h3 id=\"安装方式\"><a href=\"#安装方式\" class=\"headerlink\" title=\"安装方式\"></a>安装方式</h3></li>\n</ol>\n<ul>\n<li>可以通过 apt-get install 命令，安装各种 linux 上的软件</li>\n<li>可以通过官方自带的 <strong>深度商店</strong> 安装常见的软件</li>\n<li>获取源码编译安装</li>\n<li>支持deb安装包安装 code_1.20.0-1518023506_amd64.deb</li>\n<li>可以通过 CrossOver 安装 windows 软件</li>\n<li>wget -qO- <a href=\"https://get.docker.com/\" target=\"_blank\" rel=\"noopener\">https://get.docker.com/</a> | sh 下载安装方式</li>\n</ul>\n<h3 id=\"安装问题\"><a href=\"#安装问题\" class=\"headerlink\" title=\"安装问题\"></a>安装问题</h3><ol>\n<li>apt-get install 安装时，需要阅读内容，删除也是要注意的</li>\n<li>删除或安装时，有时候会删除一些<strong>其他有用的模块</strong></li>\n</ol>\n<h4 id=\"深度软件中心\"><a href=\"#深度软件中心\" class=\"headerlink\" title=\"深度软件中心\"></a>深度软件中心</h4><p>深度软件中心（Software Center）是Linux平台通用的软件管理中心，安装软件。</p>\n<h4 id=\"CrossOver-安装-windows-软件\"><a href=\"#CrossOver-安装-windows-软件\" class=\"headerlink\" title=\"CrossOver 安装 windows 软件\"></a>CrossOver 安装 windows 软件</h4><p>home目录隐藏的.cxoffice目录下，在你安装的容器名里<br>目录位置/home/mohoo/.cxoffice</p>\n<h4 id=\"wine-安装程序目录\"><a href=\"#wine-安装程序目录\" class=\"headerlink\" title=\"wine 安装程序目录\"></a>wine 安装程序目录</h4><p>百度云盘：<br>/home/mohoo/.deepinwine/Deepin-BaiduNetDisk/dosdevices/c:/BaiduNetdiskDownload</p>\n<h4 id=\"deb-安装包\"><a href=\"#deb-安装包\" class=\"headerlink\" title=\"deb 安装包\"></a>deb 安装包</h4><p>Debian包是Unixar的标准归档，将包文件信息以及包内容，经过gzip和tar打包而成。<br>处理这些包的经典程序是dpkg，经常是通过Debian的apt-get来运作。<br>通过<strong>Alien</strong>工具，可以将deb包转换成rpm、tar.gz格式。<br>deb包在Linux操作系统中类似于windows中的软件包（exe)，几乎不需要什么复杂的编译即可通过鼠标点击安装使用。此外,deb广泛应用于越狱后iOS软件及MeeGo（含Maemo软件）中。</p>\n<p>deb 格式是 Debian 系统(包含 Debian 和 Ubuntu )专属安装包格式，配合 APT 软件管理系统，成为了当前在 Linux 下非常流行的一种安装包。进入 2.x 时代之后有 Cydia 作者 Jay Freeman（saurik） 移植到 iPhone 平台上，一起的还有 APT 软件管理系统。</p>\n<p>deepin 源于 Debian<br>dpkg 是Debian Package的简写，是为Debian 专门开发的套件管理系统，方便软件的安装、更新及移除。<br>所有源自Debian的Linux发行版都使用dpkg，例如Ubuntu、Knoppix 等。</p>\n<h4 id=\"dep-平台\"><a href=\"#dep-平台\" class=\"headerlink\" title=\"dep 平台\"></a>dep 平台</h4><ul>\n<li>Debian</li>\n<li>Ubuntu</li>\n<li>Deepin</li>\n<li>Knoppix</li>\n<li>越狱后iOS软件及MeeGo:苹果iPhone应用格式   </li>\n</ul>\n<ul>\n<li><a href=\"https://baike.baidu.com/item/deb/7025498?fr=aladdin#1\" target=\"_blank\" rel=\"noopener\">百度经验</a><h3 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h3></li>\n</ul>\n<ul>\n<li>golang</li>\n<li>docker </li>\n<li>mysql</li>\n<li>mongodb</li>\n<li>redis</li>\n<li>php</li>\n<li>nginx</li>\n<li>python</li>\n<li>java</li>\n</ul>\n<h3 id=\"服务软件\"><a href=\"#服务软件\" class=\"headerlink\" title=\"服务软件\"></a>服务软件</h3><ul>\n<li>ssh 自带</li>\n<li>htop</li>\n<li>curl 访问网站 请求接口</li>\n<li>xterm</li>\n<li>Oh-my-zsh</li>\n<li>Tmux</li>\n<li>Metasploit Metasploit是一款开源的安全漏洞检测工具</li>\n<li>nautilus 命令行打开文件</li>\n<li>git</li>\n<li>zsh 命令行插件</li>\n<li>sysv-rc-conf</li>\n<li><a href=\"https://www.cnblogs.com/ishell/p/4546169.html\" target=\"_blank\" rel=\"noopener\">janus是⼀个⾮常好⽤的vim集成开发环境</a></li>\n<li>autojump 终端下多⽬录跳转神器</li>\n<li>cheat python 命令行函数提示工具</li>\n<li>apache2-utils ab压力测试</li>\n<li>xdg-open 命令行快速打开各类型文件</li>\n<li>imagemagick  apt-get install imagemagick    </li>\n<li>pandoc 文档转换工具</li>\n</ul>\n<h3 id=\"软件工具\"><a href=\"#软件工具\" class=\"headerlink\" title=\"软件工具\"></a>软件工具</h3><ul>\n<li><strong>gedit</strong> 编辑器 自带 gedit ./nginx.conf</li>\n<li>gvim 安装后  gvim ./nginx.conf</li>\n<li>sublime text 3</li>\n<li>vscode</li>\n<li>qq</li>\n<li>微信</li>\n<li>foxmail</li>\n<li>钉钉</li>\n<li>百度网盘</li>\n<li>Shadowsocks-Qt5</li>\n<li>XMind</li>\n<li>FileZilla</li>\n<li>有道云笔记网页版</li>\n<li>Virtual Box</li>\n<li>Synapse 快速搜索 工具  ctrl + space</li>\n<li>MongoDB Compass 不错，很强大</li>\n<li>Typora MD编写阅读能力非常棒,支持table 直接黏贴</li>\n<li>Zeal API 文档</li>\n<li><p>Remmina 远程桌面</p>\n</li>\n<li><p><a href=\"https://www.gitkraken.com/download/linux-deb\" target=\"_blank\" rel=\"noopener\">https://www.gitkraken.com/download/linux-deb</a></p>\n</li>\n<li><a href=\"http://blog.csdn.net/FungLeo/article/details/78439337\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/FungLeo/article/details/78439337</a><h2 id=\"系统更新\"><a href=\"#系统更新\" class=\"headerlink\" title=\"系统更新\"></a>系统更新</h2></li>\n</ul>\n<ol>\n<li>在设置更新选项时进行更新</li>\n<li>命令行方式更新<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update &amp;&amp; sudo apt-get dist-upgrade -y</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"https://www.cnblogs.com/gglin/p/7016454.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/gglin/p/7016454.html</a></p>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 截图</span></span><br><span class=\"line\">Ctrl + Alt + A</span><br><span class=\"line\"><span class=\"comment\"># 终端</span></span><br><span class=\"line\">Ctrl + Alt + T</span><br><span class=\"line\"><span class=\"comment\"># 雷神模式</span></span><br><span class=\"line\">Alt + F2</span><br><span class=\"line\"><span class=\"comment\"># 工作区</span></span><br><span class=\"line\">Win + -&gt; | &lt;-</span><br><span class=\"line\">Win + Shift + -&gt; | &lt;-</span><br></pre></td></tr></table></figure>\n<h2 id=\"Remmina-远程桌面\"><a href=\"#Remmina-远程桌面\" class=\"headerlink\" title=\"Remmina 远程桌面\"></a>Remmina 远程桌面</h2><h3 id=\"链接windows\"><a href=\"#链接windows\" class=\"headerlink\" title=\"链接windows\"></a>链接windows</h3><ol>\n<li>设置rdp协议</li>\n<li>设置远程ip地址</li>\n<li>设置全屏 + 设置设置鼠标<br><a href=\"http://blog.csdn.net/skykingf/article/details/71539237\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/skykingf/article/details/71539237</a></li>\n</ol>\n<h2 id=\"xdg-open-命令行快速打开各类型文件\"><a href=\"#xdg-open-命令行快速打开各类型文件\" class=\"headerlink\" title=\"xdg-open 命令行快速打开各类型文件\"></a>xdg-open 命令行快速打开各类型文件</h2><p>在Ubuntu下，当需要打开其他格式文件时，咱们通常做法是进入到文件所在的目录，双击打开，很影响效率。事实上，可以通过命令xdg-open打开这些格式文件，甚至是网页，像打开文件一样简单</p>\n<p>xdg-open { file | URL }<br>xdg-open { –help | –manual | –version } </p>\n<p>xdg-open la_isla_bonita.mp3<br>xdg-open <a href=\"http://baidu.com\" target=\"_blank\" rel=\"noopener\">http://baidu.com</a><br>已在现有的浏览器会话中创建新的窗口。 </p>\n<h2 id=\"apache2-utils\"><a href=\"#apache2-utils\" class=\"headerlink\" title=\"apache2-utils\"></a>apache2-utils</h2><p>sudo apt-get install -y apache2-utils<br>-n 1000 表示总请求数位1000<br>-c 表示并发用户数为10<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ab -n 1000 -c 100 http://127.0.0.1:8080/api/get</span><br><span class=\"line\">ab -n 1000 -c 100 http://127.0.0.1:8888/api</span><br><span class=\"line\"><span class=\"comment\"># 将内容转换为html</span></span><br><span class=\"line\">ab -n 10000 -c 1000 -t 1 -w http://127.0.0.1:8888/api &gt;&gt; 1.html</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/dragonflyer/p/6137514.html\" target=\"_blank\" rel=\"noopener\">apache ab测试命令详解</a><h2 id=\"pandoc-文件格式转换神器\"><a href=\"#pandoc-文件格式转换神器\" class=\"headerlink\" title=\"pandoc 文件格式转换神器\"></a>pandoc 文件格式转换神器</h2>Pandoc生成epub、html与在线电子书</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pandoc --version</span><br><span class=\"line\">pandoc --<span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\"># 转html格式</span></span><br><span class=\"line\">pandoc 01-chapter2.markdown -o chapter2.html -c Github.css</span><br><span class=\"line\"><span class=\"comment\"># 转word格式</span></span><br><span class=\"line\">pandoc 01-chapter2.markdown -o chapter2.docx -c Github.css</span><br><span class=\"line\"><span class=\"comment\"># 转pdf格式</span></span><br><span class=\"line\">pandoc  01-chapter2.markdown -o 01-chapter2.pdf --latex-engine=xelatex -V mainfont=heiti\\</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/jgm/pandoc\" target=\"_blank\" rel=\"noopener\">https://github.com/jgm/pandoc</a><br><a href=\"https://github.com/jgm/pandoc/releases/tag/2.1.1\" target=\"_blank\" rel=\"noopener\">https://github.com/jgm/pandoc/releases/tag/2.1.1</a></p>\n<h3 id=\"github-下载\"><a href=\"#github-下载\" class=\"headerlink\" title=\"github 下载\"></a>github 下载</h3><p>对于 Linux以及 macOS，则修改 /etc/hosts<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">219.76.4.4 s3.amazonaws.com</span><br><span class=\"line\">219.76.4.4 github-cloud.s3.amazonaws.com</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Cheat-：-一个实用-Linux-命令示例集合\"><a href=\"#Cheat-：-一个实用-Linux-命令示例集合\" class=\"headerlink\" title=\"Cheat ： 一个实用 Linux 命令示例集合\"></a>Cheat ： 一个实用 Linux 命令示例集合</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>cheat 允许你在命令行中创建和查看交互式的速查表cheatsheet。它旨在帮助提醒 *nix 系统管理员他们经常使用但还没频繁到会记住的命令的选项。<br>cheat 是使用 python 开发的，所以可以用 pip 来在你的系统上安装 cheat。<br>pip 是一个与 setuptools 捆绑在一起的 Python 模块，它是在 Linux 中安装 Python 包推荐的工具之一。</p>\n<p>对于 Debian/Ubuntu 用户，请使用 apt-get 命令或apt 命令来安装 pip。</p>\n<h3 id=\"如何使用-Cheat\"><a href=\"#如何使用-Cheat\" class=\"headerlink\" title=\"如何使用 Cheat\"></a>如何使用 Cheat</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install docopt pygments</span><br><span class=\"line\"><span class=\"comment\"># 命令来查看速查表</span></span><br><span class=\"line\">cheat tar</span><br><span class=\"line\"><span class=\"comment\"># 运行下面的命令查看可用的速查表。</span></span><br><span class=\"line\">$ cheat -l</span><br><span class=\"line\"><span class=\"comment\"># 进入帮助页面获取更多详细信息。</span></span><br><span class=\"line\">$ cheat -h</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><a href=\"https://linux.cn/article-9193-1.html\" target=\"_blank\" rel=\"noopener\">Cheat ： 一个实用 Linux 命令示例集合</a></p>\n</li>\n<li><p><a href=\"https://linux.cn/article-3760-1.html\" target=\"_blank\" rel=\"noopener\">Cheat</a>—— 给Linux初学者和管理员一个终极命令行”备忘单”</p>\n<h2 id=\"autojump\"><a href=\"#autojump\" class=\"headerlink\" title=\"autojump\"></a>autojump</h2><p>一个可以在 Linux 文件系统快速导航的高级 cd 命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">sudo apt-get install autojump</span><br><span class=\"line\"><span class=\"comment\"># 配置 为了使得 autojump 在 BASH shell 中永久有效，你需要运行下面的命令。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'. /usr/share/autojump/autojump.sh'</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"comment\"># 使用</span></span><br><span class=\"line\">$ j -v</span><br><span class=\"line\">$ autojump -v</span><br><span class=\"line\"><span class=\"comment\"># 跳到先前到过的目录 ‘/var/www‘ j ww 才能到什么目录</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>参考：<br><a href=\"https://linux.cn/article-5983-1.html\" target=\"_blank\" rel=\"noopener\">https://linux.cn/article-5983-1.html</a></p>\n<h2 id=\"超棒的离线文档阅读器：Zeal\"><a href=\"#超棒的离线文档阅读器：Zeal\" class=\"headerlink\" title=\"超棒的离线文档阅读器：Zeal\"></a>超棒的离线文档阅读器：Zeal</h2><p>一开始 Zeal 是不带 API 文档的, 需要你自己按需下载.<br>Zeal 可以定义全局快捷键, 另外还有大量的插件可以配合大多数编辑器以及 IDE 使用, 我用的是 Visual Studio Code, 搜索安装 Dash, 在编辑器内就可以直接打开 Zeal 查看 API . 默认快捷键是 Ctrl + H, 跟编辑器默认的替换快捷键有冲突, 自己可以修改.<br>下载：直接在应用商店下载<br>使用：<code>Tools &gt; Docsets &gt; Available</code></p>\n<p>参考：<br><a href=\"https://zealdocs.org/usage.html\" target=\"_blank\" rel=\"noopener\">https://zealdocs.org/usage.html</a><br><a href=\"http://blog.csdn.net/xlinsist/article/details/51014532\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/xlinsist/article/details/51014532</a><br><a href=\"https://zealdocs.org/\" target=\"_blank\" rel=\"noopener\">https://zealdocs.org/</a></p>\n<h2 id=\"sysv-rc-conf\"><a href=\"#sysv-rc-conf\" class=\"headerlink\" title=\"sysv-rc-conf\"></a>sysv-rc-conf</h2><p>sysv-rc-conf是一个强大的服务管理程序，群众的意见是sysv-rc-conf比chkconfig、rcconf好用。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装：</span></span><br><span class=\"line\">sudo apt-get install sysv-rc-conf</span><br><span class=\"line\"><span class=\"comment\"># 运行</span></span><br><span class=\"line\">sudo sysv-rc-conf</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://blog.csdn.net/gatieme/article/details/45251389\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/gatieme/article/details/45251389</a></p>\n<h2 id=\"zsh\"><a href=\"#zsh\" class=\"headerlink\" title=\"zsh\"></a>zsh</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install zsh</span><br><span class=\"line\">sh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置输入命令，按tab键</span></span><br><span class=\"line\"><span class=\"comment\"># 安装时，有可能导致，git 等失效！</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.zhihu.com/question/21418449\" target=\"_blank\" rel=\"noopener\">为什么说 zsh 是 shell 中的极品？</a></p>\n<p><a href=\"https://www.zhihu.com/question/21418449\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/21418449</a> </p>\n<h2 id=\"MongoDB-Compass\"><a href=\"#MongoDB-Compass\" class=\"headerlink\" title=\"MongoDB Compass\"></a>MongoDB Compass</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://downloads.mongodb.com/compass/mongodb-compass_1.6.0_amd64.deb;    </span><br><span class=\"line\">sudo dpkg -i mongodb-compass_1.6.0_amd64.deb</span><br></pre></td></tr></table></figure>\n<h2 id=\"phpStudy-for-Linux-不建议安装，会导致deepin的其他逐渐被删掉\"><a href=\"#phpStudy-for-Linux-不建议安装，会导致deepin的其他逐渐被删掉\" class=\"headerlink\" title=\"phpStudy for Linux 不建议安装，会导致deepin的其他逐渐被删掉\"></a>phpStudy for Linux 不建议安装，会导致deepin的其他逐渐被删掉</h2><h2 id=\"node-js\"><a href=\"#node-js\" class=\"headerlink\" title=\"node.js\"></a>node.js</h2><p>Ubuntu下安装使用nvm<br>/home/mohoo/.bashrc</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>安装成功后,<strong>需要关闭xshell</strong>，重新启动。nvm才会生效。</p>\n<p>查看nvm是否安装成功</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看nvm是否安装成功</span></span><br><span class=\"line\">root@linuxidc:~<span class=\"comment\"># command -v nvm</span></span><br><span class=\"line\">nvm</span><br><span class=\"line\"><span class=\"comment\"># 查看Java命令</span></span><br><span class=\"line\"><span class=\"built_in\">command</span> -v java</span><br><span class=\"line\">/usr/bin/java</span><br><span class=\"line\"><span class=\"comment\"># nvm 安装node.js </span></span><br><span class=\"line\">nvm install v9.3.0</span><br><span class=\"line\"><span class=\"comment\"># node.js 版本存放位置</span></span><br><span class=\"line\">/home/mohoo/.nvm/versions</span><br></pre></td></tr></table></figure>\n<h3 id=\"npm-install-安装模块\"><a href=\"#npm-install-安装模块\" class=\"headerlink\" title=\"npm install 安装模块\"></a>npm install 安装模块</h3><ul>\n<li>npm install -g yarn pm2 http-server eslint</li>\n<li>npm install -g gitbook gitbook-cli</li>\n<li>npm install -g webpack gulp parcel-bundler</li>\n<li>npm install -g nodeppt</li>\n<li>npm install -g hexo hexo-cli</li>\n<li>npm install -g phantomjs browsersync</li>\n</ul>\n<h2 id=\"golang\"><a href=\"#golang\" class=\"headerlink\" title=\"golang\"></a>golang</h2><h3 id=\"安装及配置\"><a href=\"#安装及配置\" class=\"headerlink\" title=\"安装及配置\"></a>安装及配置</h3><p>下载压缩包 go1.9.2.linux-amd64.tar.gz<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.golangtc.com/static/go/1.9.2/go1.9.2.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p>解压该文件，由于默认的go路径，在/usr/local下， 所以用如下命令，解压创建/usr/local/go<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -C /usr/<span class=\"built_in\">local</span> -xzf go1.9.2.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p>配置环境变量，<code>sudo vim /etc/profile</code>下，添加对应的goroot和gopath的配置环境<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 环境目录</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOROOT=/usr/<span class=\"built_in\">local</span>/go</span><br><span class=\"line\"><span class=\"comment\">## 工作目录</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=/home/mohoo/data/godev  </span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$GOROOT</span>/bin</span><br></pre></td></tr></table></figure></p>\n<p>之后，<code>source /etc/profile</code> 使得其配置文件有效.</p>\n<p>检查go的版本，<code>$ go version</code></p>\n<h3 id=\"编辑文件\"><a href=\"#编辑文件\" class=\"headerlink\" title=\"编辑文件\"></a>编辑文件</h3><p>/home/mohoo/data/godev/src/helloword.go<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123; </span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Hello, world.\\n\"</span>) </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"运行代码\"><a href=\"#运行代码\" class=\"headerlink\" title=\"运行代码\"></a>运行代码</h3><ol>\n<li>go run helloworld.go 直接可以看到结果</li>\n<li>go bulid helloworld.go，生成了helloworld的文件, ./helloworld 直接执行，输出了 Hello world</li>\n</ol>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p><a href=\"https://www.cnblogs.com/unqiang/p/6594451.html\" target=\"_blank\" rel=\"noopener\">linux下安装go</a><br><a href=\"http://blog.csdn.net/u011054678/article/details/72877465\" target=\"_blank\" rel=\"noopener\">Linux上go的安装配置以及简单使用</a></p>\n<h2 id=\"vscode\"><a href=\"#vscode\" class=\"headerlink\" title=\"vscode\"></a>vscode</h2><p>在linux系统中安装VSCode(Visual Studio Code)</p>\n<h3 id=\"方法一、从deepin-官网下载\"><a href=\"#方法一、从deepin-官网下载\" class=\"headerlink\" title=\"方法一、从deepin 官网下载\"></a>方法一、从deepin 官网下载</h3><h3 id=\"方法二、从软件中心，输入Visual-Studio-Code，下载安装\"><a href=\"#方法二、从软件中心，输入Visual-Studio-Code，下载安装\" class=\"headerlink\" title=\"方法二、从软件中心，输入Visual Studio Code，下载安装\"></a>方法二、从软件中心，输入<code>Visual Studio Code</code>，下载安装</h3><h3 id=\"方法三、下载源码，安装一下\"><a href=\"#方法三、下载源码，安装一下\" class=\"headerlink\" title=\"方法三、下载源码，安装一下\"></a>方法三、下载源码，安装一下</h3><ol>\n<li><p>从官网下载压缩包(话说下载下来解压就直接可以运行了咧,都不需要make)<br>访问Visual Studio Code官网 <a href=\"https://code.visualstudio.com/docs?dv=linux64\" target=\"_blank\" rel=\"noopener\">https://code.visualstudio.com/docs?dv=linux64</a> 即可下载最新版本</p>\n</li>\n<li><p>解压 ,如果文件名不对,可能解压不出来的(扩展名:tar.gz)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar jxcv code-stable-code_1.7.2-1479766213_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后移动到 /usr/local/ 目录</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv VSCode-linux-x64 /usr/<span class=\"built_in\">local</span>/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可能还需要给可执行的权限, 然后就已经可以运行了</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /usr/<span class=\"built_in\">local</span>/VSCode-linux-x64/code</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复制一个VScode图标文件到 /usr/share/icons/ 目录(后面会有用)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/<span class=\"built_in\">local</span>/VSCode-linux-x64/resources/app/resources/linux/code.png /usr/share/icons/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建启动器, 在/usr/share/applications/ 目录, 也可以将它复制到桌面目录直接在中断使用命令: </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/share/applications/VSCode.desktop</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后输入以下文本:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Name=Visual Studio Code</span><br><span class=\"line\">Comment=Multi-platform code editor for Linux</span><br><span class=\"line\">Exec=/usr/local/VSCode-linux-x64/code</span><br><span class=\"line\">Icon=/usr/share/icons/code.png</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">StartupNotify=true</span><br><span class=\"line\">Categories=TextEditor;Development;Utility;</span><br><span class=\"line\">MimeType=text/plain;</span><br></pre></td></tr></table></figure>\n<p>保存后退出, 然后可以复制到桌面:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/share/applications/VSCode.desktop ~/桌面/</span><br></pre></td></tr></table></figure></p>\n<p>之后 就会发现 桌面和 应用程序菜单都有了 VSCode的快捷方式了</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/lzpong/p/6145511.html\" target=\"_blank\" rel=\"noopener\">在linux系统中安装VSCode(Visual Studio Code)</a></li>\n</ul>\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><p>1、卸载老版本，较老版本的Docker被称为docker或docker-engine。如果这些已安装，请卸载它们以及关联的依赖关系。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove docker \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-selinux \\</span><br><span class=\"line\">                  docker-engine</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><p>安装源切换为：网易云<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 建议使用方式，直接最新版本</span></span><br><span class=\"line\">wget -qO- https://get.docker.com/ | sh</span><br><span class=\"line\">sudo usermod -aG docker mohoo</span><br><span class=\"line\"><span class=\"comment\"># apt-get install -y docker-engine</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动docker\"><a href=\"#启动docker\" class=\"headerlink\" title=\"启动docker\"></a>启动docker</h3><p>问题：<br>Cannot connect to the Docker daemon. Is the docker daemon running on this host?<br>原因：权限不够，使用sudo docker ps 就可以了<br>参考：</p>\n<p><a href=\"http://www.jb51.net/article/94801.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/article/94801.htm</a><br><a href=\"https://www.cnblogs.com/lxjshuju/p/7183689.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lxjshuju/p/7183689.html</a></p>\n<h2 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mysql 安装</span></span><br><span class=\"line\">sudo apt-get install -y mysql-server</span><br><span class=\"line\"></span><br><span class=\"line\">mysql -V</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动mysql命令(其它关闭，重启等功能只需将start换成相应的stop,restart等字母即可)：</span></span><br><span class=\"line\">sudo service mysql start </span><br><span class=\"line\"></span><br><span class=\"line\">mysql -u用户名 -p密码</span><br><span class=\"line\"><span class=\"comment\"># 设置 root的密码</span></span><br><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\">root root</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.jb51.net/article/84399.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/article/84399.htm</a></p>\n<h2 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h2><p>MongoDB 是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p>\n<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p>\n<p>它的特点是高性能、易部署、易使用，存储数据非常方便。主要功能特性有：</p>\n<ul>\n<li>面向集合存储，易存储对象类型的数据。</li>\n<li>模式自由。</li>\n<li>支持动态查询。</li>\n<li>支持完全索引，包含内部对象。</li>\n<li>支持查询。</li>\n<li>支持复制和故障恢复。</li>\n<li>使用高效的二进制数据存储，包括大型对象（如视频等）。</li>\n<li>自动处理碎片，以支持云计算层次的扩展性。</li>\n<li>支持RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</li>\n<li>文件存储格式为BSON（一种JSON的扩展）。</li>\n<li>可通过网络访问。</li>\n</ul>\n<p>###　下载完安装包，并解压 tgz（以下演示的是 64 位 Linux上的安装） 。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz    # 下载</span><br><span class=\"line\">tar -zxvf mongodb-linux-x86_64-3.0.6.tgz                                   # 解压</span><br><span class=\"line\"></span><br><span class=\"line\">mv  mongodb-linux-x86_64-3.0.6/ /usr/local/mongodb                         # 将解压包拷贝到指定目录</span><br></pre></td></tr></table></figure></p>\n<p>###　MongoDB 的可执行文件位于 bin 目录下，所以可以将其添加到 PATH 路径中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=/usr/local/mongodb/bin:$PATH</span><br></pre></td></tr></table></figure></p>\n<p>###　创建数据库目录<br>MongoDB的数据存储在data目录的db目录下，但是这个目录在安装过程不会自动创建，所以你需要手动创建data目录，并在data目录中创建db目录。<br>以下实例中我们将data目录创建于根目录下(/)。<br>注意：/data/db 是 MongoDB 默认的启动的数据库路径(–dbpath)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/db</span><br></pre></td></tr></table></figure></p>\n<p>###　命令行中运行 MongoDB 服务<br>你可以再命令行中执行mongo安装目录中的bin目录执行mongod命令来启动mongdb服务。<br>注意：如果你的数据库目录不是/data/db，可以通过 –dbpath 来指定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/mongodb/bin/</span><br><span class=\"line\">/usr/local/mongodb/bin/mongod --dbpath /home/mohoo/data/mongodb</span><br></pre></td></tr></table></figure>\n<h3 id=\"自启动配置\"><a href=\"#自启动配置\" class=\"headerlink\" title=\"自启动配置\"></a>自启动配置</h3><p>sudo vim /etc/rc.local</p>\n<h2 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h2><h3 id=\"安装-Redis\"><a href=\"#安装-Redis\" class=\"headerlink\" title=\"安装 Redis\"></a>安装 Redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo apt-get update</span><br><span class=\"line\">$sudo apt-get install redis-server</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动-Redis\"><a href=\"#启动-Redis\" class=\"headerlink\" title=\"启动 Redis\"></a>启动 Redis</h3><p>$ redis-server</p>\n<h3 id=\"查看-redis-是否启动？\"><a href=\"#查看-redis-是否启动？\" class=\"headerlink\" title=\"查看 redis 是否启动？\"></a>查看 redis 是否启动？</h3><p>$ redis-cli<br>以上命令将打开以下终端：<br>redis 127.0.0.1:6379&gt;</p>\n<h2 id=\"php\"><a href=\"#php\" class=\"headerlink\" title=\"php\"></a>php</h2><p>nginx 本地配置不太清楚怎么配置</p>\n<p>docker pull registry.docker-cn.com/library/ubuntu:16.04</p>\n<p>解决方案：使用docker<br><a href=\"http://www.51testing.com/html/87/15091687-3649846.html\" target=\"_blank\" rel=\"noopener\">http://www.51testing.com/html/87/15091687-3649846.html</a><br><a href=\"http://www.runoob.com/docker/docker-install-php.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/docker/docker-install-php.html</a></p>\n<h2 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h2><p>###　下载<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tar.xz</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装及配置-1\"><a href=\"#安装及配置-1\" class=\"headerlink\" title=\"安装及配置\"></a>安装及配置</h3><ol>\n<li>打开WEB浏览器访问<a href=\"http://www.python.org/download/\" target=\"_blank\" rel=\"noopener\">http://www.python.org/download/</a></li>\n<li>选择适用于Unix/Linux的源码压缩包。</li>\n<li>下载及解压压缩包。</li>\n<li>如果你需要自定义一些选项修改Modules/Setup</li>\n<li>执行 ./configure 脚本</li>\n<li>make</li>\n<li>make install</li>\n<li>执行以上操作后，Python会安装在 /usr/local/bin 目录中，Python库安装在/usr/local/lib/pythonXX，XX为你使用的Python的版本号。<h2 id=\"java-默认安装了\"><a href=\"#java-默认安装了\" class=\"headerlink\" title=\"java 默认安装了\"></a>java 默认安装了</h2><a href=\"https://www.cnblogs.com/yuanbo123/p/5819564.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yuanbo123/p/5819564.html</a></li>\n</ol>\n<h3 id=\"下载资源\"><a href=\"#下载资源\" class=\"headerlink\" title=\"下载资源\"></a>下载资源</h3><p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>\n<h3 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h3><p>tar -zxvf jdk-8u102-linux-x64.tar.gz</p>\n<h3 id=\"移动目录\"><a href=\"#移动目录\" class=\"headerlink\" title=\"移动目录\"></a>移动目录</h3><p>sudo mv jdk1.8.0_161/ /usr/local/java</p>\n<h3 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h3><p>sudo vim /etc/profile<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/local/java/</span><br><span class=\"line\">export JRE_HOME=/usr/local/java/jre</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"刷新配置\"><a href=\"#刷新配置\" class=\"headerlink\" title=\"刷新配置\"></a>刷新配置</h3><p>source /etc/profile</p>\n<h3 id=\"校验\"><a href=\"#校验\" class=\"headerlink\" title=\"校验\"></a>校验</h3><p>java</p>\n<h2 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载源文件</span></span><br><span class=\"line\">wget -c https://nginx.org/download/nginx-1.10.1.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -zxvf nginx-1.10.1.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.10.1</span><br><span class=\"line\"><span class=\"comment\"># configure</span></span><br><span class=\"line\">./configure --conf-path=/home/mohoo/data/Project/work/nginx/nginx.conf</span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br><span class=\"line\"><span class=\"comment\"># 查找安装路径：</span></span><br><span class=\"line\">whereis nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动、停止nginx\"><a href=\"#启动、停止nginx\" class=\"headerlink\" title=\"启动、停止nginx\"></a>启动、停止nginx</h3><p>使用sudo 权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 校验nginx 配置信息</span></span><br><span class=\"line\">./nginx -t </span><br><span class=\"line\"><span class=\"comment\"># 启动nginx</span></span><br><span class=\"line\">./nginx  </span><br><span class=\"line\"><span class=\"comment\"># 配置信息重载</span></span><br><span class=\"line\">./nginx -s reload nginx</span><br><span class=\"line\">curl http://localhost</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx-自定义配置\"><a href=\"#nginx-自定义配置\" class=\"headerlink\" title=\"nginx 自定义配置\"></a>nginx 自定义配置</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自定义配置（不推荐）安装时进行配置,自定义配置</span></span><br><span class=\"line\">./configure --conf-path=/usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"comment\"># 配置信息</span></span><br><span class=\"line\">./configure \\</span><br><span class=\"line\">--prefix=/usr/<span class=\"built_in\">local</span>/nginx \\</span><br><span class=\"line\">--conf-path=/usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf \\</span><br><span class=\"line\">--pid-path=/usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.pid \\</span><br><span class=\"line\">--lock-path=/var/lock/nginx.lock \\</span><br><span class=\"line\">--error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log \\</span><br><span class=\"line\">--http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log \\</span><br><span class=\"line\">--with-http_gzip_static_module \\</span><br><span class=\"line\">--http-client-body-temp-path=/var/temp/nginx/client \\</span><br><span class=\"line\">--http-proxy-temp-path=/var/temp/nginx/proxy \\</span><br><span class=\"line\">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \\</span><br><span class=\"line\">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\</span><br><span class=\"line\">--http-scgi-temp-path=/var/temp/nginx/scgi</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    server_tokens  off;  </span><br><span class=\"line\">    fastcgi_intercept_errors on;</span><br><span class=\"line\">    log_format logstash &apos;$http_host $remote_addr - $remote_user [$time_local] &quot;$request&quot; $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;http_x_forwarded_for&quot; $request_time $upstream_response_time&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">\taccess_log logs/access.log logstash;</span><br><span class=\"line\">   \taccess_log  /data/wwwlog/access.log  logstash;</span><br><span class=\"line\">\terror_log  /data/wwwlog/error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">   geo $white_ip &#123;</span><br><span class=\"line\">        #ranges;</span><br><span class=\"line\">        default no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    include gzip.conf;    </span><br><span class=\"line\">    keepalive_timeout           60 20;</span><br><span class=\"line\">    client_header_timeout       3m;</span><br><span class=\"line\">    client_body_timeout         3m;</span><br><span class=\"line\">    send_timeout                3m;</span><br><span class=\"line\"></span><br><span class=\"line\">    client_header_buffer_size           16k;</span><br><span class=\"line\">    large_client_header_buffers         4 32k;</span><br><span class=\"line\">    server_names_hash_max_size          512;</span><br><span class=\"line\">    server_names_hash_bucket_size       64;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    tcp_nopush      on;</span><br><span class=\"line\">    tcp_nodelay     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    limit_req_zone $binary_remote_addr zone=http:10m rate=100r/s;</span><br><span class=\"line\">    limit_req_zone $http_user_agent zone=useragenttrack:10m rate=100r/s;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">\t    root /data/wwwroot/html;</span><br><span class=\"line\">        index index.html index.htm;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        error_page  404              /404.html;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /design/html/ &#123;</span><br><span class=\"line\">            root /home/data/graduation-design/client/;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /mwechat&#123;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:8765;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录<br><a href=\"https://www.cnblogs.com/hdnav/p/7941165.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/hdnav/p/7941165.html</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 访问登录页面</span></span><br><span class=\"line\">curl http://localhost/design/html/login.html</span><br><span class=\"line\"><span class=\"comment\"># 访问用户接口</span></span><br><span class=\"line\">curl http://localhost/design/users/info</span><br></pre></td></tr></table></figure>\n<h3 id=\"多捣腾捣腾就可以了解很多之前想的东西\"><a href=\"#多捣腾捣腾就可以了解很多之前想的东西\" class=\"headerlink\" title=\"多捣腾捣腾就可以了解很多之前想的东西\"></a>多捣腾捣腾就可以了解很多之前想的东西</h3><p>很多人,很多知识点是相通的,可以借鉴别人的知识体系,查漏补缺.</p>\n<h2 id=\"sublime-text\"><a href=\"#sublime-text\" class=\"headerlink\" title=\"sublime_text\"></a>sublime_text</h2><p><a href=\"http://www.sublimetext.com/docs/3/linux_repositories.html\" target=\"_blank\" rel=\"noopener\">http://www.sublimetext.com/docs/3/linux_repositories.html</a><br><a href=\"https://jingyan.baidu.com/article/e5c39bf5c840d039d7603336.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/e5c39bf5c840d039d7603336.html</a></p>\n<p>apt<br>Install the GPG key:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n<p>Ensure apt is set up to work with https sources:</p>\n<p>sudo apt-get install apt-transport-https<br>Select the channel to use:</p>\n<p>Stable<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb https://download.sublimetext.com/ apt/stable/\"</span> | sudo tee /etc/apt/sources.list.d/sublime-text.list</span><br></pre></td></tr></table></figure></p>\n<p>Dev<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb https://download.sublimetext.com/ apt/dev/\"</span> | sudo tee /etc/apt/sources.list.d/sublime-text.list</span><br></pre></td></tr></table></figure></p>\n<p>Update apt sources and install Sublime Text</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install sublime-text</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/shenckicc/p/6032998.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/shenckicc/p/6032998.html</a></p>\n<p>解决无法输入中文：</p>\n<p><a href=\"http://blog.csdn.net/cywosp/article/details/32350899\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/cywosp/article/details/32350899</a></p>\n<h2 id=\"php-1\"><a href=\"#php-1\" class=\"headerlink\" title=\"php\"></a>php</h2><h3 id=\"系统性能配置优化\"><a href=\"#系统性能配置优化\" class=\"headerlink\" title=\"系统性能配置优化\"></a>系统性能配置优化</h3><ul>\n<li>设置&gt; 个性化 &gt; 开启窗口特效  主要作用，边框圆角美化，背景设置为毛玻璃，会导致不太美观</li>\n<li>开启高效模式</li>\n<li>热区优化</li>\n<li>模式选择:高效模式,时尚模式:不习惯</li>\n<li>大小设置为小</li>\n<li>系统注销后，长时间不处理，系统无法唤起。</li>\n<li>代码存放在home下面，不需要反复授权<br><a href=\"https://lanseyujie.com/post/deepin-optimization-techniques.html\" target=\"_blank\" rel=\"noopener\">https://lanseyujie.com/post/deepin-optimization-techniques.html</a><br><a href=\"https://lanseyujie.com/post/deepin-install-shadowsocks.html\" target=\"_blank\" rel=\"noopener\">https://lanseyujie.com/post/deepin-install-shadowsocks.html</a></li>\n</ul>\n<ul>\n<li><a href=\"https://www.cnblogs.com/felixzh/p/5110939.html\" target=\"_blank\" rel=\"noopener\">ubuntu 安装 GCC 和 G++ C++ 开发环境</a></li>\n</ul>\n<h3 id=\"linux-场景\"><a href=\"#linux-场景\" class=\"headerlink\" title=\"linux 场景\"></a>linux 场景</h3><ol>\n<li>可以安装在各种计算机硬件设备中,手机,平板电脑,<strong>路由器</strong>,视频游戏控制台,台式计算机,大型机和超级计算机</li>\n<li>严格来讲，Linux这个词本身只表示Linux内核，但实际上人们已经习惯了用Linux来形容整个基于Linux内核，并且使用GNU 工程各种工具和数据库的操作系统。</li>\n</ol>\n<h3 id=\"现在几乎所有开源的系统都是基于linux-unix-系统\"><a href=\"#现在几乎所有开源的系统都是基于linux-unix-系统\" class=\"headerlink\" title=\"现在几乎所有开源的系统都是基于linux/unix 系统\"></a>现在几乎所有开源的系统都是基于linux/unix 系统</h3><ol>\n<li>深入学习这个还是非常有必要的</li>\n<li>到了知其然,知其所以然的时候</li>\n<li>很多软件在linux 都能得到很好的支持.</li>\n<li>服务器端基本上都是Linux ,如果可以在本地开发环境就原生拥有这些特性,那么后续的开发维护都比较方便</li>\n<li>docker等服务都是基于Linux系统,1. 是开源的 2. win 使用docker环境比较麻烦,不如直接使用docker</li>\n<li>linux 的配置命令 可以脚本化,方便于维护.</li>\n<li>在接下来的一段时间里,我争取使用linux 简单而强大,配置完成后可以很方便的进行配置维护</li>\n<li>在window下,你配置的东西,每次做系统,都会变更很多东西,这些东西不能同步,而Linux不同,可以脚本化.</li>\n<li>linux 下默认的编辑器是vim 那么可以有意识的去尝试使用 </li>\n<li>尝试deepin 系统的有点和不足 尝试在linux 下进行办公</li>\n</ol>\n<h3 id=\"deepin-优点\"><a href=\"#deepin-优点\" class=\"headerlink\" title=\"deepin 优点\"></a>deepin 优点</h3><p>linux:应用范围更广, 移动端:Android ,服务器端:几乎占据绝对主流,</p>\n<ol>\n<li>命令行终端不错 支持很多特性 ssh 多屏幕 不需要使用第三方的东西了</li>\n<li>输入法也还可以,不会让人适应很长时间</li>\n<li>性能还可以，至少 windows 系统没有那么流畅。</li>\n<li>开发状态和服务器状态保持一致，减少平台切换的麻烦</li>\n<li>针对自己常用到的场景，已经妥妥的支持了</li>\n<li>入门比较轻松，切换成本比较低。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"deepin-深度系统\"><a href=\"#deepin-深度系统\" class=\"headerlink\" title=\"deepin 深度系统\"></a>deepin 深度系统</h1><p>一个全新的简单、易用、美观的 Linux 操作系统。</p>\n<ul>\n<li>国产桌面系统，对中国用户做了很多优化</li>\n<li>使用的时候，可以不折腾，能够快速的上手。</li>\n<li>首先因为基于 Debian，软件源和 ppa 不是太偏门的基本都有。</li>\n<li>和 CrossOver 合作，所以 QQ 的体验也不错。不太懂 Linux 的同学终于不用苦于给 Wine 打补丁/升级之类的操作了。一些小小的软件通过 CrossOver 也能在 Deepin 上跑跑（看运气）。然而我是作为一个程序员的角度看的，Deepin 真的已经很易用了。</li>\n<li>Deepin 的历史可以追溯到 2004年，其前身 Hiweed Linux 是中国第一个基于 Debian的本地化衍生版，并提供轻量级的可用LiveCD，旨在创造<h2 id=\"系统安装\"><a href=\"#系统安装\" class=\"headerlink\" title=\"系统安装\"></a>系统安装</h2></li>\n</ul>\n<ol>\n<li>需要一个优盘</li>\n<li>下载最新镜像deepin-15.5-amd64.iso</li>\n<li>启动优盘，设置U盘启动</li>\n<li>安装部署系统，完成之后，去掉优盘</li>\n<li>重启进入系统<h2 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h2><h3 id=\"安装方式\"><a href=\"#安装方式\" class=\"headerlink\" title=\"安装方式\"></a>安装方式</h3></li>\n</ol>\n<ul>\n<li>可以通过 apt-get install 命令，安装各种 linux 上的软件</li>\n<li>可以通过官方自带的 <strong>深度商店</strong> 安装常见的软件</li>\n<li>获取源码编译安装</li>\n<li>支持deb安装包安装 code_1.20.0-1518023506_amd64.deb</li>\n<li>可以通过 CrossOver 安装 windows 软件</li>\n<li>wget -qO- <a href=\"https://get.docker.com/\" target=\"_blank\" rel=\"noopener\">https://get.docker.com/</a> | sh 下载安装方式</li>\n</ul>\n<h3 id=\"安装问题\"><a href=\"#安装问题\" class=\"headerlink\" title=\"安装问题\"></a>安装问题</h3><ol>\n<li>apt-get install 安装时，需要阅读内容，删除也是要注意的</li>\n<li>删除或安装时，有时候会删除一些<strong>其他有用的模块</strong></li>\n</ol>\n<h4 id=\"深度软件中心\"><a href=\"#深度软件中心\" class=\"headerlink\" title=\"深度软件中心\"></a>深度软件中心</h4><p>深度软件中心（Software Center）是Linux平台通用的软件管理中心，安装软件。</p>\n<h4 id=\"CrossOver-安装-windows-软件\"><a href=\"#CrossOver-安装-windows-软件\" class=\"headerlink\" title=\"CrossOver 安装 windows 软件\"></a>CrossOver 安装 windows 软件</h4><p>home目录隐藏的.cxoffice目录下，在你安装的容器名里<br>目录位置/home/mohoo/.cxoffice</p>\n<h4 id=\"wine-安装程序目录\"><a href=\"#wine-安装程序目录\" class=\"headerlink\" title=\"wine 安装程序目录\"></a>wine 安装程序目录</h4><p>百度云盘：<br>/home/mohoo/.deepinwine/Deepin-BaiduNetDisk/dosdevices/c:/BaiduNetdiskDownload</p>\n<h4 id=\"deb-安装包\"><a href=\"#deb-安装包\" class=\"headerlink\" title=\"deb 安装包\"></a>deb 安装包</h4><p>Debian包是Unixar的标准归档，将包文件信息以及包内容，经过gzip和tar打包而成。<br>处理这些包的经典程序是dpkg，经常是通过Debian的apt-get来运作。<br>通过<strong>Alien</strong>工具，可以将deb包转换成rpm、tar.gz格式。<br>deb包在Linux操作系统中类似于windows中的软件包（exe)，几乎不需要什么复杂的编译即可通过鼠标点击安装使用。此外,deb广泛应用于越狱后iOS软件及MeeGo（含Maemo软件）中。</p>\n<p>deb 格式是 Debian 系统(包含 Debian 和 Ubuntu )专属安装包格式，配合 APT 软件管理系统，成为了当前在 Linux 下非常流行的一种安装包。进入 2.x 时代之后有 Cydia 作者 Jay Freeman（saurik） 移植到 iPhone 平台上，一起的还有 APT 软件管理系统。</p>\n<p>deepin 源于 Debian<br>dpkg 是Debian Package的简写，是为Debian 专门开发的套件管理系统，方便软件的安装、更新及移除。<br>所有源自Debian的Linux发行版都使用dpkg，例如Ubuntu、Knoppix 等。</p>\n<h4 id=\"dep-平台\"><a href=\"#dep-平台\" class=\"headerlink\" title=\"dep 平台\"></a>dep 平台</h4><ul>\n<li>Debian</li>\n<li>Ubuntu</li>\n<li>Deepin</li>\n<li>Knoppix</li>\n<li>越狱后iOS软件及MeeGo:苹果iPhone应用格式   </li>\n</ul>\n<ul>\n<li><a href=\"https://baike.baidu.com/item/deb/7025498?fr=aladdin#1\" target=\"_blank\" rel=\"noopener\">百度经验</a><h3 id=\"开发环境\"><a href=\"#开发环境\" class=\"headerlink\" title=\"开发环境\"></a>开发环境</h3></li>\n</ul>\n<ul>\n<li>golang</li>\n<li>docker </li>\n<li>mysql</li>\n<li>mongodb</li>\n<li>redis</li>\n<li>php</li>\n<li>nginx</li>\n<li>python</li>\n<li>java</li>\n</ul>\n<h3 id=\"服务软件\"><a href=\"#服务软件\" class=\"headerlink\" title=\"服务软件\"></a>服务软件</h3><ul>\n<li>ssh 自带</li>\n<li>htop</li>\n<li>curl 访问网站 请求接口</li>\n<li>xterm</li>\n<li>Oh-my-zsh</li>\n<li>Tmux</li>\n<li>Metasploit Metasploit是一款开源的安全漏洞检测工具</li>\n<li>nautilus 命令行打开文件</li>\n<li>git</li>\n<li>zsh 命令行插件</li>\n<li>sysv-rc-conf</li>\n<li><a href=\"https://www.cnblogs.com/ishell/p/4546169.html\" target=\"_blank\" rel=\"noopener\">janus是⼀个⾮常好⽤的vim集成开发环境</a></li>\n<li>autojump 终端下多⽬录跳转神器</li>\n<li>cheat python 命令行函数提示工具</li>\n<li>apache2-utils ab压力测试</li>\n<li>xdg-open 命令行快速打开各类型文件</li>\n<li>imagemagick  apt-get install imagemagick    </li>\n<li>pandoc 文档转换工具</li>\n</ul>\n<h3 id=\"软件工具\"><a href=\"#软件工具\" class=\"headerlink\" title=\"软件工具\"></a>软件工具</h3><ul>\n<li><strong>gedit</strong> 编辑器 自带 gedit ./nginx.conf</li>\n<li>gvim 安装后  gvim ./nginx.conf</li>\n<li>sublime text 3</li>\n<li>vscode</li>\n<li>qq</li>\n<li>微信</li>\n<li>foxmail</li>\n<li>钉钉</li>\n<li>百度网盘</li>\n<li>Shadowsocks-Qt5</li>\n<li>XMind</li>\n<li>FileZilla</li>\n<li>有道云笔记网页版</li>\n<li>Virtual Box</li>\n<li>Synapse 快速搜索 工具  ctrl + space</li>\n<li>MongoDB Compass 不错，很强大</li>\n<li>Typora MD编写阅读能力非常棒,支持table 直接黏贴</li>\n<li>Zeal API 文档</li>\n<li><p>Remmina 远程桌面</p>\n</li>\n<li><p><a href=\"https://www.gitkraken.com/download/linux-deb\" target=\"_blank\" rel=\"noopener\">https://www.gitkraken.com/download/linux-deb</a></p>\n</li>\n<li><a href=\"http://blog.csdn.net/FungLeo/article/details/78439337\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/FungLeo/article/details/78439337</a><h2 id=\"系统更新\"><a href=\"#系统更新\" class=\"headerlink\" title=\"系统更新\"></a>系统更新</h2></li>\n</ul>\n<ol>\n<li>在设置更新选项时进行更新</li>\n<li>命令行方式更新<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update &amp;&amp; sudo apt-get dist-upgrade -y</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"https://www.cnblogs.com/gglin/p/7016454.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/gglin/p/7016454.html</a></p>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 截图</span></span><br><span class=\"line\">Ctrl + Alt + A</span><br><span class=\"line\"><span class=\"comment\"># 终端</span></span><br><span class=\"line\">Ctrl + Alt + T</span><br><span class=\"line\"><span class=\"comment\"># 雷神模式</span></span><br><span class=\"line\">Alt + F2</span><br><span class=\"line\"><span class=\"comment\"># 工作区</span></span><br><span class=\"line\">Win + -&gt; | &lt;-</span><br><span class=\"line\">Win + Shift + -&gt; | &lt;-</span><br></pre></td></tr></table></figure>\n<h2 id=\"Remmina-远程桌面\"><a href=\"#Remmina-远程桌面\" class=\"headerlink\" title=\"Remmina 远程桌面\"></a>Remmina 远程桌面</h2><h3 id=\"链接windows\"><a href=\"#链接windows\" class=\"headerlink\" title=\"链接windows\"></a>链接windows</h3><ol>\n<li>设置rdp协议</li>\n<li>设置远程ip地址</li>\n<li>设置全屏 + 设置设置鼠标<br><a href=\"http://blog.csdn.net/skykingf/article/details/71539237\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/skykingf/article/details/71539237</a></li>\n</ol>\n<h2 id=\"xdg-open-命令行快速打开各类型文件\"><a href=\"#xdg-open-命令行快速打开各类型文件\" class=\"headerlink\" title=\"xdg-open 命令行快速打开各类型文件\"></a>xdg-open 命令行快速打开各类型文件</h2><p>在Ubuntu下，当需要打开其他格式文件时，咱们通常做法是进入到文件所在的目录，双击打开，很影响效率。事实上，可以通过命令xdg-open打开这些格式文件，甚至是网页，像打开文件一样简单</p>\n<p>xdg-open { file | URL }<br>xdg-open { –help | –manual | –version } </p>\n<p>xdg-open la_isla_bonita.mp3<br>xdg-open <a href=\"http://baidu.com\" target=\"_blank\" rel=\"noopener\">http://baidu.com</a><br>已在现有的浏览器会话中创建新的窗口。 </p>\n<h2 id=\"apache2-utils\"><a href=\"#apache2-utils\" class=\"headerlink\" title=\"apache2-utils\"></a>apache2-utils</h2><p>sudo apt-get install -y apache2-utils<br>-n 1000 表示总请求数位1000<br>-c 表示并发用户数为10<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ab -n 1000 -c 100 http://127.0.0.1:8080/api/get</span><br><span class=\"line\">ab -n 1000 -c 100 http://127.0.0.1:8888/api</span><br><span class=\"line\"><span class=\"comment\"># 将内容转换为html</span></span><br><span class=\"line\">ab -n 10000 -c 1000 -t 1 -w http://127.0.0.1:8888/api &gt;&gt; 1.html</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/dragonflyer/p/6137514.html\" target=\"_blank\" rel=\"noopener\">apache ab测试命令详解</a><h2 id=\"pandoc-文件格式转换神器\"><a href=\"#pandoc-文件格式转换神器\" class=\"headerlink\" title=\"pandoc 文件格式转换神器\"></a>pandoc 文件格式转换神器</h2>Pandoc生成epub、html与在线电子书</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pandoc --version</span><br><span class=\"line\">pandoc --<span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\"># 转html格式</span></span><br><span class=\"line\">pandoc 01-chapter2.markdown -o chapter2.html -c Github.css</span><br><span class=\"line\"><span class=\"comment\"># 转word格式</span></span><br><span class=\"line\">pandoc 01-chapter2.markdown -o chapter2.docx -c Github.css</span><br><span class=\"line\"><span class=\"comment\"># 转pdf格式</span></span><br><span class=\"line\">pandoc  01-chapter2.markdown -o 01-chapter2.pdf --latex-engine=xelatex -V mainfont=heiti\\</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/jgm/pandoc\" target=\"_blank\" rel=\"noopener\">https://github.com/jgm/pandoc</a><br><a href=\"https://github.com/jgm/pandoc/releases/tag/2.1.1\" target=\"_blank\" rel=\"noopener\">https://github.com/jgm/pandoc/releases/tag/2.1.1</a></p>\n<h3 id=\"github-下载\"><a href=\"#github-下载\" class=\"headerlink\" title=\"github 下载\"></a>github 下载</h3><p>对于 Linux以及 macOS，则修改 /etc/hosts<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">219.76.4.4 s3.amazonaws.com</span><br><span class=\"line\">219.76.4.4 github-cloud.s3.amazonaws.com</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Cheat-：-一个实用-Linux-命令示例集合\"><a href=\"#Cheat-：-一个实用-Linux-命令示例集合\" class=\"headerlink\" title=\"Cheat ： 一个实用 Linux 命令示例集合\"></a>Cheat ： 一个实用 Linux 命令示例集合</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>cheat 允许你在命令行中创建和查看交互式的速查表cheatsheet。它旨在帮助提醒 *nix 系统管理员他们经常使用但还没频繁到会记住的命令的选项。<br>cheat 是使用 python 开发的，所以可以用 pip 来在你的系统上安装 cheat。<br>pip 是一个与 setuptools 捆绑在一起的 Python 模块，它是在 Linux 中安装 Python 包推荐的工具之一。</p>\n<p>对于 Debian/Ubuntu 用户，请使用 apt-get 命令或apt 命令来安装 pip。</p>\n<h3 id=\"如何使用-Cheat\"><a href=\"#如何使用-Cheat\" class=\"headerlink\" title=\"如何使用 Cheat\"></a>如何使用 Cheat</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install docopt pygments</span><br><span class=\"line\"><span class=\"comment\"># 命令来查看速查表</span></span><br><span class=\"line\">cheat tar</span><br><span class=\"line\"><span class=\"comment\"># 运行下面的命令查看可用的速查表。</span></span><br><span class=\"line\">$ cheat -l</span><br><span class=\"line\"><span class=\"comment\"># 进入帮助页面获取更多详细信息。</span></span><br><span class=\"line\">$ cheat -h</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><a href=\"https://linux.cn/article-9193-1.html\" target=\"_blank\" rel=\"noopener\">Cheat ： 一个实用 Linux 命令示例集合</a></p>\n</li>\n<li><p><a href=\"https://linux.cn/article-3760-1.html\" target=\"_blank\" rel=\"noopener\">Cheat</a>—— 给Linux初学者和管理员一个终极命令行”备忘单”</p>\n<h2 id=\"autojump\"><a href=\"#autojump\" class=\"headerlink\" title=\"autojump\"></a>autojump</h2><p>一个可以在 Linux 文件系统快速导航的高级 cd 命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装</span></span><br><span class=\"line\">sudo apt-get install autojump</span><br><span class=\"line\"><span class=\"comment\"># 配置 为了使得 autojump 在 BASH shell 中永久有效，你需要运行下面的命令。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'. /usr/share/autojump/autojump.sh'</span> &gt;&gt; ~/.bashrc</span><br><span class=\"line\"><span class=\"comment\"># 使用</span></span><br><span class=\"line\">$ j -v</span><br><span class=\"line\">$ autojump -v</span><br><span class=\"line\"><span class=\"comment\"># 跳到先前到过的目录 ‘/var/www‘ j ww 才能到什么目录</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>参考：<br><a href=\"https://linux.cn/article-5983-1.html\" target=\"_blank\" rel=\"noopener\">https://linux.cn/article-5983-1.html</a></p>\n<h2 id=\"超棒的离线文档阅读器：Zeal\"><a href=\"#超棒的离线文档阅读器：Zeal\" class=\"headerlink\" title=\"超棒的离线文档阅读器：Zeal\"></a>超棒的离线文档阅读器：Zeal</h2><p>一开始 Zeal 是不带 API 文档的, 需要你自己按需下载.<br>Zeal 可以定义全局快捷键, 另外还有大量的插件可以配合大多数编辑器以及 IDE 使用, 我用的是 Visual Studio Code, 搜索安装 Dash, 在编辑器内就可以直接打开 Zeal 查看 API . 默认快捷键是 Ctrl + H, 跟编辑器默认的替换快捷键有冲突, 自己可以修改.<br>下载：直接在应用商店下载<br>使用：<code>Tools &gt; Docsets &gt; Available</code></p>\n<p>参考：<br><a href=\"https://zealdocs.org/usage.html\" target=\"_blank\" rel=\"noopener\">https://zealdocs.org/usage.html</a><br><a href=\"http://blog.csdn.net/xlinsist/article/details/51014532\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/xlinsist/article/details/51014532</a><br><a href=\"https://zealdocs.org/\" target=\"_blank\" rel=\"noopener\">https://zealdocs.org/</a></p>\n<h2 id=\"sysv-rc-conf\"><a href=\"#sysv-rc-conf\" class=\"headerlink\" title=\"sysv-rc-conf\"></a>sysv-rc-conf</h2><p>sysv-rc-conf是一个强大的服务管理程序，群众的意见是sysv-rc-conf比chkconfig、rcconf好用。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装：</span></span><br><span class=\"line\">sudo apt-get install sysv-rc-conf</span><br><span class=\"line\"><span class=\"comment\"># 运行</span></span><br><span class=\"line\">sudo sysv-rc-conf</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://blog.csdn.net/gatieme/article/details/45251389\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/gatieme/article/details/45251389</a></p>\n<h2 id=\"zsh\"><a href=\"#zsh\" class=\"headerlink\" title=\"zsh\"></a>zsh</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install zsh</span><br><span class=\"line\">sh -c <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置输入命令，按tab键</span></span><br><span class=\"line\"><span class=\"comment\"># 安装时，有可能导致，git 等失效！</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.zhihu.com/question/21418449\" target=\"_blank\" rel=\"noopener\">为什么说 zsh 是 shell 中的极品？</a></p>\n<p><a href=\"https://www.zhihu.com/question/21418449\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/21418449</a> </p>\n<h2 id=\"MongoDB-Compass\"><a href=\"#MongoDB-Compass\" class=\"headerlink\" title=\"MongoDB Compass\"></a>MongoDB Compass</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://downloads.mongodb.com/compass/mongodb-compass_1.6.0_amd64.deb;    </span><br><span class=\"line\">sudo dpkg -i mongodb-compass_1.6.0_amd64.deb</span><br></pre></td></tr></table></figure>\n<h2 id=\"phpStudy-for-Linux-不建议安装，会导致deepin的其他逐渐被删掉\"><a href=\"#phpStudy-for-Linux-不建议安装，会导致deepin的其他逐渐被删掉\" class=\"headerlink\" title=\"phpStudy for Linux 不建议安装，会导致deepin的其他逐渐被删掉\"></a>phpStudy for Linux 不建议安装，会导致deepin的其他逐渐被删掉</h2><h2 id=\"node-js\"><a href=\"#node-js\" class=\"headerlink\" title=\"node.js\"></a>node.js</h2><p>Ubuntu下安装使用nvm<br>/home/mohoo/.bashrc</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>安装成功后,<strong>需要关闭xshell</strong>，重新启动。nvm才会生效。</p>\n<p>查看nvm是否安装成功</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看nvm是否安装成功</span></span><br><span class=\"line\">root@linuxidc:~<span class=\"comment\"># command -v nvm</span></span><br><span class=\"line\">nvm</span><br><span class=\"line\"><span class=\"comment\"># 查看Java命令</span></span><br><span class=\"line\"><span class=\"built_in\">command</span> -v java</span><br><span class=\"line\">/usr/bin/java</span><br><span class=\"line\"><span class=\"comment\"># nvm 安装node.js </span></span><br><span class=\"line\">nvm install v9.3.0</span><br><span class=\"line\"><span class=\"comment\"># node.js 版本存放位置</span></span><br><span class=\"line\">/home/mohoo/.nvm/versions</span><br></pre></td></tr></table></figure>\n<h3 id=\"npm-install-安装模块\"><a href=\"#npm-install-安装模块\" class=\"headerlink\" title=\"npm install 安装模块\"></a>npm install 安装模块</h3><ul>\n<li>npm install -g yarn pm2 http-server eslint</li>\n<li>npm install -g gitbook gitbook-cli</li>\n<li>npm install -g webpack gulp parcel-bundler</li>\n<li>npm install -g nodeppt</li>\n<li>npm install -g hexo hexo-cli</li>\n<li>npm install -g phantomjs browsersync</li>\n</ul>\n<h2 id=\"golang\"><a href=\"#golang\" class=\"headerlink\" title=\"golang\"></a>golang</h2><h3 id=\"安装及配置\"><a href=\"#安装及配置\" class=\"headerlink\" title=\"安装及配置\"></a>安装及配置</h3><p>下载压缩包 go1.9.2.linux-amd64.tar.gz<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.golangtc.com/static/go/1.9.2/go1.9.2.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p>解压该文件，由于默认的go路径，在/usr/local下， 所以用如下命令，解压创建/usr/local/go<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -C /usr/<span class=\"built_in\">local</span> -xzf go1.9.2.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></p>\n<p>配置环境变量，<code>sudo vim /etc/profile</code>下，添加对应的goroot和gopath的配置环境<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 环境目录</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOROOT=/usr/<span class=\"built_in\">local</span>/go</span><br><span class=\"line\"><span class=\"comment\">## 工作目录</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=/home/mohoo/data/godev  </span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$GOROOT</span>/bin</span><br></pre></td></tr></table></figure></p>\n<p>之后，<code>source /etc/profile</code> 使得其配置文件有效.</p>\n<p>检查go的版本，<code>$ go version</code></p>\n<h3 id=\"编辑文件\"><a href=\"#编辑文件\" class=\"headerlink\" title=\"编辑文件\"></a>编辑文件</h3><p>/home/mohoo/data/godev/src/helloword.go<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123; </span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"Hello, world.\\n\"</span>) </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"运行代码\"><a href=\"#运行代码\" class=\"headerlink\" title=\"运行代码\"></a>运行代码</h3><ol>\n<li>go run helloworld.go 直接可以看到结果</li>\n<li>go bulid helloworld.go，生成了helloworld的文件, ./helloworld 直接执行，输出了 Hello world</li>\n</ol>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p><a href=\"https://www.cnblogs.com/unqiang/p/6594451.html\" target=\"_blank\" rel=\"noopener\">linux下安装go</a><br><a href=\"http://blog.csdn.net/u011054678/article/details/72877465\" target=\"_blank\" rel=\"noopener\">Linux上go的安装配置以及简单使用</a></p>\n<h2 id=\"vscode\"><a href=\"#vscode\" class=\"headerlink\" title=\"vscode\"></a>vscode</h2><p>在linux系统中安装VSCode(Visual Studio Code)</p>\n<h3 id=\"方法一、从deepin-官网下载\"><a href=\"#方法一、从deepin-官网下载\" class=\"headerlink\" title=\"方法一、从deepin 官网下载\"></a>方法一、从deepin 官网下载</h3><h3 id=\"方法二、从软件中心，输入Visual-Studio-Code，下载安装\"><a href=\"#方法二、从软件中心，输入Visual-Studio-Code，下载安装\" class=\"headerlink\" title=\"方法二、从软件中心，输入Visual Studio Code，下载安装\"></a>方法二、从软件中心，输入<code>Visual Studio Code</code>，下载安装</h3><h3 id=\"方法三、下载源码，安装一下\"><a href=\"#方法三、下载源码，安装一下\" class=\"headerlink\" title=\"方法三、下载源码，安装一下\"></a>方法三、下载源码，安装一下</h3><ol>\n<li><p>从官网下载压缩包(话说下载下来解压就直接可以运行了咧,都不需要make)<br>访问Visual Studio Code官网 <a href=\"https://code.visualstudio.com/docs?dv=linux64\" target=\"_blank\" rel=\"noopener\">https://code.visualstudio.com/docs?dv=linux64</a> 即可下载最新版本</p>\n</li>\n<li><p>解压 ,如果文件名不对,可能解压不出来的(扩展名:tar.gz)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar jxcv code-stable-code_1.7.2-1479766213_amd64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后移动到 /usr/local/ 目录</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv VSCode-linux-x64 /usr/<span class=\"built_in\">local</span>/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可能还需要给可执行的权限, 然后就已经可以运行了</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /usr/<span class=\"built_in\">local</span>/VSCode-linux-x64/code</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>复制一个VScode图标文件到 /usr/share/icons/ 目录(后面会有用)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/<span class=\"built_in\">local</span>/VSCode-linux-x64/resources/app/resources/linux/code.png /usr/share/icons/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建启动器, 在/usr/share/applications/ 目录, 也可以将它复制到桌面目录直接在中断使用命令: </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/share/applications/VSCode.desktop</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后输入以下文本:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Name=Visual Studio Code</span><br><span class=\"line\">Comment=Multi-platform code editor for Linux</span><br><span class=\"line\">Exec=/usr/local/VSCode-linux-x64/code</span><br><span class=\"line\">Icon=/usr/share/icons/code.png</span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">StartupNotify=true</span><br><span class=\"line\">Categories=TextEditor;Development;Utility;</span><br><span class=\"line\">MimeType=text/plain;</span><br></pre></td></tr></table></figure>\n<p>保存后退出, 然后可以复制到桌面:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/share/applications/VSCode.desktop ~/桌面/</span><br></pre></td></tr></table></figure></p>\n<p>之后 就会发现 桌面和 应用程序菜单都有了 VSCode的快捷方式了</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/lzpong/p/6145511.html\" target=\"_blank\" rel=\"noopener\">在linux系统中安装VSCode(Visual Studio Code)</a></li>\n</ul>\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><p>1、卸载老版本，较老版本的Docker被称为docker或docker-engine。如果这些已安装，请卸载它们以及关联的依赖关系。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove docker \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-selinux \\</span><br><span class=\"line\">                  docker-engine</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><p>安装源切换为：网易云<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 建议使用方式，直接最新版本</span></span><br><span class=\"line\">wget -qO- https://get.docker.com/ | sh</span><br><span class=\"line\">sudo usermod -aG docker mohoo</span><br><span class=\"line\"><span class=\"comment\"># apt-get install -y docker-engine</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动docker\"><a href=\"#启动docker\" class=\"headerlink\" title=\"启动docker\"></a>启动docker</h3><p>问题：<br>Cannot connect to the Docker daemon. Is the docker daemon running on this host?<br>原因：权限不够，使用sudo docker ps 就可以了<br>参考：</p>\n<p><a href=\"http://www.jb51.net/article/94801.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/article/94801.htm</a><br><a href=\"https://www.cnblogs.com/lxjshuju/p/7183689.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lxjshuju/p/7183689.html</a></p>\n<h2 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"mysql\"></a>mysql</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mysql 安装</span></span><br><span class=\"line\">sudo apt-get install -y mysql-server</span><br><span class=\"line\"></span><br><span class=\"line\">mysql -V</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动mysql命令(其它关闭，重启等功能只需将start换成相应的stop,restart等字母即可)：</span></span><br><span class=\"line\">sudo service mysql start </span><br><span class=\"line\"></span><br><span class=\"line\">mysql -u用户名 -p密码</span><br><span class=\"line\"><span class=\"comment\"># 设置 root的密码</span></span><br><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\">root root</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://www.jb51.net/article/84399.htm\" target=\"_blank\" rel=\"noopener\">http://www.jb51.net/article/84399.htm</a></p>\n<h2 id=\"mongodb\"><a href=\"#mongodb\" class=\"headerlink\" title=\"mongodb\"></a>mongodb</h2><p>MongoDB 是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p>\n<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p>\n<p>它的特点是高性能、易部署、易使用，存储数据非常方便。主要功能特性有：</p>\n<ul>\n<li>面向集合存储，易存储对象类型的数据。</li>\n<li>模式自由。</li>\n<li>支持动态查询。</li>\n<li>支持完全索引，包含内部对象。</li>\n<li>支持查询。</li>\n<li>支持复制和故障恢复。</li>\n<li>使用高效的二进制数据存储，包括大型对象（如视频等）。</li>\n<li>自动处理碎片，以支持云计算层次的扩展性。</li>\n<li>支持RUBY，PYTHON，JAVA，C++，PHP，C#等多种语言。</li>\n<li>文件存储格式为BSON（一种JSON的扩展）。</li>\n<li>可通过网络访问。</li>\n</ul>\n<p>###　下载完安装包，并解压 tgz（以下演示的是 64 位 Linux上的安装） 。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz    # 下载</span><br><span class=\"line\">tar -zxvf mongodb-linux-x86_64-3.0.6.tgz                                   # 解压</span><br><span class=\"line\"></span><br><span class=\"line\">mv  mongodb-linux-x86_64-3.0.6/ /usr/local/mongodb                         # 将解压包拷贝到指定目录</span><br></pre></td></tr></table></figure></p>\n<p>###　MongoDB 的可执行文件位于 bin 目录下，所以可以将其添加到 PATH 路径中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=/usr/local/mongodb/bin:$PATH</span><br></pre></td></tr></table></figure></p>\n<p>###　创建数据库目录<br>MongoDB的数据存储在data目录的db目录下，但是这个目录在安装过程不会自动创建，所以你需要手动创建data目录，并在data目录中创建db目录。<br>以下实例中我们将data目录创建于根目录下(/)。<br>注意：/data/db 是 MongoDB 默认的启动的数据库路径(–dbpath)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/db</span><br></pre></td></tr></table></figure></p>\n<p>###　命令行中运行 MongoDB 服务<br>你可以再命令行中执行mongo安装目录中的bin目录执行mongod命令来启动mongdb服务。<br>注意：如果你的数据库目录不是/data/db，可以通过 –dbpath 来指定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/mongodb/bin/</span><br><span class=\"line\">/usr/local/mongodb/bin/mongod --dbpath /home/mohoo/data/mongodb</span><br></pre></td></tr></table></figure>\n<h3 id=\"自启动配置\"><a href=\"#自启动配置\" class=\"headerlink\" title=\"自启动配置\"></a>自启动配置</h3><p>sudo vim /etc/rc.local</p>\n<h2 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h2><h3 id=\"安装-Redis\"><a href=\"#安装-Redis\" class=\"headerlink\" title=\"安装 Redis\"></a>安装 Redis</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sudo apt-get update</span><br><span class=\"line\">$sudo apt-get install redis-server</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动-Redis\"><a href=\"#启动-Redis\" class=\"headerlink\" title=\"启动 Redis\"></a>启动 Redis</h3><p>$ redis-server</p>\n<h3 id=\"查看-redis-是否启动？\"><a href=\"#查看-redis-是否启动？\" class=\"headerlink\" title=\"查看 redis 是否启动？\"></a>查看 redis 是否启动？</h3><p>$ redis-cli<br>以上命令将打开以下终端：<br>redis 127.0.0.1:6379&gt;</p>\n<h2 id=\"php\"><a href=\"#php\" class=\"headerlink\" title=\"php\"></a>php</h2><p>nginx 本地配置不太清楚怎么配置</p>\n<p>docker pull registry.docker-cn.com/library/ubuntu:16.04</p>\n<p>解决方案：使用docker<br><a href=\"http://www.51testing.com/html/87/15091687-3649846.html\" target=\"_blank\" rel=\"noopener\">http://www.51testing.com/html/87/15091687-3649846.html</a><br><a href=\"http://www.runoob.com/docker/docker-install-php.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/docker/docker-install-php.html</a></p>\n<h2 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h2><p>###　下载<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tar.xz</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"安装及配置-1\"><a href=\"#安装及配置-1\" class=\"headerlink\" title=\"安装及配置\"></a>安装及配置</h3><ol>\n<li>打开WEB浏览器访问<a href=\"http://www.python.org/download/\" target=\"_blank\" rel=\"noopener\">http://www.python.org/download/</a></li>\n<li>选择适用于Unix/Linux的源码压缩包。</li>\n<li>下载及解压压缩包。</li>\n<li>如果你需要自定义一些选项修改Modules/Setup</li>\n<li>执行 ./configure 脚本</li>\n<li>make</li>\n<li>make install</li>\n<li>执行以上操作后，Python会安装在 /usr/local/bin 目录中，Python库安装在/usr/local/lib/pythonXX，XX为你使用的Python的版本号。<h2 id=\"java-默认安装了\"><a href=\"#java-默认安装了\" class=\"headerlink\" title=\"java 默认安装了\"></a>java 默认安装了</h2><a href=\"https://www.cnblogs.com/yuanbo123/p/5819564.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yuanbo123/p/5819564.html</a></li>\n</ol>\n<h3 id=\"下载资源\"><a href=\"#下载资源\" class=\"headerlink\" title=\"下载资源\"></a>下载资源</h3><p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>\n<h3 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h3><p>tar -zxvf jdk-8u102-linux-x64.tar.gz</p>\n<h3 id=\"移动目录\"><a href=\"#移动目录\" class=\"headerlink\" title=\"移动目录\"></a>移动目录</h3><p>sudo mv jdk1.8.0_161/ /usr/local/java</p>\n<h3 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h3><p>sudo vim /etc/profile<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/local/java/</span><br><span class=\"line\">export JRE_HOME=/usr/local/java/jre</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"刷新配置\"><a href=\"#刷新配置\" class=\"headerlink\" title=\"刷新配置\"></a>刷新配置</h3><p>source /etc/profile</p>\n<h3 id=\"校验\"><a href=\"#校验\" class=\"headerlink\" title=\"校验\"></a>校验</h3><p>java</p>\n<h2 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载源文件</span></span><br><span class=\"line\">wget -c https://nginx.org/download/nginx-1.10.1.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -zxvf nginx-1.10.1.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.10.1</span><br><span class=\"line\"><span class=\"comment\"># configure</span></span><br><span class=\"line\">./configure --conf-path=/home/mohoo/data/Project/work/nginx/nginx.conf</span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br><span class=\"line\"><span class=\"comment\"># 查找安装路径：</span></span><br><span class=\"line\">whereis nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动、停止nginx\"><a href=\"#启动、停止nginx\" class=\"headerlink\" title=\"启动、停止nginx\"></a>启动、停止nginx</h3><p>使用sudo 权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 校验nginx 配置信息</span></span><br><span class=\"line\">./nginx -t </span><br><span class=\"line\"><span class=\"comment\"># 启动nginx</span></span><br><span class=\"line\">./nginx  </span><br><span class=\"line\"><span class=\"comment\"># 配置信息重载</span></span><br><span class=\"line\">./nginx -s reload nginx</span><br><span class=\"line\">curl http://localhost</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx-自定义配置\"><a href=\"#nginx-自定义配置\" class=\"headerlink\" title=\"nginx 自定义配置\"></a>nginx 自定义配置</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自定义配置（不推荐）安装时进行配置,自定义配置</span></span><br><span class=\"line\">./configure --conf-path=/usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf</span><br><span class=\"line\"><span class=\"comment\"># 配置信息</span></span><br><span class=\"line\">./configure \\</span><br><span class=\"line\">--prefix=/usr/<span class=\"built_in\">local</span>/nginx \\</span><br><span class=\"line\">--conf-path=/usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf \\</span><br><span class=\"line\">--pid-path=/usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.pid \\</span><br><span class=\"line\">--lock-path=/var/lock/nginx.lock \\</span><br><span class=\"line\">--error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log \\</span><br><span class=\"line\">--http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log \\</span><br><span class=\"line\">--with-http_gzip_static_module \\</span><br><span class=\"line\">--http-client-body-temp-path=/var/temp/nginx/client \\</span><br><span class=\"line\">--http-proxy-temp-path=/var/temp/nginx/proxy \\</span><br><span class=\"line\">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \\</span><br><span class=\"line\">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\</span><br><span class=\"line\">--http-scgi-temp-path=/var/temp/nginx/scgi</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">    server_tokens  off;  </span><br><span class=\"line\">    fastcgi_intercept_errors on;</span><br><span class=\"line\">    log_format logstash &apos;$http_host $remote_addr - $remote_user [$time_local] &quot;$request&quot; $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;http_x_forwarded_for&quot; $request_time $upstream_response_time&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">\taccess_log logs/access.log logstash;</span><br><span class=\"line\">   \taccess_log  /data/wwwlog/access.log  logstash;</span><br><span class=\"line\">\terror_log  /data/wwwlog/error.log;</span><br><span class=\"line\"></span><br><span class=\"line\">   geo $white_ip &#123;</span><br><span class=\"line\">        #ranges;</span><br><span class=\"line\">        default no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    include gzip.conf;    </span><br><span class=\"line\">    keepalive_timeout           60 20;</span><br><span class=\"line\">    client_header_timeout       3m;</span><br><span class=\"line\">    client_body_timeout         3m;</span><br><span class=\"line\">    send_timeout                3m;</span><br><span class=\"line\"></span><br><span class=\"line\">    client_header_buffer_size           16k;</span><br><span class=\"line\">    large_client_header_buffers         4 32k;</span><br><span class=\"line\">    server_names_hash_max_size          512;</span><br><span class=\"line\">    server_names_hash_bucket_size       64;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    tcp_nopush      on;</span><br><span class=\"line\">    tcp_nodelay     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    limit_req_zone $binary_remote_addr zone=http:10m rate=100r/s;</span><br><span class=\"line\">    limit_req_zone $http_user_agent zone=useragenttrack:10m rate=100r/s;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">\t    root /data/wwwroot/html;</span><br><span class=\"line\">        index index.html index.htm;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        error_page  404              /404.html;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /design/html/ &#123;</span><br><span class=\"line\">            root /home/data/graduation-design/client/;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location /mwechat&#123;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:8765;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录<br><a href=\"https://www.cnblogs.com/hdnav/p/7941165.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/hdnav/p/7941165.html</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 访问登录页面</span></span><br><span class=\"line\">curl http://localhost/design/html/login.html</span><br><span class=\"line\"><span class=\"comment\"># 访问用户接口</span></span><br><span class=\"line\">curl http://localhost/design/users/info</span><br></pre></td></tr></table></figure>\n<h3 id=\"多捣腾捣腾就可以了解很多之前想的东西\"><a href=\"#多捣腾捣腾就可以了解很多之前想的东西\" class=\"headerlink\" title=\"多捣腾捣腾就可以了解很多之前想的东西\"></a>多捣腾捣腾就可以了解很多之前想的东西</h3><p>很多人,很多知识点是相通的,可以借鉴别人的知识体系,查漏补缺.</p>\n<h2 id=\"sublime-text\"><a href=\"#sublime-text\" class=\"headerlink\" title=\"sublime_text\"></a>sublime_text</h2><p><a href=\"http://www.sublimetext.com/docs/3/linux_repositories.html\" target=\"_blank\" rel=\"noopener\">http://www.sublimetext.com/docs/3/linux_repositories.html</a><br><a href=\"https://jingyan.baidu.com/article/e5c39bf5c840d039d7603336.html\" target=\"_blank\" rel=\"noopener\">https://jingyan.baidu.com/article/e5c39bf5c840d039d7603336.html</a></p>\n<p>apt<br>Install the GPG key:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>\n<p>Ensure apt is set up to work with https sources:</p>\n<p>sudo apt-get install apt-transport-https<br>Select the channel to use:</p>\n<p>Stable<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb https://download.sublimetext.com/ apt/stable/\"</span> | sudo tee /etc/apt/sources.list.d/sublime-text.list</span><br></pre></td></tr></table></figure></p>\n<p>Dev<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb https://download.sublimetext.com/ apt/dev/\"</span> | sudo tee /etc/apt/sources.list.d/sublime-text.list</span><br></pre></td></tr></table></figure></p>\n<p>Update apt sources and install Sublime Text</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install sublime-text</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/shenckicc/p/6032998.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/shenckicc/p/6032998.html</a></p>\n<p>解决无法输入中文：</p>\n<p><a href=\"http://blog.csdn.net/cywosp/article/details/32350899\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/cywosp/article/details/32350899</a></p>\n<h2 id=\"php-1\"><a href=\"#php-1\" class=\"headerlink\" title=\"php\"></a>php</h2><h3 id=\"系统性能配置优化\"><a href=\"#系统性能配置优化\" class=\"headerlink\" title=\"系统性能配置优化\"></a>系统性能配置优化</h3><ul>\n<li>设置&gt; 个性化 &gt; 开启窗口特效  主要作用，边框圆角美化，背景设置为毛玻璃，会导致不太美观</li>\n<li>开启高效模式</li>\n<li>热区优化</li>\n<li>模式选择:高效模式,时尚模式:不习惯</li>\n<li>大小设置为小</li>\n<li>系统注销后，长时间不处理，系统无法唤起。</li>\n<li>代码存放在home下面，不需要反复授权<br><a href=\"https://lanseyujie.com/post/deepin-optimization-techniques.html\" target=\"_blank\" rel=\"noopener\">https://lanseyujie.com/post/deepin-optimization-techniques.html</a><br><a href=\"https://lanseyujie.com/post/deepin-install-shadowsocks.html\" target=\"_blank\" rel=\"noopener\">https://lanseyujie.com/post/deepin-install-shadowsocks.html</a></li>\n</ul>\n<ul>\n<li><a href=\"https://www.cnblogs.com/felixzh/p/5110939.html\" target=\"_blank\" rel=\"noopener\">ubuntu 安装 GCC 和 G++ C++ 开发环境</a></li>\n</ul>\n<h3 id=\"linux-场景\"><a href=\"#linux-场景\" class=\"headerlink\" title=\"linux 场景\"></a>linux 场景</h3><ol>\n<li>可以安装在各种计算机硬件设备中,手机,平板电脑,<strong>路由器</strong>,视频游戏控制台,台式计算机,大型机和超级计算机</li>\n<li>严格来讲，Linux这个词本身只表示Linux内核，但实际上人们已经习惯了用Linux来形容整个基于Linux内核，并且使用GNU 工程各种工具和数据库的操作系统。</li>\n</ol>\n<h3 id=\"现在几乎所有开源的系统都是基于linux-unix-系统\"><a href=\"#现在几乎所有开源的系统都是基于linux-unix-系统\" class=\"headerlink\" title=\"现在几乎所有开源的系统都是基于linux/unix 系统\"></a>现在几乎所有开源的系统都是基于linux/unix 系统</h3><ol>\n<li>深入学习这个还是非常有必要的</li>\n<li>到了知其然,知其所以然的时候</li>\n<li>很多软件在linux 都能得到很好的支持.</li>\n<li>服务器端基本上都是Linux ,如果可以在本地开发环境就原生拥有这些特性,那么后续的开发维护都比较方便</li>\n<li>docker等服务都是基于Linux系统,1. 是开源的 2. win 使用docker环境比较麻烦,不如直接使用docker</li>\n<li>linux 的配置命令 可以脚本化,方便于维护.</li>\n<li>在接下来的一段时间里,我争取使用linux 简单而强大,配置完成后可以很方便的进行配置维护</li>\n<li>在window下,你配置的东西,每次做系统,都会变更很多东西,这些东西不能同步,而Linux不同,可以脚本化.</li>\n<li>linux 下默认的编辑器是vim 那么可以有意识的去尝试使用 </li>\n<li>尝试deepin 系统的有点和不足 尝试在linux 下进行办公</li>\n</ol>\n<h3 id=\"deepin-优点\"><a href=\"#deepin-优点\" class=\"headerlink\" title=\"deepin 优点\"></a>deepin 优点</h3><p>linux:应用范围更广, 移动端:Android ,服务器端:几乎占据绝对主流,</p>\n<ol>\n<li>命令行终端不错 支持很多特性 ssh 多屏幕 不需要使用第三方的东西了</li>\n<li>输入法也还可以,不会让人适应很长时间</li>\n<li>性能还可以，至少 windows 系统没有那么流畅。</li>\n<li>开发状态和服务器状态保持一致，减少平台切换的麻烦</li>\n<li>针对自己常用到的场景，已经妥妥的支持了</li>\n<li>入门比较轻松，切换成本比较低。</li>\n</ol>\n"},{"title":"node.js 模块之 pm2","_content":"\n## pm2 简介\npm2 是一个带有负载均衡功能的Node应用的进程管理器.\n当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载， PM2是完美的。它非常适合IaaS结构，但不要把它用于PaaS方案（随后将开发Paas的解决方案）.\n## 常用命令\n\n## pm2 升级\n\n```\npm2 save\nnpm install -g pm2\npm2 update\n```\n### 全局安装\n```\nnpm install -g pm2\n```\n\n### 开启进程\n\n```\npm2 start app.js -i 3 --name node-api # 开启3个名称为node-api的进程\npm2 start app.js -i max --name node-api # 根据有效CPU数目启动最大进程数目\npm2 monit # 监视所有进程\npm2 list # 显示所有进程状态\npm2 logs node-api # 查看进程日志 默认查看所有\npm2 stop all # 停止所有进程\npm2 restart all # 重启所有进程\npm2 reload all # 0秒停机重载进程 (用于 NETWORKED 进程)\npm2 delete all # 杀死全部进程\npm2 startup # 产生 init 脚本 保持进程活着\npm2 web # 运行健壮的 computer API endpoint (http://localhost:9615)\npm2 start app.js -x #用fork模式启动 app.js 而不是使用 cluster\npm2 start app.js -x -- -a 23 # 用fork模式启动 app.js 并且传递参数 (-a 23)\npm2 start app.json # 启动进程, 在 app.json里设置选项\n```\n\n### 支持CoffeeScript:\n```\npm2 start my_app.coffee\n```\n## 参考\n\n- [PM2 介绍](https://www.douban.com/note/314200231/)\n- [PM2 官方文档](https://github.com/Unitech/pm2)\n","source":"_posts/node.js 模块之 pm2.md","raw":"---\ntitle: node.js 模块之 pm2\ntags: node-tools\n---\n\n## pm2 简介\npm2 是一个带有负载均衡功能的Node应用的进程管理器.\n当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载， PM2是完美的。它非常适合IaaS结构，但不要把它用于PaaS方案（随后将开发Paas的解决方案）.\n## 常用命令\n\n## pm2 升级\n\n```\npm2 save\nnpm install -g pm2\npm2 update\n```\n### 全局安装\n```\nnpm install -g pm2\n```\n\n### 开启进程\n\n```\npm2 start app.js -i 3 --name node-api # 开启3个名称为node-api的进程\npm2 start app.js -i max --name node-api # 根据有效CPU数目启动最大进程数目\npm2 monit # 监视所有进程\npm2 list # 显示所有进程状态\npm2 logs node-api # 查看进程日志 默认查看所有\npm2 stop all # 停止所有进程\npm2 restart all # 重启所有进程\npm2 reload all # 0秒停机重载进程 (用于 NETWORKED 进程)\npm2 delete all # 杀死全部进程\npm2 startup # 产生 init 脚本 保持进程活着\npm2 web # 运行健壮的 computer API endpoint (http://localhost:9615)\npm2 start app.js -x #用fork模式启动 app.js 而不是使用 cluster\npm2 start app.js -x -- -a 23 # 用fork模式启动 app.js 并且传递参数 (-a 23)\npm2 start app.json # 启动进程, 在 app.json里设置选项\n```\n\n### 支持CoffeeScript:\n```\npm2 start my_app.coffee\n```\n## 参考\n\n- [PM2 介绍](https://www.douban.com/note/314200231/)\n- [PM2 官方文档](https://github.com/Unitech/pm2)\n","slug":"node.js 模块之 pm2","published":1,"date":"2018-04-27T06:31:01.949Z","updated":"2018-04-27T07:27:29.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghshevm000nn1yrmeghsm7u","content":"<h2 id=\"pm2-简介\"><a href=\"#pm2-简介\" class=\"headerlink\" title=\"pm2 简介\"></a>pm2 简介</h2><p>pm2 是一个带有负载均衡功能的Node应用的进程管理器.<br>当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载， PM2是完美的。它非常适合IaaS结构，但不要把它用于PaaS方案（随后将开发Paas的解决方案）.</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h2 id=\"pm2-升级\"><a href=\"#pm2-升级\" class=\"headerlink\" title=\"pm2 升级\"></a>pm2 升级</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 save</span><br><span class=\"line\">npm install -g pm2</span><br><span class=\"line\">pm2 update</span><br></pre></td></tr></table></figure>\n<h3 id=\"全局安装\"><a href=\"#全局安装\" class=\"headerlink\" title=\"全局安装\"></a>全局安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br></pre></td></tr></table></figure>\n<h3 id=\"开启进程\"><a href=\"#开启进程\" class=\"headerlink\" title=\"开启进程\"></a>开启进程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start app.js -i 3 --name node-api # 开启3个名称为node-api的进程</span><br><span class=\"line\">pm2 start app.js -i max --name node-api # 根据有效CPU数目启动最大进程数目</span><br><span class=\"line\">pm2 monit # 监视所有进程</span><br><span class=\"line\">pm2 list # 显示所有进程状态</span><br><span class=\"line\">pm2 logs node-api # 查看进程日志 默认查看所有</span><br><span class=\"line\">pm2 stop all # 停止所有进程</span><br><span class=\"line\">pm2 restart all # 重启所有进程</span><br><span class=\"line\">pm2 reload all # 0秒停机重载进程 (用于 NETWORKED 进程)</span><br><span class=\"line\">pm2 delete all # 杀死全部进程</span><br><span class=\"line\">pm2 startup # 产生 init 脚本 保持进程活着</span><br><span class=\"line\">pm2 web # 运行健壮的 computer API endpoint (http://localhost:9615)</span><br><span class=\"line\">pm2 start app.js -x #用fork模式启动 app.js 而不是使用 cluster</span><br><span class=\"line\">pm2 start app.js -x -- -a 23 # 用fork模式启动 app.js 并且传递参数 (-a 23)</span><br><span class=\"line\">pm2 start app.json # 启动进程, 在 app.json里设置选项</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持CoffeeScript\"><a href=\"#支持CoffeeScript\" class=\"headerlink\" title=\"支持CoffeeScript:\"></a>支持CoffeeScript:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start my_app.coffee</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.douban.com/note/314200231/\" target=\"_blank\" rel=\"noopener\">PM2 介绍</a></li>\n<li><a href=\"https://github.com/Unitech/pm2\" target=\"_blank\" rel=\"noopener\">PM2 官方文档</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"pm2-简介\"><a href=\"#pm2-简介\" class=\"headerlink\" title=\"pm2 简介\"></a>pm2 简介</h2><p>pm2 是一个带有负载均衡功能的Node应用的进程管理器.<br>当你要把你的独立代码利用全部的服务器上的所有CPU，并保证进程永远都活着，0秒的重载， PM2是完美的。它非常适合IaaS结构，但不要把它用于PaaS方案（随后将开发Paas的解决方案）.</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h2 id=\"pm2-升级\"><a href=\"#pm2-升级\" class=\"headerlink\" title=\"pm2 升级\"></a>pm2 升级</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 save</span><br><span class=\"line\">npm install -g pm2</span><br><span class=\"line\">pm2 update</span><br></pre></td></tr></table></figure>\n<h3 id=\"全局安装\"><a href=\"#全局安装\" class=\"headerlink\" title=\"全局安装\"></a>全局安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br></pre></td></tr></table></figure>\n<h3 id=\"开启进程\"><a href=\"#开启进程\" class=\"headerlink\" title=\"开启进程\"></a>开启进程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start app.js -i 3 --name node-api # 开启3个名称为node-api的进程</span><br><span class=\"line\">pm2 start app.js -i max --name node-api # 根据有效CPU数目启动最大进程数目</span><br><span class=\"line\">pm2 monit # 监视所有进程</span><br><span class=\"line\">pm2 list # 显示所有进程状态</span><br><span class=\"line\">pm2 logs node-api # 查看进程日志 默认查看所有</span><br><span class=\"line\">pm2 stop all # 停止所有进程</span><br><span class=\"line\">pm2 restart all # 重启所有进程</span><br><span class=\"line\">pm2 reload all # 0秒停机重载进程 (用于 NETWORKED 进程)</span><br><span class=\"line\">pm2 delete all # 杀死全部进程</span><br><span class=\"line\">pm2 startup # 产生 init 脚本 保持进程活着</span><br><span class=\"line\">pm2 web # 运行健壮的 computer API endpoint (http://localhost:9615)</span><br><span class=\"line\">pm2 start app.js -x #用fork模式启动 app.js 而不是使用 cluster</span><br><span class=\"line\">pm2 start app.js -x -- -a 23 # 用fork模式启动 app.js 并且传递参数 (-a 23)</span><br><span class=\"line\">pm2 start app.json # 启动进程, 在 app.json里设置选项</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持CoffeeScript\"><a href=\"#支持CoffeeScript\" class=\"headerlink\" title=\"支持CoffeeScript:\"></a>支持CoffeeScript:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start my_app.coffee</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.douban.com/note/314200231/\" target=\"_blank\" rel=\"noopener\">PM2 介绍</a></li>\n<li><a href=\"https://github.com/Unitech/pm2\" target=\"_blank\" rel=\"noopener\">PM2 官方文档</a></li>\n</ul>\n"},{"layout":"post","title":"nodeppt","date":"2017-08-15T14:39:34.000Z","_content":"\n## 安装\n\n```sh\nnpm install -g nodeppt\n```\n\n## 如何使用nodeapp\n```\nnodeppt start -p 8899 -d demo/\n```\n\n## 生成html文件\n\n```\nnodeppt generate demo/ output -a\n```\n\n## 操作\n\n## 常用命令\n1. 按键 O ，缩略图\n2. 按键 P , 画笔\n3. 按键 C ，清空\n4. 按键字体粗细1234\n5. 设置颜色：r,b,\n\n## 参考\n1. [nodeppt](https://www.npmjs.com/package/nodeppt)\n","source":"_posts/nodeppt.md","raw":"---\nlayout: post\ntitle: nodeppt\ndate: 2017-08-15 22:39:34\ntags: node-tools\n---\n\n## 安装\n\n```sh\nnpm install -g nodeppt\n```\n\n## 如何使用nodeapp\n```\nnodeppt start -p 8899 -d demo/\n```\n\n## 生成html文件\n\n```\nnodeppt generate demo/ output -a\n```\n\n## 操作\n\n## 常用命令\n1. 按键 O ，缩略图\n2. 按键 P , 画笔\n3. 按键 C ，清空\n4. 按键字体粗细1234\n5. 设置颜色：r,b,\n\n## 参考\n1. [nodeppt](https://www.npmjs.com/package/nodeppt)\n","slug":"nodeppt","published":1,"updated":"2018-04-27T07:27:29.654Z","comments":1,"photos":[],"link":"","_id":"cjghshevo000pn1yr1sh8ileh","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nodeppt</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何使用nodeapp\"><a href=\"#如何使用nodeapp\" class=\"headerlink\" title=\"如何使用nodeapp\"></a>如何使用nodeapp</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodeppt start -p 8899 -d demo/</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成html文件\"><a href=\"#生成html文件\" class=\"headerlink\" title=\"生成html文件\"></a>生成html文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodeppt generate demo/ output -a</span><br></pre></td></tr></table></figure>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ol>\n<li>按键 O ，缩略图</li>\n<li>按键 P , 画笔</li>\n<li>按键 C ，清空</li>\n<li>按键字体粗细1234</li>\n<li>设置颜色：r,b,</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://www.npmjs.com/package/nodeppt\" target=\"_blank\" rel=\"noopener\">nodeppt</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nodeppt</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何使用nodeapp\"><a href=\"#如何使用nodeapp\" class=\"headerlink\" title=\"如何使用nodeapp\"></a>如何使用nodeapp</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodeppt start -p 8899 -d demo/</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成html文件\"><a href=\"#生成html文件\" class=\"headerlink\" title=\"生成html文件\"></a>生成html文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodeppt generate demo/ output -a</span><br></pre></td></tr></table></figure>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ol>\n<li>按键 O ，缩略图</li>\n<li>按键 P , 画笔</li>\n<li>按键 C ，清空</li>\n<li>按键字体粗细1234</li>\n<li>设置颜色：r,b,</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://www.npmjs.com/package/nodeppt\" target=\"_blank\" rel=\"noopener\">nodeppt</a></li>\n</ol>\n"},{"layout":"post","title":"node.js 项目通过shell脚本部署实例","date":"2018-04-27T06:54:28.000Z","_content":"\n\n\n## 简介\n\n在开发的过程中，项目环境通常分为开发环境，测试环境，还有线上环境等，发布流程比较复杂，项目少了问题还不大，但是，当项目比较多的情况，10多个项目统一上线，上线什么版本等等问题，让人在一个个去处理，需要消耗的人力时间就太多了，希望项目部署可以自动化，让开发人员将精力放在开发及业务上，也减少因部署不规范导致的各种问题。\n\n常见的开发部署方案比较多，如**Jenkins**，如Docker。\n\n我们当前讲解的是最基础的通过shell 脚本进行代码拉取的方法。\n\n\n\n## 实现步骤\n\n第一步：下载代码压缩包\n\n第二步：解压\n\n第三步：安装依赖\n\n第四步：启动项目\n\n## 实现代码\n\n```bash\n#/bin/sh\n# 重新拉取时，需要将以往项目文件删除\n\n# github_url=https://github.com/shawflying/node-express-example/archive/nee-1.2.tar.gz\necho \"请输入github tag(http://github.com/username/projectName/archive/tagname.tar.gz)\"\nread github_url\nurl_list=(${github_url//// })  \ndir_name_end=(${url_list[5]//.tar.gz/ }) \ndir_name=\"${url_list[3]}-${dir_name_end}\"\n\necho \"1. 下载安装包\"\nwget -nc ${github_url}\n\n# 判断文件是否存在，存在则删除，不管存不存在直接删除\nrm -rf ${dir_name} #node-express-example-nee-1.2\necho \"2. 解压文件\"\ntar -xzf ${url_list[5]}\n# 删除文件\n# rm -rf nee-1.2.tar.gz\necho \"3. 进入项目目录\"\ncd ${dir_name}\nmkdir logs\n\necho \"4. 查看依赖环境版本\"\necho \"node version：\" `node -v`\necho \"npm version:\" `npm -v`\necho \"cnpm version:\" `cnpm -v`\n\necho \"5. 安装生产环境依赖\"\ncnpm i --production \n\necho \"6. 启动项目\"\nnpm run server\n```\n\n","source":"_posts/shell-node-deploy.md","raw":"---\nlayout: post\ntitle: node.js 项目通过shell脚本部署实例\ndate: 2018-04-27 14:54:28\ntags: shell\n---\n\n\n\n## 简介\n\n在开发的过程中，项目环境通常分为开发环境，测试环境，还有线上环境等，发布流程比较复杂，项目少了问题还不大，但是，当项目比较多的情况，10多个项目统一上线，上线什么版本等等问题，让人在一个个去处理，需要消耗的人力时间就太多了，希望项目部署可以自动化，让开发人员将精力放在开发及业务上，也减少因部署不规范导致的各种问题。\n\n常见的开发部署方案比较多，如**Jenkins**，如Docker。\n\n我们当前讲解的是最基础的通过shell 脚本进行代码拉取的方法。\n\n\n\n## 实现步骤\n\n第一步：下载代码压缩包\n\n第二步：解压\n\n第三步：安装依赖\n\n第四步：启动项目\n\n## 实现代码\n\n```bash\n#/bin/sh\n# 重新拉取时，需要将以往项目文件删除\n\n# github_url=https://github.com/shawflying/node-express-example/archive/nee-1.2.tar.gz\necho \"请输入github tag(http://github.com/username/projectName/archive/tagname.tar.gz)\"\nread github_url\nurl_list=(${github_url//// })  \ndir_name_end=(${url_list[5]//.tar.gz/ }) \ndir_name=\"${url_list[3]}-${dir_name_end}\"\n\necho \"1. 下载安装包\"\nwget -nc ${github_url}\n\n# 判断文件是否存在，存在则删除，不管存不存在直接删除\nrm -rf ${dir_name} #node-express-example-nee-1.2\necho \"2. 解压文件\"\ntar -xzf ${url_list[5]}\n# 删除文件\n# rm -rf nee-1.2.tar.gz\necho \"3. 进入项目目录\"\ncd ${dir_name}\nmkdir logs\n\necho \"4. 查看依赖环境版本\"\necho \"node version：\" `node -v`\necho \"npm version:\" `npm -v`\necho \"cnpm version:\" `cnpm -v`\n\necho \"5. 安装生产环境依赖\"\ncnpm i --production \n\necho \"6. 启动项目\"\nnpm run server\n```\n\n","slug":"shell-node-deploy","published":1,"updated":"2018-04-27T07:09:42.220Z","comments":1,"photos":[],"link":"","_id":"cjghshevp000rn1yrkwacyqh1","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在开发的过程中，项目环境通常分为开发环境，测试环境，还有线上环境等，发布流程比较复杂，项目少了问题还不大，但是，当项目比较多的情况，10多个项目统一上线，上线什么版本等等问题，让人在一个个去处理，需要消耗的人力时间就太多了，希望项目部署可以自动化，让开发人员将精力放在开发及业务上，也减少因部署不规范导致的各种问题。</p>\n<p>常见的开发部署方案比较多，如<strong>Jenkins</strong>，如Docker。</p>\n<p>我们当前讲解的是最基础的通过shell 脚本进行代码拉取的方法。</p>\n<h2 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><p>第一步：下载代码压缩包</p>\n<p>第二步：解压</p>\n<p>第三步：安装依赖</p>\n<p>第四步：启动项目</p>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># 重新拉取时，需要将以往项目文件删除</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># github_url=https://github.com/shawflying/node-express-example/archive/nee-1.2.tar.gz</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"请输入github tag(http://github.com/username/projectName/archive/tagname.tar.gz)\"</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> github_url</span><br><span class=\"line\">url_list=(<span class=\"variable\">$&#123;github_url//// &#125;</span>)  </span><br><span class=\"line\">dir_name_end=(<span class=\"variable\">$&#123;url_list[5]//.tar.gz/ &#125;</span>) </span><br><span class=\"line\">dir_name=<span class=\"string\">\"<span class=\"variable\">$&#123;url_list[3]&#125;</span>-<span class=\"variable\">$&#123;dir_name_end&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"1. 下载安装包\"</span></span><br><span class=\"line\">wget -nc <span class=\"variable\">$&#123;github_url&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 判断文件是否存在，存在则删除，不管存不存在直接删除</span></span><br><span class=\"line\">rm -rf <span class=\"variable\">$&#123;dir_name&#125;</span> <span class=\"comment\">#node-express-example-nee-1.2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"2. 解压文件\"</span></span><br><span class=\"line\">tar -xzf <span class=\"variable\">$&#123;url_list[5]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 删除文件</span></span><br><span class=\"line\"><span class=\"comment\"># rm -rf nee-1.2.tar.gz</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"3. 进入项目目录\"</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$&#123;dir_name&#125;</span></span><br><span class=\"line\">mkdir logs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"4. 查看依赖环境版本\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"node version：\"</span> `node -v`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"npm version:\"</span> `npm -v`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"cnpm version:\"</span> `cnpm -v`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"5. 安装生产环境依赖\"</span></span><br><span class=\"line\">cnpm i --production </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"6. 启动项目\"</span></span><br><span class=\"line\">npm run server</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在开发的过程中，项目环境通常分为开发环境，测试环境，还有线上环境等，发布流程比较复杂，项目少了问题还不大，但是，当项目比较多的情况，10多个项目统一上线，上线什么版本等等问题，让人在一个个去处理，需要消耗的人力时间就太多了，希望项目部署可以自动化，让开发人员将精力放在开发及业务上，也减少因部署不规范导致的各种问题。</p>\n<p>常见的开发部署方案比较多，如<strong>Jenkins</strong>，如Docker。</p>\n<p>我们当前讲解的是最基础的通过shell 脚本进行代码拉取的方法。</p>\n<h2 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h2><p>第一步：下载代码压缩包</p>\n<p>第二步：解压</p>\n<p>第三步：安装依赖</p>\n<p>第四步：启动项目</p>\n<h2 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># 重新拉取时，需要将以往项目文件删除</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># github_url=https://github.com/shawflying/node-express-example/archive/nee-1.2.tar.gz</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"请输入github tag(http://github.com/username/projectName/archive/tagname.tar.gz)\"</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> github_url</span><br><span class=\"line\">url_list=(<span class=\"variable\">$&#123;github_url//// &#125;</span>)  </span><br><span class=\"line\">dir_name_end=(<span class=\"variable\">$&#123;url_list[5]//.tar.gz/ &#125;</span>) </span><br><span class=\"line\">dir_name=<span class=\"string\">\"<span class=\"variable\">$&#123;url_list[3]&#125;</span>-<span class=\"variable\">$&#123;dir_name_end&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"1. 下载安装包\"</span></span><br><span class=\"line\">wget -nc <span class=\"variable\">$&#123;github_url&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 判断文件是否存在，存在则删除，不管存不存在直接删除</span></span><br><span class=\"line\">rm -rf <span class=\"variable\">$&#123;dir_name&#125;</span> <span class=\"comment\">#node-express-example-nee-1.2</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"2. 解压文件\"</span></span><br><span class=\"line\">tar -xzf <span class=\"variable\">$&#123;url_list[5]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 删除文件</span></span><br><span class=\"line\"><span class=\"comment\"># rm -rf nee-1.2.tar.gz</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"3. 进入项目目录\"</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$&#123;dir_name&#125;</span></span><br><span class=\"line\">mkdir logs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"4. 查看依赖环境版本\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"node version：\"</span> `node -v`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"npm version:\"</span> `npm -v`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"cnpm version:\"</span> `cnpm -v`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"5. 安装生产环境依赖\"</span></span><br><span class=\"line\">cnpm i --production </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"6. 启动项目\"</span></span><br><span class=\"line\">npm run server</span><br></pre></td></tr></table></figure>\n"},{"title":"图片上传","date":"2018-04-04T03:11:11.000Z","updated":"2018-05-04T02:55:49.000Z","_content":"\n图片上传是当前wap开发中常用的业务场景，然而，不同的业务场景，需求也是不同的，有些业务需要将完整图片上传，有些需要将图片资源进行压缩。在当前前后端完全分离的模式下，前后端如何解决下列问题呢？\n\n1. 跨域\n2. ajax 请求\n3. 图片大小压缩\n\n\n## 解决方案一、formidable\n\nformidable模块实现了上传和编码图片和视频。它支持GB级上传数据处理，支持多种客户端数据提交。有极高的测试覆盖率，非常适合在生产环境中使用。\n\nmaxFieldsSize属性限制了所有字段所占的字节数。如果超过了该字节数，将会报错。默认的字节数为2MB\n\n```\nform.maxFieldsSize = 2*1024*1024\n```\n\nmaxFields属性限制了解析请求字段的的数量。默认为1000个\n\n```\nform.maxFields = 1000;\n```\n\n### modules\n\n```js\nvar formidable = require('formidable');\nvar fs = require('fs');\n\nclass dxlUpdate {\n    constructor(par){\n        this.root = par.root;\n        this.path = par.path;\n        this.name = par.name;\n    }\n    upload(req){\n        var _this = this;\n        return new Promise((resolve, reject) => {\n            let form = new formidable.IncomingForm();\n\n            let imgName = this.name;\n            form.encoding = 'utf-8';\n            form.maxFieldsSize = 1024 * 1024 * 1024;\n            form.uploadDir = this.root;\n            form.keepExtensions = true;\n            form.parse(req, function(err, fields, files) {\n                if(!err){\n                    console.log(\"上传完成\");\n                    // console.log(files[imgName].path);\n                    _this.fileMv(files[imgName]).then(d =>{\n                        return resolve(d);\n                    })\n\n                    \n                }else{\n                    return resolve(err);\n                }\n            });\n            form.on('progress', function(bytesReceived, bytesExpected) {\n                console.log(((bytesReceived/bytesExpected)*100).toFixed(2) + \"%\");\n            });\n        });\n    }\n    fileMv(files){\n        let imgPath = `${this.path}${this.fileName()}${this.suffix(files)}`;\n        let url = `${this.root}${imgPath}`;\n        return new Promise((resolve, reject) => {\n            fs.rename(files.path,url,function(err,d){\n                if(!err){\n                    return resolve(imgPath)\n                }else{\n                    console.error(err);\n                    return reject(err)\n                }\n            })\n        });\n    }\n    fileName(){\n        let d = new Date();\n        let yue = d.getMonth() + 1;\n        let riqi =  (yue > 9 ? yue : (\"0\" + yue) + d.getDate());\n        return `/${d.getFullYear()}${riqi}${d.getTime()}${parseInt(Math.random()*10)}`; \n    }\n    suffix(img){\n        if(img.name.toLowerCase().indexOf(\".jpeg\") != -1) return \".jpg\";\n        if(img.name.toLowerCase().indexOf(\".jpg\") != -1) return \".jpg\";\n        if(img.name.toLowerCase().indexOf(\".png\") != -1) return \".png\";\n        if(img.name.toLowerCase().indexOf(\".gif\") != -1) return \".gif\";    \n        return false;\n    }\n}\nmodule.exports = dxlUpdate;\n```\n\n### controller\n\n```js\n//图片上传\nexports.upload = (req, res) => {\n    co(function* () {\n        let img = new dxlUpload({\n            root: nodeServer.path[\"oss-img\"],\n            path: \"/happy_train\",\n            name: \"photo\"\n          //对应着前端的字段 <input name=\"photo\" type=\"file\" multiple accept=\"image/png,image/jpeg,video/mp4,audio/mp3\"/>\n        });\n        img.upload(req).then(imgUrl => {\n            console.log(imgUrl);\n            return res.jsonp(jsonpData(1, 'success', BaseStaticUrl + imgUrl));//助力失败\n        }).catch(e => {\n            return res.jsonp(jsonpData(-1, '图片上传失败', e.toString()));\n        })\n    }).catch(e => {\n        return res.jsonp(jsonpData(-1, '图片上传失败', e.toString()));\n    });\n}\n```\n\n### 前端页面\n\n#### Form 表单请求\n\n需要跳转新的页面\n\n#### jquery.form ajax 请求\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>jquery form 表单请求信息</title>\n    <script src=\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"></script>\n    <script src=\"https://cdn.bootcss.com/jquery.form/4.2.2/jquery.form.min.js\"></script>\n</head>\n\n<body>\n    <form id=\"tf\" action=\"http://www.daoxila.com/GongJu/activity/1.0/marriage/upload\" method=\"post\" enctype=\"multipart/form-data\"\n        name=\"upload_form\">\n        <input name=\"photo\" type=\"file\" multiple accept=\"image/png,image/jpeg,video/mp4,audio/mp3\" />\n    </form>\n\n    <input type=\"button\" value=\"上传图片\" class=\"btn-upload\" />\n    <script>\n        $(\".btn-upload\").click(function () {\n            $(\"#tf\").ajaxSubmit(function () {\n                console.log(\"11111\");\n            });\n        })\n    </script>\n</body>\n\n</html>\n```\n\nhttps://www.cnblogs.com/liuhongfeng/p/5137027.html\n\n\n\n\n## 解决方案二、Base64 处理方式\n\n1. 前端首先获取图片信息，将图片转换为base64\n2. 通过**post**请求，将转换的base64数据提交给接口\n3. 后端接口获取到数据，然后写成图片，返回图片链接\n\n\n### 后端处理\n\n```js\n//base64 图片下载\nconst fs = require('fs');\nexports.down_base64 = (req, res) => {\n    var imgData = req.body.imgUrl;\n    var base64Data = imgData.replace(/^data:image\\/\\w+;base64,/, \"\");//过滤data:URL\n    var dataBuffer = new Buffer(base64Data, 'base64');\n    let name = (moment().format(\"YYYYMMDDHHmmss\") + new Date().getTime()) + \".jpg\"\n    let dist = path.join(nodeServer.path[\"oss-img\"], \"/happy_train/\" + name)\n\n    fs.writeFile(dist, dataBuffer, function (err) {\n        if (err) return res.jsonp(jsonpData(-1, 'fail', err));\n        return res.jsonp(jsonpData(1, 'success', BaseStaticUrl + \"/happy_train/\" + name));\n    });\n}\n```\n\n### 前端请求\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>图片资源上传</title>\n    <script type=\"text/javascript\" src=\"http://cdn.bootcss.com/jquery/2.2.1/jquery.min.js\"></script>\n    <script src=\"./exif.min.js\" type=\"text/javascript\"></script>\n    <script src=\"./processImg.min.js\" type=\"text/javascript\"></script>\n</head>\n<body>\n    <h3>图片上传：</h3>\n    <div class=\"up-id\">\n        <img id=\"showimage1\" src=\"\" alt=\"\">\n        <input id=\"upface1\" class=\"UpFaceInput\" type=\"file\">\n    </div>\n</body>\n<script>\n    //按钮 显示图片节点  图片质量\n    //iphone X 宽带设置为290时崩溃\n    compressImg('upface1', 'showimage1', 640, function (src) {\n        var imgUrl = src.split(',')[1]\n        $.post(\"http://127.0.0.1/GongJu/activity/1.0/marriage/down_base64\", { imgUrl: imgUrl }, function (data) {\n            console.log('上传并下载：' + JSON.stringify(data))\n        })\n    });\n</script>\n</html>\n```\n\n1. 引用exif.min.js 和processImg.min.js 依赖\n2. compressImg 设置宽带，实现等比例压缩，减少上传图片的体积\n3. 若解析的base64数据量过多，可以设置bodyParser 解析请求数据的大小\n\n```js\napp.use(bodyParser.json({ limit: '10mb' }));\napp.use(bodyParser.urlencoded({\n    limit: '10mb',\n    extended: false\n}));\n```\n\n\n\n## 参考\n\n- [使用ajax提交form表单，包括ajax文件上传](http://www.cnblogs.com/zhuxiaojie/p/4783939.html)","source":"_posts/picture_upload.md","raw":"---\ntitle: 图片上传\ndate: 2018-04-04 11:11:11\nupdated: 2018-05-04 10:55:49\ntags: upload\n---\n\n图片上传是当前wap开发中常用的业务场景，然而，不同的业务场景，需求也是不同的，有些业务需要将完整图片上传，有些需要将图片资源进行压缩。在当前前后端完全分离的模式下，前后端如何解决下列问题呢？\n\n1. 跨域\n2. ajax 请求\n3. 图片大小压缩\n\n\n## 解决方案一、formidable\n\nformidable模块实现了上传和编码图片和视频。它支持GB级上传数据处理，支持多种客户端数据提交。有极高的测试覆盖率，非常适合在生产环境中使用。\n\nmaxFieldsSize属性限制了所有字段所占的字节数。如果超过了该字节数，将会报错。默认的字节数为2MB\n\n```\nform.maxFieldsSize = 2*1024*1024\n```\n\nmaxFields属性限制了解析请求字段的的数量。默认为1000个\n\n```\nform.maxFields = 1000;\n```\n\n### modules\n\n```js\nvar formidable = require('formidable');\nvar fs = require('fs');\n\nclass dxlUpdate {\n    constructor(par){\n        this.root = par.root;\n        this.path = par.path;\n        this.name = par.name;\n    }\n    upload(req){\n        var _this = this;\n        return new Promise((resolve, reject) => {\n            let form = new formidable.IncomingForm();\n\n            let imgName = this.name;\n            form.encoding = 'utf-8';\n            form.maxFieldsSize = 1024 * 1024 * 1024;\n            form.uploadDir = this.root;\n            form.keepExtensions = true;\n            form.parse(req, function(err, fields, files) {\n                if(!err){\n                    console.log(\"上传完成\");\n                    // console.log(files[imgName].path);\n                    _this.fileMv(files[imgName]).then(d =>{\n                        return resolve(d);\n                    })\n\n                    \n                }else{\n                    return resolve(err);\n                }\n            });\n            form.on('progress', function(bytesReceived, bytesExpected) {\n                console.log(((bytesReceived/bytesExpected)*100).toFixed(2) + \"%\");\n            });\n        });\n    }\n    fileMv(files){\n        let imgPath = `${this.path}${this.fileName()}${this.suffix(files)}`;\n        let url = `${this.root}${imgPath}`;\n        return new Promise((resolve, reject) => {\n            fs.rename(files.path,url,function(err,d){\n                if(!err){\n                    return resolve(imgPath)\n                }else{\n                    console.error(err);\n                    return reject(err)\n                }\n            })\n        });\n    }\n    fileName(){\n        let d = new Date();\n        let yue = d.getMonth() + 1;\n        let riqi =  (yue > 9 ? yue : (\"0\" + yue) + d.getDate());\n        return `/${d.getFullYear()}${riqi}${d.getTime()}${parseInt(Math.random()*10)}`; \n    }\n    suffix(img){\n        if(img.name.toLowerCase().indexOf(\".jpeg\") != -1) return \".jpg\";\n        if(img.name.toLowerCase().indexOf(\".jpg\") != -1) return \".jpg\";\n        if(img.name.toLowerCase().indexOf(\".png\") != -1) return \".png\";\n        if(img.name.toLowerCase().indexOf(\".gif\") != -1) return \".gif\";    \n        return false;\n    }\n}\nmodule.exports = dxlUpdate;\n```\n\n### controller\n\n```js\n//图片上传\nexports.upload = (req, res) => {\n    co(function* () {\n        let img = new dxlUpload({\n            root: nodeServer.path[\"oss-img\"],\n            path: \"/happy_train\",\n            name: \"photo\"\n          //对应着前端的字段 <input name=\"photo\" type=\"file\" multiple accept=\"image/png,image/jpeg,video/mp4,audio/mp3\"/>\n        });\n        img.upload(req).then(imgUrl => {\n            console.log(imgUrl);\n            return res.jsonp(jsonpData(1, 'success', BaseStaticUrl + imgUrl));//助力失败\n        }).catch(e => {\n            return res.jsonp(jsonpData(-1, '图片上传失败', e.toString()));\n        })\n    }).catch(e => {\n        return res.jsonp(jsonpData(-1, '图片上传失败', e.toString()));\n    });\n}\n```\n\n### 前端页面\n\n#### Form 表单请求\n\n需要跳转新的页面\n\n#### jquery.form ajax 请求\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>jquery form 表单请求信息</title>\n    <script src=\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"></script>\n    <script src=\"https://cdn.bootcss.com/jquery.form/4.2.2/jquery.form.min.js\"></script>\n</head>\n\n<body>\n    <form id=\"tf\" action=\"http://www.daoxila.com/GongJu/activity/1.0/marriage/upload\" method=\"post\" enctype=\"multipart/form-data\"\n        name=\"upload_form\">\n        <input name=\"photo\" type=\"file\" multiple accept=\"image/png,image/jpeg,video/mp4,audio/mp3\" />\n    </form>\n\n    <input type=\"button\" value=\"上传图片\" class=\"btn-upload\" />\n    <script>\n        $(\".btn-upload\").click(function () {\n            $(\"#tf\").ajaxSubmit(function () {\n                console.log(\"11111\");\n            });\n        })\n    </script>\n</body>\n\n</html>\n```\n\nhttps://www.cnblogs.com/liuhongfeng/p/5137027.html\n\n\n\n\n## 解决方案二、Base64 处理方式\n\n1. 前端首先获取图片信息，将图片转换为base64\n2. 通过**post**请求，将转换的base64数据提交给接口\n3. 后端接口获取到数据，然后写成图片，返回图片链接\n\n\n### 后端处理\n\n```js\n//base64 图片下载\nconst fs = require('fs');\nexports.down_base64 = (req, res) => {\n    var imgData = req.body.imgUrl;\n    var base64Data = imgData.replace(/^data:image\\/\\w+;base64,/, \"\");//过滤data:URL\n    var dataBuffer = new Buffer(base64Data, 'base64');\n    let name = (moment().format(\"YYYYMMDDHHmmss\") + new Date().getTime()) + \".jpg\"\n    let dist = path.join(nodeServer.path[\"oss-img\"], \"/happy_train/\" + name)\n\n    fs.writeFile(dist, dataBuffer, function (err) {\n        if (err) return res.jsonp(jsonpData(-1, 'fail', err));\n        return res.jsonp(jsonpData(1, 'success', BaseStaticUrl + \"/happy_train/\" + name));\n    });\n}\n```\n\n### 前端请求\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>图片资源上传</title>\n    <script type=\"text/javascript\" src=\"http://cdn.bootcss.com/jquery/2.2.1/jquery.min.js\"></script>\n    <script src=\"./exif.min.js\" type=\"text/javascript\"></script>\n    <script src=\"./processImg.min.js\" type=\"text/javascript\"></script>\n</head>\n<body>\n    <h3>图片上传：</h3>\n    <div class=\"up-id\">\n        <img id=\"showimage1\" src=\"\" alt=\"\">\n        <input id=\"upface1\" class=\"UpFaceInput\" type=\"file\">\n    </div>\n</body>\n<script>\n    //按钮 显示图片节点  图片质量\n    //iphone X 宽带设置为290时崩溃\n    compressImg('upface1', 'showimage1', 640, function (src) {\n        var imgUrl = src.split(',')[1]\n        $.post(\"http://127.0.0.1/GongJu/activity/1.0/marriage/down_base64\", { imgUrl: imgUrl }, function (data) {\n            console.log('上传并下载：' + JSON.stringify(data))\n        })\n    });\n</script>\n</html>\n```\n\n1. 引用exif.min.js 和processImg.min.js 依赖\n2. compressImg 设置宽带，实现等比例压缩，减少上传图片的体积\n3. 若解析的base64数据量过多，可以设置bodyParser 解析请求数据的大小\n\n```js\napp.use(bodyParser.json({ limit: '10mb' }));\napp.use(bodyParser.urlencoded({\n    limit: '10mb',\n    extended: false\n}));\n```\n\n\n\n## 参考\n\n- [使用ajax提交form表单，包括ajax文件上传](http://www.cnblogs.com/zhuxiaojie/p/4783939.html)","slug":"picture_upload","published":1,"_id":"cjghshevr000sn1yrvr9p5h30","comments":1,"layout":"post","photos":[],"link":"","content":"<p>图片上传是当前wap开发中常用的业务场景，然而，不同的业务场景，需求也是不同的，有些业务需要将完整图片上传，有些需要将图片资源进行压缩。在当前前后端完全分离的模式下，前后端如何解决下列问题呢？</p>\n<ol>\n<li>跨域</li>\n<li>ajax 请求</li>\n<li>图片大小压缩</li>\n</ol>\n<h2 id=\"解决方案一、formidable\"><a href=\"#解决方案一、formidable\" class=\"headerlink\" title=\"解决方案一、formidable\"></a>解决方案一、formidable</h2><p>formidable模块实现了上传和编码图片和视频。它支持GB级上传数据处理，支持多种客户端数据提交。有极高的测试覆盖率，非常适合在生产环境中使用。</p>\n<p>maxFieldsSize属性限制了所有字段所占的字节数。如果超过了该字节数，将会报错。默认的字节数为2MB</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form.maxFieldsSize = 2*1024*1024</span><br></pre></td></tr></table></figure>\n<p>maxFields属性限制了解析请求字段的的数量。默认为1000个</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form.maxFields = 1000;</span><br></pre></td></tr></table></figure>\n<h3 id=\"modules\"><a href=\"#modules\" class=\"headerlink\" title=\"modules\"></a>modules</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> formidable = <span class=\"built_in\">require</span>(<span class=\"string\">'formidable'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">dxlUpdate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(par)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.root = par.root;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.path = par.path;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = par.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    upload(req)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">let</span> imgName = <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">            form.encoding = <span class=\"string\">'utf-8'</span>;</span><br><span class=\"line\">            form.maxFieldsSize = <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\">            form.uploadDir = <span class=\"keyword\">this</span>.root;</span><br><span class=\"line\">            form.keepExtensions = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            form.parse(req, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, fields, files</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!err)&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"上传完成\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// console.log(files[imgName].path);</span></span><br><span class=\"line\">                    _this.fileMv(files[imgName]).then(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> resolve(d);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(err);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            form.on(<span class=\"string\">'progress'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bytesReceived, bytesExpected</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(((bytesReceived/bytesExpected)*<span class=\"number\">100</span>).toFixed(<span class=\"number\">2</span>) + <span class=\"string\">\"%\"</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fileMv(files)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> imgPath = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.path&#125;</span><span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.fileName()&#125;</span><span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.suffix(files)&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.root&#125;</span><span class=\"subst\">$&#123;imgPath&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            fs.rename(files.path,url,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,d</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!err)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(imgPath)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> reject(err)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fileName()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> yue = d.getMonth() + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> riqi =  (yue &gt; <span class=\"number\">9</span> ? yue : (<span class=\"string\">\"0\"</span> + yue) + d.getDate());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`/<span class=\"subst\">$&#123;d.getFullYear()&#125;</span><span class=\"subst\">$&#123;riqi&#125;</span><span class=\"subst\">$&#123;d.getTime()&#125;</span><span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">10</span>)&#125;</span>`</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    suffix(img)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(img.name.toLowerCase().indexOf(<span class=\"string\">\".jpeg\"</span>) != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"string\">\".jpg\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(img.name.toLowerCase().indexOf(<span class=\"string\">\".jpg\"</span>) != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"string\">\".jpg\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(img.name.toLowerCase().indexOf(<span class=\"string\">\".png\"</span>) != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"string\">\".png\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(img.name.toLowerCase().indexOf(<span class=\"string\">\".gif\"</span>) != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"string\">\".gif\"</span>;    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = dxlUpdate;</span><br></pre></td></tr></table></figure>\n<h3 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//图片上传</span></span><br><span class=\"line\">exports.upload = <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    co(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> dxlUpload(&#123;</span><br><span class=\"line\">            root: nodeServer.path[<span class=\"string\">\"oss-img\"</span>],</span><br><span class=\"line\">            path: <span class=\"string\">\"/happy_train\"</span>,</span><br><span class=\"line\">            name: <span class=\"string\">\"photo\"</span></span><br><span class=\"line\">          <span class=\"comment\">//对应着前端的字段 &lt;input name=\"photo\" type=\"file\" multiple accept=\"image/png,image/jpeg,video/mp4,audio/mp3\"/&gt;</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        img.upload(req).then(<span class=\"function\"><span class=\"params\">imgUrl</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(imgUrl);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.jsonp(jsonpData(<span class=\"number\">1</span>, <span class=\"string\">'success'</span>, BaseStaticUrl + imgUrl));<span class=\"comment\">//助力失败</span></span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.jsonp(jsonpData(<span class=\"number\">-1</span>, <span class=\"string\">'图片上传失败'</span>, e.toString()));</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.jsonp(jsonpData(<span class=\"number\">-1</span>, <span class=\"string\">'图片上传失败'</span>, e.toString()));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"前端页面\"><a href=\"#前端页面\" class=\"headerlink\" title=\"前端页面\"></a>前端页面</h3><h4 id=\"Form-表单请求\"><a href=\"#Form-表单请求\" class=\"headerlink\" title=\"Form 表单请求\"></a>Form 表单请求</h4><p>需要跳转新的页面</p>\n<h4 id=\"jquery-form-ajax-请求\"><a href=\"#jquery-form-ajax-请求\" class=\"headerlink\" title=\"jquery.form ajax 请求\"></a>jquery.form ajax 请求</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>jquery form 表单请求信息<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/jquery.form/4.2.2/jquery.form.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tf\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://www.daoxila.com/GongJu/activity/1.0/marriage/upload\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">name</span>=<span class=\"string\">\"upload_form\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"photo\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">multiple</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/png,image/jpeg,video/mp4,audio/mp3\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"上传图片\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn-upload\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"string\">\".btn-upload\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            $(<span class=\"string\">\"#tf\"</span>).ajaxSubmit(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"11111\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/liuhongfeng/p/5137027.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/liuhongfeng/p/5137027.html</a></p>\n<h2 id=\"解决方案二、Base64-处理方式\"><a href=\"#解决方案二、Base64-处理方式\" class=\"headerlink\" title=\"解决方案二、Base64 处理方式\"></a>解决方案二、Base64 处理方式</h2><ol>\n<li>前端首先获取图片信息，将图片转换为base64</li>\n<li>通过<strong>post</strong>请求，将转换的base64数据提交给接口</li>\n<li>后端接口获取到数据，然后写成图片，返回图片链接</li>\n</ol>\n<h3 id=\"后端处理\"><a href=\"#后端处理\" class=\"headerlink\" title=\"后端处理\"></a>后端处理</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//base64 图片下载</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\">exports.down_base64 = <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> imgData = req.body.imgUrl;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> base64Data = imgData.replace(<span class=\"regexp\">/^data:image\\/\\w+;base64,/</span>, <span class=\"string\">\"\"</span>);<span class=\"comment\">//过滤data:URL</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dataBuffer = <span class=\"keyword\">new</span> Buffer(base64Data, <span class=\"string\">'base64'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = (moment().format(<span class=\"string\">\"YYYYMMDDHHmmss\"</span>) + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> dist = path.join(nodeServer.path[<span class=\"string\">\"oss-img\"</span>], <span class=\"string\">\"/happy_train/\"</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\">    fs.writeFile(dist, dataBuffer, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> res.jsonp(jsonpData(<span class=\"number\">-1</span>, <span class=\"string\">'fail'</span>, err));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.jsonp(jsonpData(<span class=\"number\">1</span>, <span class=\"string\">'success'</span>, BaseStaticUrl + <span class=\"string\">\"/happy_train/\"</span> + name));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"前端请求\"><a href=\"#前端请求\" class=\"headerlink\" title=\"前端请求\"></a>前端请求</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>图片资源上传<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdn.bootcss.com/jquery/2.2.1/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./exif.min.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./processImg.min.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>图片上传：<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"up-id\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"showimage1\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"upface1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"UpFaceInput\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//按钮 显示图片节点  图片质量</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//iphone X 宽带设置为290时崩溃</span></span></span><br><span class=\"line\"><span class=\"javascript\">    compressImg(<span class=\"string\">'upface1'</span>, <span class=\"string\">'showimage1'</span>, <span class=\"number\">640</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">src</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> imgUrl = src.split(<span class=\"string\">','</span>)[<span class=\"number\">1</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">        $.post(<span class=\"string\">\"http://127.0.0.1/GongJu/activity/1.0/marriage/down_base64\"</span>, &#123; <span class=\"attr\">imgUrl</span>: imgUrl &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'上传并下载：'</span> + <span class=\"built_in\">JSON</span>.stringify(data))</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>引用exif.min.js 和processImg.min.js 依赖</li>\n<li>compressImg 设置宽带，实现等比例压缩，减少上传图片的体积</li>\n<li>若解析的base64数据量过多，可以设置bodyParser 解析请求数据的大小</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(bodyParser.json(&#123; <span class=\"attr\">limit</span>: <span class=\"string\">'10mb'</span> &#125;));</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;</span><br><span class=\"line\">    limit: <span class=\"string\">'10mb'</span>,</span><br><span class=\"line\">    extended: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.cnblogs.com/zhuxiaojie/p/4783939.html\" target=\"_blank\" rel=\"noopener\">使用ajax提交form表单，包括ajax文件上传</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>图片上传是当前wap开发中常用的业务场景，然而，不同的业务场景，需求也是不同的，有些业务需要将完整图片上传，有些需要将图片资源进行压缩。在当前前后端完全分离的模式下，前后端如何解决下列问题呢？</p>\n<ol>\n<li>跨域</li>\n<li>ajax 请求</li>\n<li>图片大小压缩</li>\n</ol>\n<h2 id=\"解决方案一、formidable\"><a href=\"#解决方案一、formidable\" class=\"headerlink\" title=\"解决方案一、formidable\"></a>解决方案一、formidable</h2><p>formidable模块实现了上传和编码图片和视频。它支持GB级上传数据处理，支持多种客户端数据提交。有极高的测试覆盖率，非常适合在生产环境中使用。</p>\n<p>maxFieldsSize属性限制了所有字段所占的字节数。如果超过了该字节数，将会报错。默认的字节数为2MB</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form.maxFieldsSize = 2*1024*1024</span><br></pre></td></tr></table></figure>\n<p>maxFields属性限制了解析请求字段的的数量。默认为1000个</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form.maxFields = 1000;</span><br></pre></td></tr></table></figure>\n<h3 id=\"modules\"><a href=\"#modules\" class=\"headerlink\" title=\"modules\"></a>modules</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> formidable = <span class=\"built_in\">require</span>(<span class=\"string\">'formidable'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">dxlUpdate</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(par)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.root = par.root;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.path = par.path;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = par.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    upload(req)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">let</span> imgName = <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">            form.encoding = <span class=\"string\">'utf-8'</span>;</span><br><span class=\"line\">            form.maxFieldsSize = <span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\">            form.uploadDir = <span class=\"keyword\">this</span>.root;</span><br><span class=\"line\">            form.keepExtensions = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            form.parse(req, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, fields, files</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!err)&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"上传完成\"</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// console.log(files[imgName].path);</span></span><br><span class=\"line\">                    _this.fileMv(files[imgName]).then(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> resolve(d);</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(err);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            form.on(<span class=\"string\">'progress'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bytesReceived, bytesExpected</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(((bytesReceived/bytesExpected)*<span class=\"number\">100</span>).toFixed(<span class=\"number\">2</span>) + <span class=\"string\">\"%\"</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fileMv(files)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> imgPath = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.path&#125;</span><span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.fileName()&#125;</span><span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.suffix(files)&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.root&#125;</span><span class=\"subst\">$&#123;imgPath&#125;</span>`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            fs.rename(files.path,url,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,d</span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!err)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> resolve(imgPath)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> reject(err)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fileName()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">        <span class=\"keyword\">let</span> yue = d.getMonth() + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> riqi =  (yue &gt; <span class=\"number\">9</span> ? yue : (<span class=\"string\">\"0\"</span> + yue) + d.getDate());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`/<span class=\"subst\">$&#123;d.getFullYear()&#125;</span><span class=\"subst\">$&#123;riqi&#125;</span><span class=\"subst\">$&#123;d.getTime()&#125;</span><span class=\"subst\">$&#123;<span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">10</span>)&#125;</span>`</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    suffix(img)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(img.name.toLowerCase().indexOf(<span class=\"string\">\".jpeg\"</span>) != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"string\">\".jpg\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(img.name.toLowerCase().indexOf(<span class=\"string\">\".jpg\"</span>) != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"string\">\".jpg\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(img.name.toLowerCase().indexOf(<span class=\"string\">\".png\"</span>) != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"string\">\".png\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(img.name.toLowerCase().indexOf(<span class=\"string\">\".gif\"</span>) != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"string\">\".gif\"</span>;    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = dxlUpdate;</span><br></pre></td></tr></table></figure>\n<h3 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//图片上传</span></span><br><span class=\"line\">exports.upload = <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    co(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> dxlUpload(&#123;</span><br><span class=\"line\">            root: nodeServer.path[<span class=\"string\">\"oss-img\"</span>],</span><br><span class=\"line\">            path: <span class=\"string\">\"/happy_train\"</span>,</span><br><span class=\"line\">            name: <span class=\"string\">\"photo\"</span></span><br><span class=\"line\">          <span class=\"comment\">//对应着前端的字段 &lt;input name=\"photo\" type=\"file\" multiple accept=\"image/png,image/jpeg,video/mp4,audio/mp3\"/&gt;</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        img.upload(req).then(<span class=\"function\"><span class=\"params\">imgUrl</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(imgUrl);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.jsonp(jsonpData(<span class=\"number\">1</span>, <span class=\"string\">'success'</span>, BaseStaticUrl + imgUrl));<span class=\"comment\">//助力失败</span></span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res.jsonp(jsonpData(<span class=\"number\">-1</span>, <span class=\"string\">'图片上传失败'</span>, e.toString()));</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.jsonp(jsonpData(<span class=\"number\">-1</span>, <span class=\"string\">'图片上传失败'</span>, e.toString()));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"前端页面\"><a href=\"#前端页面\" class=\"headerlink\" title=\"前端页面\"></a>前端页面</h3><h4 id=\"Form-表单请求\"><a href=\"#Form-表单请求\" class=\"headerlink\" title=\"Form 表单请求\"></a>Form 表单请求</h4><p>需要跳转新的页面</p>\n<h4 id=\"jquery-form-ajax-请求\"><a href=\"#jquery-form-ajax-请求\" class=\"headerlink\" title=\"jquery.form ajax 请求\"></a>jquery.form ajax 请求</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>jquery form 表单请求信息<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/jquery.form/4.2.2/jquery.form.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tf\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://www.daoxila.com/GongJu/activity/1.0/marriage/upload\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">name</span>=<span class=\"string\">\"upload_form\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"photo\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">multiple</span> <span class=\"attr\">accept</span>=<span class=\"string\">\"image/png,image/jpeg,video/mp4,audio/mp3\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"上传图片\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn-upload\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        $(<span class=\"string\">\".btn-upload\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            $(<span class=\"string\">\"#tf\"</span>).ajaxSubmit(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"11111\"</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/liuhongfeng/p/5137027.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/liuhongfeng/p/5137027.html</a></p>\n<h2 id=\"解决方案二、Base64-处理方式\"><a href=\"#解决方案二、Base64-处理方式\" class=\"headerlink\" title=\"解决方案二、Base64 处理方式\"></a>解决方案二、Base64 处理方式</h2><ol>\n<li>前端首先获取图片信息，将图片转换为base64</li>\n<li>通过<strong>post</strong>请求，将转换的base64数据提交给接口</li>\n<li>后端接口获取到数据，然后写成图片，返回图片链接</li>\n</ol>\n<h3 id=\"后端处理\"><a href=\"#后端处理\" class=\"headerlink\" title=\"后端处理\"></a>后端处理</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//base64 图片下载</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\">exports.down_base64 = <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> imgData = req.body.imgUrl;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> base64Data = imgData.replace(<span class=\"regexp\">/^data:image\\/\\w+;base64,/</span>, <span class=\"string\">\"\"</span>);<span class=\"comment\">//过滤data:URL</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> dataBuffer = <span class=\"keyword\">new</span> Buffer(base64Data, <span class=\"string\">'base64'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = (moment().format(<span class=\"string\">\"YYYYMMDDHHmmss\"</span>) + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> dist = path.join(nodeServer.path[<span class=\"string\">\"oss-img\"</span>], <span class=\"string\">\"/happy_train/\"</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\">    fs.writeFile(dist, dataBuffer, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> res.jsonp(jsonpData(<span class=\"number\">-1</span>, <span class=\"string\">'fail'</span>, err));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.jsonp(jsonpData(<span class=\"number\">1</span>, <span class=\"string\">'success'</span>, BaseStaticUrl + <span class=\"string\">\"/happy_train/\"</span> + name));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"前端请求\"><a href=\"#前端请求\" class=\"headerlink\" title=\"前端请求\"></a>前端请求</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>图片资源上传<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://cdn.bootcss.com/jquery/2.2.1/jquery.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./exif.min.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./processImg.min.js\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>图片上传：<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"up-id\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">id</span>=<span class=\"string\">\"showimage1\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"upface1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"UpFaceInput\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//按钮 显示图片节点  图片质量</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//iphone X 宽带设置为290时崩溃</span></span></span><br><span class=\"line\"><span class=\"javascript\">    compressImg(<span class=\"string\">'upface1'</span>, <span class=\"string\">'showimage1'</span>, <span class=\"number\">640</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">src</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> imgUrl = src.split(<span class=\"string\">','</span>)[<span class=\"number\">1</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">        $.post(<span class=\"string\">\"http://127.0.0.1/GongJu/activity/1.0/marriage/down_base64\"</span>, &#123; <span class=\"attr\">imgUrl</span>: imgUrl &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'上传并下载：'</span> + <span class=\"built_in\">JSON</span>.stringify(data))</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>引用exif.min.js 和processImg.min.js 依赖</li>\n<li>compressImg 设置宽带，实现等比例压缩，减少上传图片的体积</li>\n<li>若解析的base64数据量过多，可以设置bodyParser 解析请求数据的大小</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(bodyParser.json(&#123; <span class=\"attr\">limit</span>: <span class=\"string\">'10mb'</span> &#125;));</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;</span><br><span class=\"line\">    limit: <span class=\"string\">'10mb'</span>,</span><br><span class=\"line\">    extended: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.cnblogs.com/zhuxiaojie/p/4783939.html\" target=\"_blank\" rel=\"noopener\">使用ajax提交form表单，包括ajax文件上传</a></li>\n</ul>\n"},{"title":"npm 常用命令","_content":"\n## 简介NPM(Node Package Manger)\nNPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：\n1. 允许用户从NPM服务器下载别人编写的第三方包到本地使用。\n2. 允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。\n3. 允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。\n## npm 安装\n* Windows 下，一般情况，安装node.js 的同时，npm 也会同时安装。\n* Ubuntu 下\n```\nsudo apt-get install curl\ncurl http://npmjs.org/install.sh | sudo sh\n#或者\nsudo apt-get install npm\n#查看npm被安装到哪里\nwhereis npm \n#设置成全局：\nln -s [文件位置/npm]  /usr/local/bin/npm\n```\n## 配置镜像\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\nnpm install  --registry=https://registry.npm.taobao.org\nnpm config set registry http://registry.npmjs.org/\n```\n\n## npm 升级\n```\nnpm -g install npm ( 最新稳定版 ) 或\nnpm -g install npm@2.9.1 ( 指定版本 )\n```\n\n\n## 常用\n\n```\nnpm install -g pm2\nnpm install -g nodemon\nnpm install -g vue-cli\nnpm install -g  webpack\nnpm i -g bower  ## 升级\n```\n\n## 常用命令\n\n安装必要依赖\n```\nnpm install --production\n```\n\n安装开发依赖\n```\nnpm install --dev\n```\n\n安装全部依赖\n```\nnpm install\n```\n#### 全局安装辅助模块\n```\n$ npm install pm2 -g # 命令行安装 pm2\nnpm install -g cnpm  # 国内开发必用\nnpm install -g nodemon \n```\n#### 安装并更新package.json中的版本配置\n* 添加–save 参数安装的模块的名字及其版本信息会出现在package.json的dependencies选项中\n* 添加–save-dev 参数安装的模块的名字及其版本信息会出现在package.json的devDependencies选项中\n* 添加–save-optional 参数安装的模块的名字及其版本信息会出现在package.json的optionalDependencies选项中\n```\nnpm install <name> [–save|–save-dev|–save-optional]\n```\n\n#### 安装模块的config的tag配置中含有指定tag的版本\n```\nnpm install <name>@<tag>\nExample:\nnpm install sax@latest\n安装模块的指定版本\nnpm install <name>@<version>\n```\n\n#### 显示npm的bin目录\n```\nnpm bin\n```\n\n#### 设置npm配置\n```\nnpm config set <key> <value> [–global]\n```\n使用–global参数，设置全局配置\nExample:\n设置代理\n```\nnpm config set proxy=http://proxy.tencent.com:8080\n```\n#### 设置npm的镜像地址\n```\nnpm config set registry http://npm.oa.com\n```\n获取npm配置\nnpm config get <key>\nExample:\n#### 获取npm当前镜像地址\n```\nnpm config get registory\n```\n#### 删除npm配置\n```\nnpm config delete <key>\n```\nExample:\n#### 删除代理设置\n```\nnpm config delete proxy\n```\n#### 在编辑器中打开npm配置文件\n```\nnpm config edit\n```\n#### 交互式的创建package.json文件\n```\nnpm init\n```\n#### 创建模块的压缩包\n```\nnpm pack [<pkg> [<pkg> … ]]\n```\n如果没有参数，则npm会打包当前模块目录\n发布模块，发布后可通过名称来安装该模块\n```\nnpm publish <tarball>\nnpm publish <folder>\n```\n其中：\n<folder>：包含package.json文件的目录\n<tarball>：经过gzip压缩并归档的一个URL或文件路径，该压缩包包含单个目录，且该目录内有package.json文件\n#### 删除模块\n```\nnpm rm <name>\nnpm r <name>\nnpm uninstall <name>\nnpm un <name>\n```\n注意：不会删除package.json文件dependencies选项中对应的依赖配置\n#### 查找模块\n```\nnpm search [search terms ..]\nnpm s [search terms ..]\nnpm se [search terms ..]\n```\n查找匹配查找字符串的模块\n#### 更新模块\n```\nnpm update [-g] [<name> [<name> … ]]\n```\n更新指定name列表中的模块。-g参数更新全局安装的模块。\n如果没有指定name，且不是在某个模块内，会更新当前目录依赖的所有包都会被更新（包括全局和模块内）；如果当前目录在某个模块目录内，会更新该模块依赖的模块，所以不指定name直接运行npm update时，最好在某个模块内运行，以免更新到其他不想更新的模块。\n#### 执行脚本\n```\nnpm start [<name>]\nnpm stop [<name>]\nnpm test [<name>]\nnpm run [<name>]\n```\n运行package的start脚本，该脚本写在package.json文件scripts的start字段中。\n该字段的值可以是当前系统控制台可执行的脚本，也可以是当前系统可执行文件的路径。\n如果不传name参数，则执行当前目录下package.json文件中定义的脚本。\n详见https://npmjs.org/doc/misc/npm-scripts.html\n#### package.json文件\n模块的配置文件，详见https://npmjs.org/doc/files/package.json.html\n\n\n## 发布项目到npm\n1. 在[NPM官网](https://www.npmjs.com/)注册账号\n2. 用户验证，命令行执行\n\n```\nnpm adduser\nnpm login # 登录\nnpm who am i\n```\n\n3. 发布模块，在模块的根文件夹执行\n```\nnpm publish\n```\n4. 更新版本\n> 如果是git库时，会为新版本号创建一条提交信息，package版本号会自动递增。\n```\nnpm version 0.0.4\nnpm publish\n```\n\n5. 将代码同步到github.com\n\n## npm常用命令\n```\nnpm search module_name 查找模块\nnpm docs module_name 查找模块文档\nnpm install 安装package.json指定的所有模块\nnpm start\nnpm test\ncnpm install gulp --save-dev\n```\n\n## Package.json 属性说明\n<pre>\n   name - 包名。\n   version - 包的版本号。\n   description - 包的描述。\n   homepage - 包的官网 url 。\n   author - 包的作者姓名。\n   contributors - 包的其他贡献者姓名。\n   dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。\n   repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。\n   main - main 字段是一个模块ID，它是一个指向你程序的主要项目。就是说，如果你包的名字叫 express，然后用户安装它，然后require(\"express\")。\n   keywords - 关键字\n</pre>\n\n\n\n","source":"_posts/npm.md","raw":"---\ntitle: npm 常用命令\ntags: node-tools\n---\n\n## 简介NPM(Node Package Manger)\nNPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：\n1. 允许用户从NPM服务器下载别人编写的第三方包到本地使用。\n2. 允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。\n3. 允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。\n## npm 安装\n* Windows 下，一般情况，安装node.js 的同时，npm 也会同时安装。\n* Ubuntu 下\n```\nsudo apt-get install curl\ncurl http://npmjs.org/install.sh | sudo sh\n#或者\nsudo apt-get install npm\n#查看npm被安装到哪里\nwhereis npm \n#设置成全局：\nln -s [文件位置/npm]  /usr/local/bin/npm\n```\n## 配置镜像\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\nnpm install  --registry=https://registry.npm.taobao.org\nnpm config set registry http://registry.npmjs.org/\n```\n\n## npm 升级\n```\nnpm -g install npm ( 最新稳定版 ) 或\nnpm -g install npm@2.9.1 ( 指定版本 )\n```\n\n\n## 常用\n\n```\nnpm install -g pm2\nnpm install -g nodemon\nnpm install -g vue-cli\nnpm install -g  webpack\nnpm i -g bower  ## 升级\n```\n\n## 常用命令\n\n安装必要依赖\n```\nnpm install --production\n```\n\n安装开发依赖\n```\nnpm install --dev\n```\n\n安装全部依赖\n```\nnpm install\n```\n#### 全局安装辅助模块\n```\n$ npm install pm2 -g # 命令行安装 pm2\nnpm install -g cnpm  # 国内开发必用\nnpm install -g nodemon \n```\n#### 安装并更新package.json中的版本配置\n* 添加–save 参数安装的模块的名字及其版本信息会出现在package.json的dependencies选项中\n* 添加–save-dev 参数安装的模块的名字及其版本信息会出现在package.json的devDependencies选项中\n* 添加–save-optional 参数安装的模块的名字及其版本信息会出现在package.json的optionalDependencies选项中\n```\nnpm install <name> [–save|–save-dev|–save-optional]\n```\n\n#### 安装模块的config的tag配置中含有指定tag的版本\n```\nnpm install <name>@<tag>\nExample:\nnpm install sax@latest\n安装模块的指定版本\nnpm install <name>@<version>\n```\n\n#### 显示npm的bin目录\n```\nnpm bin\n```\n\n#### 设置npm配置\n```\nnpm config set <key> <value> [–global]\n```\n使用–global参数，设置全局配置\nExample:\n设置代理\n```\nnpm config set proxy=http://proxy.tencent.com:8080\n```\n#### 设置npm的镜像地址\n```\nnpm config set registry http://npm.oa.com\n```\n获取npm配置\nnpm config get <key>\nExample:\n#### 获取npm当前镜像地址\n```\nnpm config get registory\n```\n#### 删除npm配置\n```\nnpm config delete <key>\n```\nExample:\n#### 删除代理设置\n```\nnpm config delete proxy\n```\n#### 在编辑器中打开npm配置文件\n```\nnpm config edit\n```\n#### 交互式的创建package.json文件\n```\nnpm init\n```\n#### 创建模块的压缩包\n```\nnpm pack [<pkg> [<pkg> … ]]\n```\n如果没有参数，则npm会打包当前模块目录\n发布模块，发布后可通过名称来安装该模块\n```\nnpm publish <tarball>\nnpm publish <folder>\n```\n其中：\n<folder>：包含package.json文件的目录\n<tarball>：经过gzip压缩并归档的一个URL或文件路径，该压缩包包含单个目录，且该目录内有package.json文件\n#### 删除模块\n```\nnpm rm <name>\nnpm r <name>\nnpm uninstall <name>\nnpm un <name>\n```\n注意：不会删除package.json文件dependencies选项中对应的依赖配置\n#### 查找模块\n```\nnpm search [search terms ..]\nnpm s [search terms ..]\nnpm se [search terms ..]\n```\n查找匹配查找字符串的模块\n#### 更新模块\n```\nnpm update [-g] [<name> [<name> … ]]\n```\n更新指定name列表中的模块。-g参数更新全局安装的模块。\n如果没有指定name，且不是在某个模块内，会更新当前目录依赖的所有包都会被更新（包括全局和模块内）；如果当前目录在某个模块目录内，会更新该模块依赖的模块，所以不指定name直接运行npm update时，最好在某个模块内运行，以免更新到其他不想更新的模块。\n#### 执行脚本\n```\nnpm start [<name>]\nnpm stop [<name>]\nnpm test [<name>]\nnpm run [<name>]\n```\n运行package的start脚本，该脚本写在package.json文件scripts的start字段中。\n该字段的值可以是当前系统控制台可执行的脚本，也可以是当前系统可执行文件的路径。\n如果不传name参数，则执行当前目录下package.json文件中定义的脚本。\n详见https://npmjs.org/doc/misc/npm-scripts.html\n#### package.json文件\n模块的配置文件，详见https://npmjs.org/doc/files/package.json.html\n\n\n## 发布项目到npm\n1. 在[NPM官网](https://www.npmjs.com/)注册账号\n2. 用户验证，命令行执行\n\n```\nnpm adduser\nnpm login # 登录\nnpm who am i\n```\n\n3. 发布模块，在模块的根文件夹执行\n```\nnpm publish\n```\n4. 更新版本\n> 如果是git库时，会为新版本号创建一条提交信息，package版本号会自动递增。\n```\nnpm version 0.0.4\nnpm publish\n```\n\n5. 将代码同步到github.com\n\n## npm常用命令\n```\nnpm search module_name 查找模块\nnpm docs module_name 查找模块文档\nnpm install 安装package.json指定的所有模块\nnpm start\nnpm test\ncnpm install gulp --save-dev\n```\n\n## Package.json 属性说明\n<pre>\n   name - 包名。\n   version - 包的版本号。\n   description - 包的描述。\n   homepage - 包的官网 url 。\n   author - 包的作者姓名。\n   contributors - 包的其他贡献者姓名。\n   dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。\n   repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。\n   main - main 字段是一个模块ID，它是一个指向你程序的主要项目。就是说，如果你包的名字叫 express，然后用户安装它，然后require(\"express\")。\n   keywords - 关键字\n</pre>\n\n\n\n","slug":"npm","published":1,"date":"2018-04-27T06:31:01.951Z","updated":"2018-04-27T07:27:29.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghshevv000vn1yr536w11x1","content":"<h2 id=\"简介NPM-Node-Package-Manger\"><a href=\"#简介NPM-Node-Package-Manger\" class=\"headerlink\" title=\"简介NPM(Node Package Manger)\"></a>简介NPM(Node Package Manger)</h2><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>\n<ol>\n<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>\n<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>\n<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。<h2 id=\"npm-安装\"><a href=\"#npm-安装\" class=\"headerlink\" title=\"npm 安装\"></a>npm 安装</h2></li>\n</ol>\n<ul>\n<li>Windows 下，一般情况，安装node.js 的同时，npm 也会同时安装。</li>\n<li>Ubuntu 下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install curl</span><br><span class=\"line\">curl http://npmjs.org/install.sh | sudo sh</span><br><span class=\"line\">#或者</span><br><span class=\"line\">sudo apt-get install npm</span><br><span class=\"line\">#查看npm被安装到哪里</span><br><span class=\"line\">whereis npm </span><br><span class=\"line\">#设置成全局：</span><br><span class=\"line\">ln -s [文件位置/npm]  /usr/local/bin/npm</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"配置镜像\"><a href=\"#配置镜像\" class=\"headerlink\" title=\"配置镜像\"></a>配置镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">npm install  --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">npm config set registry http://registry.npmjs.org/</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-升级\"><a href=\"#npm-升级\" class=\"headerlink\" title=\"npm 升级\"></a>npm 升级</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -g install npm ( 最新稳定版 ) 或</span><br><span class=\"line\">npm -g install npm@2.9.1 ( 指定版本 )</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用\"><a href=\"#常用\" class=\"headerlink\" title=\"常用\"></a>常用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br><span class=\"line\">npm install -g nodemon</span><br><span class=\"line\">npm install -g vue-cli</span><br><span class=\"line\">npm install -g  webpack</span><br><span class=\"line\">npm i -g bower  ## 升级</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p>安装必要依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --production</span><br></pre></td></tr></table></figure></p>\n<p>安装开发依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --dev</span><br></pre></td></tr></table></figure></p>\n<p>安装全部依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"全局安装辅助模块\"><a href=\"#全局安装辅助模块\" class=\"headerlink\" title=\"全局安装辅助模块\"></a>全局安装辅助模块</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install pm2 -g # 命令行安装 pm2</span><br><span class=\"line\">npm install -g cnpm  # 国内开发必用</span><br><span class=\"line\">npm install -g nodemon</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装并更新package-json中的版本配置\"><a href=\"#安装并更新package-json中的版本配置\" class=\"headerlink\" title=\"安装并更新package.json中的版本配置\"></a>安装并更新package.json中的版本配置</h4><ul>\n<li>添加–save 参数安装的模块的名字及其版本信息会出现在package.json的dependencies选项中</li>\n<li>添加–save-dev 参数安装的模块的名字及其版本信息会出现在package.json的devDependencies选项中</li>\n<li>添加–save-optional 参数安装的模块的名字及其版本信息会出现在package.json的optionalDependencies选项中<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install &lt;name&gt; [–save|–save-dev|–save-optional]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"安装模块的config的tag配置中含有指定tag的版本\"><a href=\"#安装模块的config的tag配置中含有指定tag的版本\" class=\"headerlink\" title=\"安装模块的config的tag配置中含有指定tag的版本\"></a>安装模块的config的tag配置中含有指定tag的版本</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install &lt;name&gt;@&lt;tag&gt;</span><br><span class=\"line\">Example:</span><br><span class=\"line\">npm install sax@latest</span><br><span class=\"line\">安装模块的指定版本</span><br><span class=\"line\">npm install &lt;name&gt;@&lt;version&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"显示npm的bin目录\"><a href=\"#显示npm的bin目录\" class=\"headerlink\" title=\"显示npm的bin目录\"></a>显示npm的bin目录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm bin</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置npm配置\"><a href=\"#设置npm配置\" class=\"headerlink\" title=\"设置npm配置\"></a>设置npm配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set &lt;key&gt; &lt;value&gt; [–global]</span><br></pre></td></tr></table></figure>\n<p>使用–global参数，设置全局配置<br>Example:<br>设置代理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set proxy=http://proxy.tencent.com:8080</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"设置npm的镜像地址\"><a href=\"#设置npm的镜像地址\" class=\"headerlink\" title=\"设置npm的镜像地址\"></a>设置npm的镜像地址</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry http://npm.oa.com</span><br></pre></td></tr></table></figure>\n<p>获取npm配置<br>npm config get <key><br>Example:</key></p>\n<h4 id=\"获取npm当前镜像地址\"><a href=\"#获取npm当前镜像地址\" class=\"headerlink\" title=\"获取npm当前镜像地址\"></a>获取npm当前镜像地址</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get registory</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除npm配置\"><a href=\"#删除npm配置\" class=\"headerlink\" title=\"删除npm配置\"></a>删除npm配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config delete &lt;key&gt;</span><br></pre></td></tr></table></figure>\n<p>Example:</p>\n<h4 id=\"删除代理设置\"><a href=\"#删除代理设置\" class=\"headerlink\" title=\"删除代理设置\"></a>删除代理设置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config delete proxy</span><br></pre></td></tr></table></figure>\n<h4 id=\"在编辑器中打开npm配置文件\"><a href=\"#在编辑器中打开npm配置文件\" class=\"headerlink\" title=\"在编辑器中打开npm配置文件\"></a>在编辑器中打开npm配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config edit</span><br></pre></td></tr></table></figure>\n<h4 id=\"交互式的创建package-json文件\"><a href=\"#交互式的创建package-json文件\" class=\"headerlink\" title=\"交互式的创建package.json文件\"></a>交互式的创建package.json文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建模块的压缩包\"><a href=\"#创建模块的压缩包\" class=\"headerlink\" title=\"创建模块的压缩包\"></a>创建模块的压缩包</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm pack [&lt;pkg&gt; [&lt;pkg&gt; … ]]</span><br></pre></td></tr></table></figure>\n<p>如果没有参数，则npm会打包当前模块目录<br>发布模块，发布后可通过名称来安装该模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish &lt;tarball&gt;</span><br><span class=\"line\">npm publish &lt;folder&gt;</span><br></pre></td></tr></table></figure></p>\n<p>其中：</p>\n<p><folder>：包含package.json文件的目录</folder></p>\n<p><tarball>：经过gzip压缩并归档的一个URL或文件路径，该压缩包包含单个目录，且该目录内有package.json文件</tarball></p>\n<h4 id=\"删除模块\"><a href=\"#删除模块\" class=\"headerlink\" title=\"删除模块\"></a>删除模块</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm rm &lt;name&gt;</span><br><span class=\"line\">npm r &lt;name&gt;</span><br><span class=\"line\">npm uninstall &lt;name&gt;</span><br><span class=\"line\">npm un &lt;name&gt;</span><br></pre></td></tr></table></figure>\n<p>注意：不会删除package.json文件dependencies选项中对应的依赖配置</p>\n<h4 id=\"查找模块\"><a href=\"#查找模块\" class=\"headerlink\" title=\"查找模块\"></a>查找模块</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm search [search terms ..]</span><br><span class=\"line\">npm s [search terms ..]</span><br><span class=\"line\">npm se [search terms ..]</span><br></pre></td></tr></table></figure>\n<p>查找匹配查找字符串的模块</p>\n<h4 id=\"更新模块\"><a href=\"#更新模块\" class=\"headerlink\" title=\"更新模块\"></a>更新模块</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update [-g] [&lt;name&gt; [&lt;name&gt; … ]]</span><br></pre></td></tr></table></figure>\n<p>更新指定name列表中的模块。-g参数更新全局安装的模块。<br>如果没有指定name，且不是在某个模块内，会更新当前目录依赖的所有包都会被更新（包括全局和模块内）；如果当前目录在某个模块目录内，会更新该模块依赖的模块，所以不指定name直接运行npm update时，最好在某个模块内运行，以免更新到其他不想更新的模块。</p>\n<h4 id=\"执行脚本\"><a href=\"#执行脚本\" class=\"headerlink\" title=\"执行脚本\"></a>执行脚本</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start [&lt;name&gt;]</span><br><span class=\"line\">npm stop [&lt;name&gt;]</span><br><span class=\"line\">npm test [&lt;name&gt;]</span><br><span class=\"line\">npm run [&lt;name&gt;]</span><br></pre></td></tr></table></figure>\n<p>运行package的start脚本，该脚本写在package.json文件scripts的start字段中。<br>该字段的值可以是当前系统控制台可执行的脚本，也可以是当前系统可执行文件的路径。<br>如果不传name参数，则执行当前目录下package.json文件中定义的脚本。<br>详见<a href=\"https://npmjs.org/doc/misc/npm-scripts.html\" target=\"_blank\" rel=\"noopener\">https://npmjs.org/doc/misc/npm-scripts.html</a></p>\n<h4 id=\"package-json文件\"><a href=\"#package-json文件\" class=\"headerlink\" title=\"package.json文件\"></a>package.json文件</h4><p>模块的配置文件，详见<a href=\"https://npmjs.org/doc/files/package.json.html\" target=\"_blank\" rel=\"noopener\">https://npmjs.org/doc/files/package.json.html</a></p>\n<h2 id=\"发布项目到npm\"><a href=\"#发布项目到npm\" class=\"headerlink\" title=\"发布项目到npm\"></a>发布项目到npm</h2><ol>\n<li>在<a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener\">NPM官网</a>注册账号</li>\n<li>用户验证，命令行执行</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm adduser</span><br><span class=\"line\">npm login # 登录</span><br><span class=\"line\">npm who am i</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><p>发布模块，在模块的根文件夹执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新版本</p>\n<blockquote>\n<p>如果是git库时，会为新版本号创建一条提交信息，package版本号会自动递增。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm version 0.0.4</span><br><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>将代码同步到github.com</p>\n</li>\n</ol>\n<h2 id=\"npm常用命令\"><a href=\"#npm常用命令\" class=\"headerlink\" title=\"npm常用命令\"></a>npm常用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm search module_name 查找模块</span><br><span class=\"line\">npm docs module_name 查找模块文档</span><br><span class=\"line\">npm install 安装package.json指定的所有模块</span><br><span class=\"line\">npm start</span><br><span class=\"line\">npm test</span><br><span class=\"line\">cnpm install gulp --save-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"Package-json-属性说明\"><a href=\"#Package-json-属性说明\" class=\"headerlink\" title=\"Package.json 属性说明\"></a>Package.json 属性说明</h2><pre>\n   name - 包名。\n   version - 包的版本号。\n   description - 包的描述。\n   homepage - 包的官网 url 。\n   author - 包的作者姓名。\n   contributors - 包的其他贡献者姓名。\n   dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。\n   repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。\n   main - main 字段是一个模块ID，它是一个指向你程序的主要项目。就是说，如果你包的名字叫 express，然后用户安装它，然后require(\"express\")。\n   keywords - 关键字\n</pre>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介NPM-Node-Package-Manger\"><a href=\"#简介NPM-Node-Package-Manger\" class=\"headerlink\" title=\"简介NPM(Node Package Manger)\"></a>简介NPM(Node Package Manger)</h2><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>\n<ol>\n<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>\n<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>\n<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。<h2 id=\"npm-安装\"><a href=\"#npm-安装\" class=\"headerlink\" title=\"npm 安装\"></a>npm 安装</h2></li>\n</ol>\n<ul>\n<li>Windows 下，一般情况，安装node.js 的同时，npm 也会同时安装。</li>\n<li>Ubuntu 下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install curl</span><br><span class=\"line\">curl http://npmjs.org/install.sh | sudo sh</span><br><span class=\"line\">#或者</span><br><span class=\"line\">sudo apt-get install npm</span><br><span class=\"line\">#查看npm被安装到哪里</span><br><span class=\"line\">whereis npm </span><br><span class=\"line\">#设置成全局：</span><br><span class=\"line\">ln -s [文件位置/npm]  /usr/local/bin/npm</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"配置镜像\"><a href=\"#配置镜像\" class=\"headerlink\" title=\"配置镜像\"></a>配置镜像</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">npm install  --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">npm config set registry http://registry.npmjs.org/</span><br></pre></td></tr></table></figure>\n<h2 id=\"npm-升级\"><a href=\"#npm-升级\" class=\"headerlink\" title=\"npm 升级\"></a>npm 升级</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -g install npm ( 最新稳定版 ) 或</span><br><span class=\"line\">npm -g install npm@2.9.1 ( 指定版本 )</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用\"><a href=\"#常用\" class=\"headerlink\" title=\"常用\"></a>常用</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br><span class=\"line\">npm install -g nodemon</span><br><span class=\"line\">npm install -g vue-cli</span><br><span class=\"line\">npm install -g  webpack</span><br><span class=\"line\">npm i -g bower  ## 升级</span><br></pre></td></tr></table></figure>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><p>安装必要依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --production</span><br></pre></td></tr></table></figure></p>\n<p>安装开发依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --dev</span><br></pre></td></tr></table></figure></p>\n<p>安装全部依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"全局安装辅助模块\"><a href=\"#全局安装辅助模块\" class=\"headerlink\" title=\"全局安装辅助模块\"></a>全局安装辅助模块</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install pm2 -g # 命令行安装 pm2</span><br><span class=\"line\">npm install -g cnpm  # 国内开发必用</span><br><span class=\"line\">npm install -g nodemon</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装并更新package-json中的版本配置\"><a href=\"#安装并更新package-json中的版本配置\" class=\"headerlink\" title=\"安装并更新package.json中的版本配置\"></a>安装并更新package.json中的版本配置</h4><ul>\n<li>添加–save 参数安装的模块的名字及其版本信息会出现在package.json的dependencies选项中</li>\n<li>添加–save-dev 参数安装的模块的名字及其版本信息会出现在package.json的devDependencies选项中</li>\n<li>添加–save-optional 参数安装的模块的名字及其版本信息会出现在package.json的optionalDependencies选项中<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install &lt;name&gt; [–save|–save-dev|–save-optional]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"安装模块的config的tag配置中含有指定tag的版本\"><a href=\"#安装模块的config的tag配置中含有指定tag的版本\" class=\"headerlink\" title=\"安装模块的config的tag配置中含有指定tag的版本\"></a>安装模块的config的tag配置中含有指定tag的版本</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install &lt;name&gt;@&lt;tag&gt;</span><br><span class=\"line\">Example:</span><br><span class=\"line\">npm install sax@latest</span><br><span class=\"line\">安装模块的指定版本</span><br><span class=\"line\">npm install &lt;name&gt;@&lt;version&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"显示npm的bin目录\"><a href=\"#显示npm的bin目录\" class=\"headerlink\" title=\"显示npm的bin目录\"></a>显示npm的bin目录</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm bin</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置npm配置\"><a href=\"#设置npm配置\" class=\"headerlink\" title=\"设置npm配置\"></a>设置npm配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set &lt;key&gt; &lt;value&gt; [–global]</span><br></pre></td></tr></table></figure>\n<p>使用–global参数，设置全局配置<br>Example:<br>设置代理<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set proxy=http://proxy.tencent.com:8080</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"设置npm的镜像地址\"><a href=\"#设置npm的镜像地址\" class=\"headerlink\" title=\"设置npm的镜像地址\"></a>设置npm的镜像地址</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry http://npm.oa.com</span><br></pre></td></tr></table></figure>\n<p>获取npm配置<br>npm config get <key><br>Example:</key></p>\n<h4 id=\"获取npm当前镜像地址\"><a href=\"#获取npm当前镜像地址\" class=\"headerlink\" title=\"获取npm当前镜像地址\"></a>获取npm当前镜像地址</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get registory</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除npm配置\"><a href=\"#删除npm配置\" class=\"headerlink\" title=\"删除npm配置\"></a>删除npm配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config delete &lt;key&gt;</span><br></pre></td></tr></table></figure>\n<p>Example:</p>\n<h4 id=\"删除代理设置\"><a href=\"#删除代理设置\" class=\"headerlink\" title=\"删除代理设置\"></a>删除代理设置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config delete proxy</span><br></pre></td></tr></table></figure>\n<h4 id=\"在编辑器中打开npm配置文件\"><a href=\"#在编辑器中打开npm配置文件\" class=\"headerlink\" title=\"在编辑器中打开npm配置文件\"></a>在编辑器中打开npm配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config edit</span><br></pre></td></tr></table></figure>\n<h4 id=\"交互式的创建package-json文件\"><a href=\"#交互式的创建package-json文件\" class=\"headerlink\" title=\"交互式的创建package.json文件\"></a>交互式的创建package.json文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建模块的压缩包\"><a href=\"#创建模块的压缩包\" class=\"headerlink\" title=\"创建模块的压缩包\"></a>创建模块的压缩包</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm pack [&lt;pkg&gt; [&lt;pkg&gt; … ]]</span><br></pre></td></tr></table></figure>\n<p>如果没有参数，则npm会打包当前模块目录<br>发布模块，发布后可通过名称来安装该模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish &lt;tarball&gt;</span><br><span class=\"line\">npm publish &lt;folder&gt;</span><br></pre></td></tr></table></figure></p>\n<p>其中：</p>\n<p><folder>：包含package.json文件的目录</folder></p>\n<p><tarball>：经过gzip压缩并归档的一个URL或文件路径，该压缩包包含单个目录，且该目录内有package.json文件</tarball></p>\n<h4 id=\"删除模块\"><a href=\"#删除模块\" class=\"headerlink\" title=\"删除模块\"></a>删除模块</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm rm &lt;name&gt;</span><br><span class=\"line\">npm r &lt;name&gt;</span><br><span class=\"line\">npm uninstall &lt;name&gt;</span><br><span class=\"line\">npm un &lt;name&gt;</span><br></pre></td></tr></table></figure>\n<p>注意：不会删除package.json文件dependencies选项中对应的依赖配置</p>\n<h4 id=\"查找模块\"><a href=\"#查找模块\" class=\"headerlink\" title=\"查找模块\"></a>查找模块</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm search [search terms ..]</span><br><span class=\"line\">npm s [search terms ..]</span><br><span class=\"line\">npm se [search terms ..]</span><br></pre></td></tr></table></figure>\n<p>查找匹配查找字符串的模块</p>\n<h4 id=\"更新模块\"><a href=\"#更新模块\" class=\"headerlink\" title=\"更新模块\"></a>更新模块</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update [-g] [&lt;name&gt; [&lt;name&gt; … ]]</span><br></pre></td></tr></table></figure>\n<p>更新指定name列表中的模块。-g参数更新全局安装的模块。<br>如果没有指定name，且不是在某个模块内，会更新当前目录依赖的所有包都会被更新（包括全局和模块内）；如果当前目录在某个模块目录内，会更新该模块依赖的模块，所以不指定name直接运行npm update时，最好在某个模块内运行，以免更新到其他不想更新的模块。</p>\n<h4 id=\"执行脚本\"><a href=\"#执行脚本\" class=\"headerlink\" title=\"执行脚本\"></a>执行脚本</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start [&lt;name&gt;]</span><br><span class=\"line\">npm stop [&lt;name&gt;]</span><br><span class=\"line\">npm test [&lt;name&gt;]</span><br><span class=\"line\">npm run [&lt;name&gt;]</span><br></pre></td></tr></table></figure>\n<p>运行package的start脚本，该脚本写在package.json文件scripts的start字段中。<br>该字段的值可以是当前系统控制台可执行的脚本，也可以是当前系统可执行文件的路径。<br>如果不传name参数，则执行当前目录下package.json文件中定义的脚本。<br>详见<a href=\"https://npmjs.org/doc/misc/npm-scripts.html\" target=\"_blank\" rel=\"noopener\">https://npmjs.org/doc/misc/npm-scripts.html</a></p>\n<h4 id=\"package-json文件\"><a href=\"#package-json文件\" class=\"headerlink\" title=\"package.json文件\"></a>package.json文件</h4><p>模块的配置文件，详见<a href=\"https://npmjs.org/doc/files/package.json.html\" target=\"_blank\" rel=\"noopener\">https://npmjs.org/doc/files/package.json.html</a></p>\n<h2 id=\"发布项目到npm\"><a href=\"#发布项目到npm\" class=\"headerlink\" title=\"发布项目到npm\"></a>发布项目到npm</h2><ol>\n<li>在<a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener\">NPM官网</a>注册账号</li>\n<li>用户验证，命令行执行</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm adduser</span><br><span class=\"line\">npm login # 登录</span><br><span class=\"line\">npm who am i</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><p>发布模块，在模块的根文件夹执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新版本</p>\n<blockquote>\n<p>如果是git库时，会为新版本号创建一条提交信息，package版本号会自动递增。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm version 0.0.4</span><br><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>将代码同步到github.com</p>\n</li>\n</ol>\n<h2 id=\"npm常用命令\"><a href=\"#npm常用命令\" class=\"headerlink\" title=\"npm常用命令\"></a>npm常用命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm search module_name 查找模块</span><br><span class=\"line\">npm docs module_name 查找模块文档</span><br><span class=\"line\">npm install 安装package.json指定的所有模块</span><br><span class=\"line\">npm start</span><br><span class=\"line\">npm test</span><br><span class=\"line\">cnpm install gulp --save-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"Package-json-属性说明\"><a href=\"#Package-json-属性说明\" class=\"headerlink\" title=\"Package.json 属性说明\"></a>Package.json 属性说明</h2><pre>\n   name - 包名。\n   version - 包的版本号。\n   description - 包的描述。\n   homepage - 包的官网 url 。\n   author - 包的作者姓名。\n   contributors - 包的其他贡献者姓名。\n   dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。\n   repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。\n   main - main 字段是一个模块ID，它是一个指向你程序的主要项目。就是说，如果你包的名字叫 express，然后用户安装它，然后require(\"express\")。\n   keywords - 关键字\n</pre>\n\n\n\n"},{"layout":"post","title":"记前端按钮一次点击重复请求的问题处理","date":"2017-08-17T09:55:03.000Z","_content":"\n## 分析产生重复请求的原因\n### 一、 前端js 未做限制 每点击一次就会请求一次\n\n### 二、 jQuery 或者 vue.js 等重复 加载初始化方法，将用户点击事件累加\n加载了三遍，点击btn事件了，其内部方法将会被触发3次\n```js\nvar init = function(){\n\t$('#btn').click(function(){\n\t\t//请求事件\n\t});\n};\n\ninit();\ninit();\ninit();\n\n```\n### 三、 jquery 本身处理有一定的延时性（时间极短）\n1. 使用原生js，能够实时响应。设置isAllowSubmit为true,第一遍请求时，设置为false,在ajax未响应时，下面的点击事件是无发\n重复调用ajax请求的。\n\n```js\n\nvar GiveEntity = {};\nvar isAllowSubmit = true;\n\nGiveEntity.submit = function (isShare) {\n\tif (isAllowSubmit) {\n\t\tisAllowSubmit = false;\n\t\t$('#btnConfirm').unbind('click').html('loading...');\n\n\t\t$.post('/' + app + '/create/record', params, function (data) {\n\t\t\tGiveEntity.isAllowSubmit = true;\n\n\t\t\t$('#btnConfirm').html('确认').click(function () {\n\t\t\t\tGiveEntity.loading(1)\n\t\t\t\t$(this).unbind('click').html('loading...');\n\t\t\t\tGiveEntity.submit();\n\t\t\t});\n\t\t})\n\n\t}\n}\n\n$('#btnConfirm').unbind('click').html('确认').click(function () {\n\tGiveEntity.loading(1)\n\t$(this).unbind('click').html('loading...');\n\tGiveEntity.submit();\n});\n\n","source":"_posts/repeat-request.md","raw":"---\nlayout: post\ntitle: 记前端按钮一次点击重复请求的问题处理 \ndate: 2017-08-17 17:55:03\ntags: javascript\n---\n\n## 分析产生重复请求的原因\n### 一、 前端js 未做限制 每点击一次就会请求一次\n\n### 二、 jQuery 或者 vue.js 等重复 加载初始化方法，将用户点击事件累加\n加载了三遍，点击btn事件了，其内部方法将会被触发3次\n```js\nvar init = function(){\n\t$('#btn').click(function(){\n\t\t//请求事件\n\t});\n};\n\ninit();\ninit();\ninit();\n\n```\n### 三、 jquery 本身处理有一定的延时性（时间极短）\n1. 使用原生js，能够实时响应。设置isAllowSubmit为true,第一遍请求时，设置为false,在ajax未响应时，下面的点击事件是无发\n重复调用ajax请求的。\n\n```js\n\nvar GiveEntity = {};\nvar isAllowSubmit = true;\n\nGiveEntity.submit = function (isShare) {\n\tif (isAllowSubmit) {\n\t\tisAllowSubmit = false;\n\t\t$('#btnConfirm').unbind('click').html('loading...');\n\n\t\t$.post('/' + app + '/create/record', params, function (data) {\n\t\t\tGiveEntity.isAllowSubmit = true;\n\n\t\t\t$('#btnConfirm').html('确认').click(function () {\n\t\t\t\tGiveEntity.loading(1)\n\t\t\t\t$(this).unbind('click').html('loading...');\n\t\t\t\tGiveEntity.submit();\n\t\t\t});\n\t\t})\n\n\t}\n}\n\n$('#btnConfirm').unbind('click').html('确认').click(function () {\n\tGiveEntity.loading(1)\n\t$(this).unbind('click').html('loading...');\n\tGiveEntity.submit();\n});\n\n","slug":"repeat-request","published":1,"updated":"2018-04-27T06:31:01.952Z","comments":1,"photos":[],"link":"","_id":"cjghshevx000wn1yr501xbchb","content":"<h2 id=\"分析产生重复请求的原因\"><a href=\"#分析产生重复请求的原因\" class=\"headerlink\" title=\"分析产生重复请求的原因\"></a>分析产生重复请求的原因</h2><h3 id=\"一、-前端js-未做限制-每点击一次就会请求一次\"><a href=\"#一、-前端js-未做限制-每点击一次就会请求一次\" class=\"headerlink\" title=\"一、 前端js 未做限制 每点击一次就会请求一次\"></a>一、 前端js 未做限制 每点击一次就会请求一次</h3><h3 id=\"二、-jQuery-或者-vue-js-等重复-加载初始化方法，将用户点击事件累加\"><a href=\"#二、-jQuery-或者-vue-js-等重复-加载初始化方法，将用户点击事件累加\" class=\"headerlink\" title=\"二、 jQuery 或者 vue.js 等重复 加载初始化方法，将用户点击事件累加\"></a>二、 jQuery 或者 vue.js 等重复 加载初始化方法，将用户点击事件累加</h3><p>加载了三遍，点击btn事件了，其内部方法将会被触发3次<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t$(<span class=\"string\">'#btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//请求事件</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">init();</span><br><span class=\"line\">init();</span><br><span class=\"line\">init();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三、-jquery-本身处理有一定的延时性（时间极短）\"><a href=\"#三、-jquery-本身处理有一定的延时性（时间极短）\" class=\"headerlink\" title=\"三、 jquery 本身处理有一定的延时性（时间极短）\"></a>三、 jquery 本身处理有一定的延时性（时间极短）</h3><ol>\n<li>使用原生js，能够实时响应。设置isAllowSubmit为true,第一遍请求时，设置为false,在ajax未响应时，下面的点击事件是无发<br>重复调用ajax请求的。</li>\n</ol>\n<p><code>`</code>js</p>\n<p>var GiveEntity = {};<br>var isAllowSubmit = true;</p>\n<p>GiveEntity.submit = function (isShare) {<br>    if (isAllowSubmit) {<br>        isAllowSubmit = false;<br>        $(‘#btnConfirm’).unbind(‘click’).html(‘loading…’);</p>\n<pre><code>    $.post(&apos;/&apos; + app + &apos;/create/record&apos;, params, function (data) {\n        GiveEntity.isAllowSubmit = true;\n\n        $(&apos;#btnConfirm&apos;).html(&apos;确认&apos;).click(function () {\n            GiveEntity.loading(1)\n            $(this).unbind(&apos;click&apos;).html(&apos;loading...&apos;);\n            GiveEntity.submit();\n        });\n    })\n\n}\n</code></pre><p>}</p>\n<p>$(‘#btnConfirm’).unbind(‘click’).html(‘确认’).click(function () {<br>    GiveEntity.loading(1)<br>    $(this).unbind(‘click’).html(‘loading…’);<br>    GiveEntity.submit();<br>});</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"分析产生重复请求的原因\"><a href=\"#分析产生重复请求的原因\" class=\"headerlink\" title=\"分析产生重复请求的原因\"></a>分析产生重复请求的原因</h2><h3 id=\"一、-前端js-未做限制-每点击一次就会请求一次\"><a href=\"#一、-前端js-未做限制-每点击一次就会请求一次\" class=\"headerlink\" title=\"一、 前端js 未做限制 每点击一次就会请求一次\"></a>一、 前端js 未做限制 每点击一次就会请求一次</h3><h3 id=\"二、-jQuery-或者-vue-js-等重复-加载初始化方法，将用户点击事件累加\"><a href=\"#二、-jQuery-或者-vue-js-等重复-加载初始化方法，将用户点击事件累加\" class=\"headerlink\" title=\"二、 jQuery 或者 vue.js 等重复 加载初始化方法，将用户点击事件累加\"></a>二、 jQuery 或者 vue.js 等重复 加载初始化方法，将用户点击事件累加</h3><p>加载了三遍，点击btn事件了，其内部方法将会被触发3次<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t$(<span class=\"string\">'#btn'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//请求事件</span></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">init();</span><br><span class=\"line\">init();</span><br><span class=\"line\">init();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"三、-jquery-本身处理有一定的延时性（时间极短）\"><a href=\"#三、-jquery-本身处理有一定的延时性（时间极短）\" class=\"headerlink\" title=\"三、 jquery 本身处理有一定的延时性（时间极短）\"></a>三、 jquery 本身处理有一定的延时性（时间极短）</h3><ol>\n<li>使用原生js，能够实时响应。设置isAllowSubmit为true,第一遍请求时，设置为false,在ajax未响应时，下面的点击事件是无发<br>重复调用ajax请求的。</li>\n</ol>\n<p><code>`</code>js</p>\n<p>var GiveEntity = {};<br>var isAllowSubmit = true;</p>\n<p>GiveEntity.submit = function (isShare) {<br>    if (isAllowSubmit) {<br>        isAllowSubmit = false;<br>        $(‘#btnConfirm’).unbind(‘click’).html(‘loading…’);</p>\n<pre><code>    $.post(&apos;/&apos; + app + &apos;/create/record&apos;, params, function (data) {\n        GiveEntity.isAllowSubmit = true;\n\n        $(&apos;#btnConfirm&apos;).html(&apos;确认&apos;).click(function () {\n            GiveEntity.loading(1)\n            $(this).unbind(&apos;click&apos;).html(&apos;loading...&apos;);\n            GiveEntity.submit();\n        });\n    })\n\n}\n</code></pre><p>}</p>\n<p>$(‘#btnConfirm’).unbind(‘click’).html(‘确认’).click(function () {<br>    GiveEntity.loading(1)<br>    $(this).unbind(‘click’).html(‘loading…’);<br>    GiveEntity.submit();<br>});</p>\n"},{"layout":"post","title":"token","date":"2018-04-27T06:54:28.000Z","_content":"\nJSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。其JWT的组成一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。\n\n## Token 相对于token Auth的优点\n\n![img](https://ws4.sinaimg.cn/large/006tKfTcgy1fqr8iefeeij30w80gn422.jpg)\n\n- 支持跨域访问: Cookie是不允许垮域访问的，这一点对Token机制是不存在的，前提是传输的用户认证信息通过HTTP头传输.\n- 无状态(也称：服务端可扩展行):Token机制在服务端不需要存储session信息，因为Token 自身包含了所有登录用户的信息，只需要在客户端的cookie或本地介质存储状态信息.\n- 更适用CDN: 可以通过内容分发网络请求你服务端的所有资料（如：javascript，HTML,图片等），而你的服务端只要提供API即可.\n- 去耦: 不需要绑定到一个特定的身份验证方案。Token可以在任何地方生成，只要在你的API被调用的时候，你可以进行Token生成调用即可.\n- 更适用于移动应用: 当你的客户端是一个原生平台（iOS, Android，Windows 8等）时，Cookie是不被支持的（你需要通过Cookie容器进行处理），这时采用Token认证机制就会简单得多。\n- CSRF:因为不再依赖于Cookie，所以你就不需要考虑对CSRF（跨站请求伪造）的防范。\n- 性能: 一次网络往返时间（通过数据库查询session信息）总比做一次HMACSHA256计算 的Token验证和解析要费时得多.\n- 不需要为登录页面做特殊处理: 如果你使用Protractor 做功能测试的时候，不再需要为登录页面做特殊处理.\n- 基于标准化:你的API可以采用标准化的 JSON Web Token (JWT). 这个标准已经存在多个后端库（.NET, Ruby, Java,Python, PHP）和多家公司的支持（如：Firebase,Google, Microsoft）.\n\n\n### 安装模块\n\n```\nnpm i --save jsonwebtoken\n```\n\n### 生成token信息\n\n```Js\nconst jwt = require('jsonwebtoken');\n\n//1. 验证用户名，密码是否正确\n//2. 从新生成token信息\n//3. 将生成的token信息存储在mongo中\n//4. 将生成的token信息响应出去\nUser.findOne({\n\tname: req.body.name\n}, (err, user) => {\n\tif (err) throw err\n\tif (!user) return res.fail(\"认证失败,用户不存在!\");\n\tp.log(user)\n\t//校验密码是否正确\n\tif (user.password != req.body.password) return res.fail(\"认证失败,密码错误!\");\n\t//密码正确，生成token，根据用户名生成token\n\t//将信息存储在 生成sign  \n\tlet token = jwt.sign({\n\t\tname: user.name\n\t}, config.token_secret, {\n\t\texpiresIn: 60 * 1\n\t}) //token 信息，秘钥，过期时间（以秒为单位）\n\tuser.token = token\n\tuser.save((err) => {\n\t\tif (err) return res.fail(\"认证失败\");\n\t\treturn res.success({\n\t\t\ttoken: token,\n\t\t\tname: user.name\n\t\t});\n\t});\n})\n```\n载荷（Payload）\n\n```json\n    { \"iss\": \"Online JWT Builder\", \n      \"iat\": 1416797419, \n      \"exp\": 1448333419, \n      \"aud\": \"www.example.com\", \n      \"sub\": \"jrocket@example.com\", \n      \"GivenName\": \"Johnny\", \n      \"Surname\": \"Rocket\", \n      \"Email\": \"jrocket@example.com\", \n      \"Role\": [ \"Manager\", \"Project Administrator\" ] \n    }\n```\n- iss: 该JWT的签发者，是否使用是可选的；\n- sub: 该JWT所面向的用户，是否使用是可选的；\n- aud: 接收该JWT的一方，是否使用是可选的；\n- exp(expires): 什么时候过期，这里是一个Unix时间戳，是否使用是可选的；\n- iat(issued at): 在什么时候签发的(UNIX时间)，是否使用是可选的；\n  其他还有：\n- nbf (Not Before)：如果当前时间在nbf里的时间之前，则Token不被接受；一般都会留一些余地，比如几分钟；，是否使用是可选的；\n\n\n\n### 第三方接入时，请求携带token\n\n```Js\nvar headers = {\n    'Content-Type': 'application/json',\n    \"token\": \"\",\n    \"version\": \"1.0\"\n};\nvar options = {\n\turl: url,\n\tmethod: 'GET',\n\theaders: headers,\n\tjson: true,\n\ttimeout: config.timeout\n};\n\nrequest(options, function(error, response, content) {\n\tcallback(error, response, content);\n});\n```\n\n\n\n### 前端页面获取token，并存储记录\n\n认证获取token后，将token存放位置\n\n1. localStorage\n2. sessionStorage\n3. cookie\n4. 针对单页面大应用，存放在某个标签上，或者公共的变量\n\n```Js\nvar str = sessionStorage.getItem(\"userInfo\");\nvar currUser = JSON.parse(str);\nvar userId = currUser[\"userID\"];\nvar token = 'Bearer ' + currUser.token;\n```\n\n### 前端请求时携带token\n\n* Url?token=xxxx\n* Post  参数中携带token\n* Header 参数中携带token，推荐使用这种方式\n\n```Js\nfunction GetInfo(userId) {\n    $.ajax({\n        url: 'http://*******/api/orders',\n        data: {\n            currUserId: userId,\n            type: 1\n        },\n        beforeSend: function(request) {\n            request.setRequestHeader(\"token\", token);\n        },\n        dataType: 'JSON',\n        type: 'GET',\n        success: function (list) {\n        },\n        error: function () {\n        }\n    });\n}\n```\n\n\n\n### 获取页面传入的token信息\n\n```Js\nvar token = req.body.token || req.query.token || req.headers['x-access-token'];\nvar token = rq.body.token || rq.query.token || rq.headers[\"x-access-token\"]; // 从body或query或者header中获取token\nlet token = req.body.token || req.query.token || req.headers.token;\nif (_.isEmpty(token)) return res.fail(\"The token is lose\")//token 信息丢失\nreq.headers.token = token\n\n//最麻烦的\nif (_.isEmpty(req.headers.token)) { //headers.token有值，直接跳转\n\tif (!_.isEmpty(req.body.token)) {\n\t\treq.headers.token = req.body.token;\n\t} else if (!_.isEmpty(req.query.token)) {\n\t\treq.headers.token = req.query.token;\n\t}\n\n\tif (_.isEmpty(req.headers.token)) return res.fail(\"The token is lose\") //token 信息丢失\n}\n```\n\n\n\n### Bearer 存在的意义?\n\n```js\n config.headers.Authorization = `Bearer ${store.state.token}`\n```\n\n\n\n### token 中间件校验verify\n\n```Js\n let token = req.body.token || req.query.token || req.headers.token; //根据需要可以调整顺序\n if (_.isEmpty(token)) return res.fail(\"The token is lose\") //token 信息丢失\n\n //校验token中包含的信息\n jwt.verify(token, config.token_secret, function(err, data) {\n \tif (err) return res.fail(err.message);\n \treq.headers.token = token\n \tnext()\n })\n```\n\n### 是否可以使用session 进行存储？\n\n1. 可以通过token获取session中的数据\n2. 通过session判断token是否存在的方式进行校验\n3. 但是，这样不安全，并且性能比较低\n\n```Js\nUser.findOne({\n\ttoken: token\n}, (err, data) => {\n\tconsole.log(data)\n\tif (err) return res.fail(\"token is 失效\");\n\tif (!data) return res.fail(\"token is null\")\n\tnext()\n})\n```\n\n \n\n## 关于Token，你应该知道的一些事\n\n#### 一、Token 应该被保存起来（放到 `local / session stograge` 或者 `cookies`）\n\n#### 二、Tokens 除了像 cookie 一样有`有效期`，而且你可以有更多的操作方法\n\n1. cookies 可以在浏览器关闭后删除（session cookies）；\n2. 另外你可以实现服务器端的检查（通常由你使用的 Web 框架完成），还有也可以实现绝对有效期或弹性有效期\n3. Cookies 可以带有有效期地保存起来（浏览器关闭后也不删除）。\n\n而在 tokens 的使用中，一旦 token 过期，只需要重新获取一个。你可以使用一个接口去刷新 token：\n\n1. 让旧的 token 失效；\n2. 检查这个用户是不是还存在，权限是否被取消或者任何对你的程序来说是有必要的；\n3. 得到一个更新了有效期的 token。\n\n你甚至可以把 token 原来的发布时间也保存起来，并且强制在两星期后重新登录什么的。\n\n```Js\napp.post('/refresh_token', function(req, res) {\n\t// verify the existing token \n\tvar profile = jwt.verify(req.body.token, secret);\n\t// if more than 14 days old, force login \n\tif (profile.original_iat - new Date() > 14) {\n\t\t// iat == issued at return res.send(401); \n\t\t// re-logging } \n\t\t// check if the user still exists or if authorization hasn't been revoked \n\t\tif (!valid) return res.send(401);\n\t\t// re-logging \n\t\t// issue a new token \n\t\tvar refreshed_token = jwt.sign(profile, secret, {\n\t\t\texpiresInMinutes: 60 * 5\n\t\t});\n\t\tres.json({\n\t\t\ttoken: refreshed_token\n\t\t});\n\t}\n});\n```\n\n如果你需要撤回 tokens（当 token 的生存期比较长的时候这很有必要）那么你需要一个 token 的生成管理器去作检查。\n\n### 三、每个 CORS（跨域资源共享）请求都会带上预请求（Preflight request）\n\n#### 四、XSS要更容易防范\n\n#### 五、注意 token 的大小\n\nToken 机制在每次请求 API 的时候，都需要带上一个 Authorization的 Http Header 。\n\nToken 的大小其实由你储存在 token 中的信息量所决定，例如可能有 nickname，openid等开发者另外加上的信息。\n\n#### 六、有需要的话，要加密并且签名 token\n\n虽然 TLS/SSL 机制可以隔绝大多数中间人攻击，但是如果 token 中带有了用户的敏感信息，开发者也应该要加密这些信息。\n使用 JWT（文中第 9 点） 可以加密 token，但是由于目前大多数 Web 框架还未支持 JWT，所以可以使用 AES-CBC 算法加密 token。\n\n```\napp.post('/authenticate', function(req, res) {\n\t// 校验用户； \n\t// 加密 token； \n\tvar encrypted = {\n\t\ttoken: encryptAesSha256('shhhh', JSON.stringify(profile))\n\t};\n\t// 给加密后的 token 签名； \n\tvar token = jwt.sign(encrypted, secret, {\n\t\texpiresInMinutes: 60 * 5\n\t});\n\tres.json({\n\t\ttoken: token\n\t});\n})\n\nfunction encryptAesSha256(password, textToEncrypt) {\n\tvar cipher = crypto.createCipher('aes-256-cbc', password);\n\tvar crypted = cipher.update(textToEncrypt, 'utf8', 'hex');\n\tcrypted += cipher.final('hex');\n\treturn crypted;\n}\n// 上面就是 encrypt-then-MAC （加密后签名）做法。\n```\n\n\n\n## 参考目录：\nhttps://stormpath.com/blog/build-secure-user-interfaces-using-jwts\nhttps://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/\nhttps://www.quora.com/Is-JWT-JSON-Web-Token-insecure-by-design\nhttps://github.com/auth0/node-jsonwebtoken/issues/36\nhttp://christhorntonsf.com/secure-your-apis-with-jwt/\nhttps://www.cnblogs.com/xiekeli/p/5607107.html\nhttps://www.jianshu.com/p/f9faeac8bd5e","source":"_posts/token.md","raw":"---\nlayout: post\ntitle: token\ndate: 2018-04-27 14:54:28\ntags: api\n---\n\nJSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。其JWT的组成一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。\n\n## Token 相对于token Auth的优点\n\n![img](https://ws4.sinaimg.cn/large/006tKfTcgy1fqr8iefeeij30w80gn422.jpg)\n\n- 支持跨域访问: Cookie是不允许垮域访问的，这一点对Token机制是不存在的，前提是传输的用户认证信息通过HTTP头传输.\n- 无状态(也称：服务端可扩展行):Token机制在服务端不需要存储session信息，因为Token 自身包含了所有登录用户的信息，只需要在客户端的cookie或本地介质存储状态信息.\n- 更适用CDN: 可以通过内容分发网络请求你服务端的所有资料（如：javascript，HTML,图片等），而你的服务端只要提供API即可.\n- 去耦: 不需要绑定到一个特定的身份验证方案。Token可以在任何地方生成，只要在你的API被调用的时候，你可以进行Token生成调用即可.\n- 更适用于移动应用: 当你的客户端是一个原生平台（iOS, Android，Windows 8等）时，Cookie是不被支持的（你需要通过Cookie容器进行处理），这时采用Token认证机制就会简单得多。\n- CSRF:因为不再依赖于Cookie，所以你就不需要考虑对CSRF（跨站请求伪造）的防范。\n- 性能: 一次网络往返时间（通过数据库查询session信息）总比做一次HMACSHA256计算 的Token验证和解析要费时得多.\n- 不需要为登录页面做特殊处理: 如果你使用Protractor 做功能测试的时候，不再需要为登录页面做特殊处理.\n- 基于标准化:你的API可以采用标准化的 JSON Web Token (JWT). 这个标准已经存在多个后端库（.NET, Ruby, Java,Python, PHP）和多家公司的支持（如：Firebase,Google, Microsoft）.\n\n\n### 安装模块\n\n```\nnpm i --save jsonwebtoken\n```\n\n### 生成token信息\n\n```Js\nconst jwt = require('jsonwebtoken');\n\n//1. 验证用户名，密码是否正确\n//2. 从新生成token信息\n//3. 将生成的token信息存储在mongo中\n//4. 将生成的token信息响应出去\nUser.findOne({\n\tname: req.body.name\n}, (err, user) => {\n\tif (err) throw err\n\tif (!user) return res.fail(\"认证失败,用户不存在!\");\n\tp.log(user)\n\t//校验密码是否正确\n\tif (user.password != req.body.password) return res.fail(\"认证失败,密码错误!\");\n\t//密码正确，生成token，根据用户名生成token\n\t//将信息存储在 生成sign  \n\tlet token = jwt.sign({\n\t\tname: user.name\n\t}, config.token_secret, {\n\t\texpiresIn: 60 * 1\n\t}) //token 信息，秘钥，过期时间（以秒为单位）\n\tuser.token = token\n\tuser.save((err) => {\n\t\tif (err) return res.fail(\"认证失败\");\n\t\treturn res.success({\n\t\t\ttoken: token,\n\t\t\tname: user.name\n\t\t});\n\t});\n})\n```\n载荷（Payload）\n\n```json\n    { \"iss\": \"Online JWT Builder\", \n      \"iat\": 1416797419, \n      \"exp\": 1448333419, \n      \"aud\": \"www.example.com\", \n      \"sub\": \"jrocket@example.com\", \n      \"GivenName\": \"Johnny\", \n      \"Surname\": \"Rocket\", \n      \"Email\": \"jrocket@example.com\", \n      \"Role\": [ \"Manager\", \"Project Administrator\" ] \n    }\n```\n- iss: 该JWT的签发者，是否使用是可选的；\n- sub: 该JWT所面向的用户，是否使用是可选的；\n- aud: 接收该JWT的一方，是否使用是可选的；\n- exp(expires): 什么时候过期，这里是一个Unix时间戳，是否使用是可选的；\n- iat(issued at): 在什么时候签发的(UNIX时间)，是否使用是可选的；\n  其他还有：\n- nbf (Not Before)：如果当前时间在nbf里的时间之前，则Token不被接受；一般都会留一些余地，比如几分钟；，是否使用是可选的；\n\n\n\n### 第三方接入时，请求携带token\n\n```Js\nvar headers = {\n    'Content-Type': 'application/json',\n    \"token\": \"\",\n    \"version\": \"1.0\"\n};\nvar options = {\n\turl: url,\n\tmethod: 'GET',\n\theaders: headers,\n\tjson: true,\n\ttimeout: config.timeout\n};\n\nrequest(options, function(error, response, content) {\n\tcallback(error, response, content);\n});\n```\n\n\n\n### 前端页面获取token，并存储记录\n\n认证获取token后，将token存放位置\n\n1. localStorage\n2. sessionStorage\n3. cookie\n4. 针对单页面大应用，存放在某个标签上，或者公共的变量\n\n```Js\nvar str = sessionStorage.getItem(\"userInfo\");\nvar currUser = JSON.parse(str);\nvar userId = currUser[\"userID\"];\nvar token = 'Bearer ' + currUser.token;\n```\n\n### 前端请求时携带token\n\n* Url?token=xxxx\n* Post  参数中携带token\n* Header 参数中携带token，推荐使用这种方式\n\n```Js\nfunction GetInfo(userId) {\n    $.ajax({\n        url: 'http://*******/api/orders',\n        data: {\n            currUserId: userId,\n            type: 1\n        },\n        beforeSend: function(request) {\n            request.setRequestHeader(\"token\", token);\n        },\n        dataType: 'JSON',\n        type: 'GET',\n        success: function (list) {\n        },\n        error: function () {\n        }\n    });\n}\n```\n\n\n\n### 获取页面传入的token信息\n\n```Js\nvar token = req.body.token || req.query.token || req.headers['x-access-token'];\nvar token = rq.body.token || rq.query.token || rq.headers[\"x-access-token\"]; // 从body或query或者header中获取token\nlet token = req.body.token || req.query.token || req.headers.token;\nif (_.isEmpty(token)) return res.fail(\"The token is lose\")//token 信息丢失\nreq.headers.token = token\n\n//最麻烦的\nif (_.isEmpty(req.headers.token)) { //headers.token有值，直接跳转\n\tif (!_.isEmpty(req.body.token)) {\n\t\treq.headers.token = req.body.token;\n\t} else if (!_.isEmpty(req.query.token)) {\n\t\treq.headers.token = req.query.token;\n\t}\n\n\tif (_.isEmpty(req.headers.token)) return res.fail(\"The token is lose\") //token 信息丢失\n}\n```\n\n\n\n### Bearer 存在的意义?\n\n```js\n config.headers.Authorization = `Bearer ${store.state.token}`\n```\n\n\n\n### token 中间件校验verify\n\n```Js\n let token = req.body.token || req.query.token || req.headers.token; //根据需要可以调整顺序\n if (_.isEmpty(token)) return res.fail(\"The token is lose\") //token 信息丢失\n\n //校验token中包含的信息\n jwt.verify(token, config.token_secret, function(err, data) {\n \tif (err) return res.fail(err.message);\n \treq.headers.token = token\n \tnext()\n })\n```\n\n### 是否可以使用session 进行存储？\n\n1. 可以通过token获取session中的数据\n2. 通过session判断token是否存在的方式进行校验\n3. 但是，这样不安全，并且性能比较低\n\n```Js\nUser.findOne({\n\ttoken: token\n}, (err, data) => {\n\tconsole.log(data)\n\tif (err) return res.fail(\"token is 失效\");\n\tif (!data) return res.fail(\"token is null\")\n\tnext()\n})\n```\n\n \n\n## 关于Token，你应该知道的一些事\n\n#### 一、Token 应该被保存起来（放到 `local / session stograge` 或者 `cookies`）\n\n#### 二、Tokens 除了像 cookie 一样有`有效期`，而且你可以有更多的操作方法\n\n1. cookies 可以在浏览器关闭后删除（session cookies）；\n2. 另外你可以实现服务器端的检查（通常由你使用的 Web 框架完成），还有也可以实现绝对有效期或弹性有效期\n3. Cookies 可以带有有效期地保存起来（浏览器关闭后也不删除）。\n\n而在 tokens 的使用中，一旦 token 过期，只需要重新获取一个。你可以使用一个接口去刷新 token：\n\n1. 让旧的 token 失效；\n2. 检查这个用户是不是还存在，权限是否被取消或者任何对你的程序来说是有必要的；\n3. 得到一个更新了有效期的 token。\n\n你甚至可以把 token 原来的发布时间也保存起来，并且强制在两星期后重新登录什么的。\n\n```Js\napp.post('/refresh_token', function(req, res) {\n\t// verify the existing token \n\tvar profile = jwt.verify(req.body.token, secret);\n\t// if more than 14 days old, force login \n\tif (profile.original_iat - new Date() > 14) {\n\t\t// iat == issued at return res.send(401); \n\t\t// re-logging } \n\t\t// check if the user still exists or if authorization hasn't been revoked \n\t\tif (!valid) return res.send(401);\n\t\t// re-logging \n\t\t// issue a new token \n\t\tvar refreshed_token = jwt.sign(profile, secret, {\n\t\t\texpiresInMinutes: 60 * 5\n\t\t});\n\t\tres.json({\n\t\t\ttoken: refreshed_token\n\t\t});\n\t}\n});\n```\n\n如果你需要撤回 tokens（当 token 的生存期比较长的时候这很有必要）那么你需要一个 token 的生成管理器去作检查。\n\n### 三、每个 CORS（跨域资源共享）请求都会带上预请求（Preflight request）\n\n#### 四、XSS要更容易防范\n\n#### 五、注意 token 的大小\n\nToken 机制在每次请求 API 的时候，都需要带上一个 Authorization的 Http Header 。\n\nToken 的大小其实由你储存在 token 中的信息量所决定，例如可能有 nickname，openid等开发者另外加上的信息。\n\n#### 六、有需要的话，要加密并且签名 token\n\n虽然 TLS/SSL 机制可以隔绝大多数中间人攻击，但是如果 token 中带有了用户的敏感信息，开发者也应该要加密这些信息。\n使用 JWT（文中第 9 点） 可以加密 token，但是由于目前大多数 Web 框架还未支持 JWT，所以可以使用 AES-CBC 算法加密 token。\n\n```\napp.post('/authenticate', function(req, res) {\n\t// 校验用户； \n\t// 加密 token； \n\tvar encrypted = {\n\t\ttoken: encryptAesSha256('shhhh', JSON.stringify(profile))\n\t};\n\t// 给加密后的 token 签名； \n\tvar token = jwt.sign(encrypted, secret, {\n\t\texpiresInMinutes: 60 * 5\n\t});\n\tres.json({\n\t\ttoken: token\n\t});\n})\n\nfunction encryptAesSha256(password, textToEncrypt) {\n\tvar cipher = crypto.createCipher('aes-256-cbc', password);\n\tvar crypted = cipher.update(textToEncrypt, 'utf8', 'hex');\n\tcrypted += cipher.final('hex');\n\treturn crypted;\n}\n// 上面就是 encrypt-then-MAC （加密后签名）做法。\n```\n\n\n\n## 参考目录：\nhttps://stormpath.com/blog/build-secure-user-interfaces-using-jwts\nhttps://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/\nhttps://www.quora.com/Is-JWT-JSON-Web-Token-insecure-by-design\nhttps://github.com/auth0/node-jsonwebtoken/issues/36\nhttp://christhorntonsf.com/secure-your-apis-with-jwt/\nhttps://www.cnblogs.com/xiekeli/p/5607107.html\nhttps://www.jianshu.com/p/f9faeac8bd5e","slug":"token","published":1,"updated":"2018-04-27T07:20:03.453Z","comments":1,"photos":[],"link":"","_id":"cjghshew1000zn1yrhu36gfqw","content":"<p>JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。其JWT的组成一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。</p>\n<h2 id=\"Token-相对于token-Auth的优点\"><a href=\"#Token-相对于token-Auth的优点\" class=\"headerlink\" title=\"Token 相对于token Auth的优点\"></a>Token 相对于token Auth的优点</h2><p><img src=\"https://ws4.sinaimg.cn/large/006tKfTcgy1fqr8iefeeij30w80gn422.jpg\" alt=\"img\"></p>\n<ul>\n<li>支持跨域访问: Cookie是不允许垮域访问的，这一点对Token机制是不存在的，前提是传输的用户认证信息通过HTTP头传输.</li>\n<li>无状态(也称：服务端可扩展行):Token机制在服务端不需要存储session信息，因为Token 自身包含了所有登录用户的信息，只需要在客户端的cookie或本地介质存储状态信息.</li>\n<li>更适用CDN: 可以通过内容分发网络请求你服务端的所有资料（如：javascript，HTML,图片等），而你的服务端只要提供API即可.</li>\n<li>去耦: 不需要绑定到一个特定的身份验证方案。Token可以在任何地方生成，只要在你的API被调用的时候，你可以进行Token生成调用即可.</li>\n<li>更适用于移动应用: 当你的客户端是一个原生平台（iOS, Android，Windows 8等）时，Cookie是不被支持的（你需要通过Cookie容器进行处理），这时采用Token认证机制就会简单得多。</li>\n<li>CSRF:因为不再依赖于Cookie，所以你就不需要考虑对CSRF（跨站请求伪造）的防范。</li>\n<li>性能: 一次网络往返时间（通过数据库查询session信息）总比做一次HMACSHA256计算 的Token验证和解析要费时得多.</li>\n<li>不需要为登录页面做特殊处理: 如果你使用Protractor 做功能测试的时候，不再需要为登录页面做特殊处理.</li>\n<li>基于标准化:你的API可以采用标准化的 JSON Web Token (JWT). 这个标准已经存在多个后端库（.NET, Ruby, Java,Python, PHP）和多家公司的支持（如：Firebase,Google, Microsoft）.</li>\n</ul>\n<h3 id=\"安装模块\"><a href=\"#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save jsonwebtoken</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成token信息\"><a href=\"#生成token信息\" class=\"headerlink\" title=\"生成token信息\"></a>生成token信息</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> jwt = <span class=\"built_in\">require</span>(<span class=\"string\">'jsonwebtoken'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. 验证用户名，密码是否正确</span></span><br><span class=\"line\"><span class=\"comment\">//2. 从新生成token信息</span></span><br><span class=\"line\"><span class=\"comment\">//3. 将生成的token信息存储在mongo中</span></span><br><span class=\"line\"><span class=\"comment\">//4. 将生成的token信息响应出去</span></span><br><span class=\"line\">User.findOne(&#123;</span><br><span class=\"line\">\tname: req.body.name</span><br><span class=\"line\">&#125;, (err, user) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!user) <span class=\"keyword\">return</span> res.fail(<span class=\"string\">\"认证失败,用户不存在!\"</span>);</span><br><span class=\"line\">\tp.log(user)</span><br><span class=\"line\">\t<span class=\"comment\">//校验密码是否正确</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (user.password != req.body.password) <span class=\"keyword\">return</span> res.fail(<span class=\"string\">\"认证失败,密码错误!\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//密码正确，生成token，根据用户名生成token</span></span><br><span class=\"line\">\t<span class=\"comment\">//将信息存储在 生成sign  </span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> token = jwt.sign(&#123;</span><br><span class=\"line\">\t\tname: user.name</span><br><span class=\"line\">\t&#125;, config.token_secret, &#123;</span><br><span class=\"line\">\t\texpiresIn: <span class=\"number\">60</span> * <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;) <span class=\"comment\">//token 信息，秘钥，过期时间（以秒为单位）</span></span><br><span class=\"line\">\tuser.token = token</span><br><span class=\"line\">\tuser.save(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> res.fail(<span class=\"string\">\"认证失败\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res.success(&#123;</span><br><span class=\"line\">\t\t\ttoken: token,</span><br><span class=\"line\">\t\t\tname: user.name</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>载荷（Payload）</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">\"iss\"</span>: <span class=\"string\">\"Online JWT Builder\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"iat\"</span>: <span class=\"number\">1416797419</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"exp\"</span>: <span class=\"number\">1448333419</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"aud\"</span>: <span class=\"string\">\"www.example.com\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"sub\"</span>: <span class=\"string\">\"jrocket@example.com\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"GivenName\"</span>: <span class=\"string\">\"Johnny\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"Surname\"</span>: <span class=\"string\">\"Rocket\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"Email\"</span>: <span class=\"string\">\"jrocket@example.com\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"Role\"</span>: [ <span class=\"string\">\"Manager\"</span>, <span class=\"string\">\"Project Administrator\"</span> ] </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>iss: 该JWT的签发者，是否使用是可选的；</li>\n<li>sub: 该JWT所面向的用户，是否使用是可选的；</li>\n<li>aud: 接收该JWT的一方，是否使用是可选的；</li>\n<li>exp(expires): 什么时候过期，这里是一个Unix时间戳，是否使用是可选的；</li>\n<li>iat(issued at): 在什么时候签发的(UNIX时间)，是否使用是可选的；<br>其他还有：</li>\n<li>nbf (Not Before)：如果当前时间在nbf里的时间之前，则Token不被接受；一般都会留一些余地，比如几分钟；，是否使用是可选的；</li>\n</ul>\n<h3 id=\"第三方接入时，请求携带token\"><a href=\"#第三方接入时，请求携带token\" class=\"headerlink\" title=\"第三方接入时，请求携带token\"></a>第三方接入时，请求携带token</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">    <span class=\"string\">\"token\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">\turl: url,</span><br><span class=\"line\">\tmethod: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">\theaders: headers,</span><br><span class=\"line\">\tjson: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\ttimeout: config.timeout</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">request(options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, response, content</span>) </span>&#123;</span><br><span class=\"line\">\tcallback(error, response, content);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"前端页面获取token，并存储记录\"><a href=\"#前端页面获取token，并存储记录\" class=\"headerlink\" title=\"前端页面获取token，并存储记录\"></a>前端页面获取token，并存储记录</h3><p>认证获取token后，将token存放位置</p>\n<ol>\n<li>localStorage</li>\n<li>sessionStorage</li>\n<li>cookie</li>\n<li>针对单页面大应用，存放在某个标签上，或者公共的变量</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = sessionStorage.getItem(<span class=\"string\">\"userInfo\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> currUser = <span class=\"built_in\">JSON</span>.parse(str);</span><br><span class=\"line\"><span class=\"keyword\">var</span> userId = currUser[<span class=\"string\">\"userID\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> token = <span class=\"string\">'Bearer '</span> + currUser.token;</span><br></pre></td></tr></table></figure>\n<h3 id=\"前端请求时携带token\"><a href=\"#前端请求时携带token\" class=\"headerlink\" title=\"前端请求时携带token\"></a>前端请求时携带token</h3><ul>\n<li>Url?token=xxxx</li>\n<li>Post  参数中携带token</li>\n<li>Header 参数中携带token，推荐使用这种方式</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GetInfo</span>(<span class=\"params\">userId</span>) </span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: <span class=\"string\">'http://*******/api/orders'</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            currUserId: userId,</span><br><span class=\"line\">            type: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        beforeSend: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request</span>) </span>&#123;</span><br><span class=\"line\">            request.setRequestHeader(<span class=\"string\">\"token\"</span>, token);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        dataType: <span class=\"string\">'JSON'</span>,</span><br><span class=\"line\">        type: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取页面传入的token信息\"><a href=\"#获取页面传入的token信息\" class=\"headerlink\" title=\"获取页面传入的token信息\"></a>获取页面传入的token信息</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> token = req.body.token || req.query.token || req.headers[<span class=\"string\">'x-access-token'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> token = rq.body.token || rq.query.token || rq.headers[<span class=\"string\">\"x-access-token\"</span>]; <span class=\"comment\">// 从body或query或者header中获取token</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> token = req.body.token || req.query.token || req.headers.token;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (_.isEmpty(token)) <span class=\"keyword\">return</span> res.fail(<span class=\"string\">\"The token is lose\"</span>)<span class=\"comment\">//token 信息丢失</span></span><br><span class=\"line\">req.headers.token = token</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最麻烦的</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (_.isEmpty(req.headers.token)) &#123; <span class=\"comment\">//headers.token有值，直接跳转</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!_.isEmpty(req.body.token)) &#123;</span><br><span class=\"line\">\t\treq.headers.token = req.body.token;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!_.isEmpty(req.query.token)) &#123;</span><br><span class=\"line\">\t\treq.headers.token = req.query.token;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_.isEmpty(req.headers.token)) <span class=\"keyword\">return</span> res.fail(<span class=\"string\">\"The token is lose\"</span>) <span class=\"comment\">//token 信息丢失</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Bearer-存在的意义\"><a href=\"#Bearer-存在的意义\" class=\"headerlink\" title=\"Bearer 存在的意义?\"></a>Bearer 存在的意义?</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.headers.Authorization = <span class=\"string\">`Bearer <span class=\"subst\">$&#123;store.state.token&#125;</span>`</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"token-中间件校验verify\"><a href=\"#token-中间件校验verify\" class=\"headerlink\" title=\"token 中间件校验verify\"></a>token 中间件校验verify</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> token = req.body.token || req.query.token || req.headers.token; <span class=\"comment\">//根据需要可以调整顺序</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (_.isEmpty(token)) <span class=\"keyword\">return</span> res.fail(<span class=\"string\">\"The token is lose\"</span>) <span class=\"comment\">//token 信息丢失</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//校验token中包含的信息</span></span><br><span class=\"line\">jwt.verify(token, config.token_secret, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> res.fail(err.message);</span><br><span class=\"line\">\treq.headers.token = token</span><br><span class=\"line\">\tnext()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"是否可以使用session-进行存储？\"><a href=\"#是否可以使用session-进行存储？\" class=\"headerlink\" title=\"是否可以使用session 进行存储？\"></a>是否可以使用session 进行存储？</h3><ol>\n<li>可以通过token获取session中的数据</li>\n<li>通过session判断token是否存在的方式进行校验</li>\n<li>但是，这样不安全，并且性能比较低</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.findOne(&#123;</span><br><span class=\"line\">\ttoken: token</span><br><span class=\"line\">&#125;, (err, data) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> res.fail(<span class=\"string\">\"token is 失效\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!data) <span class=\"keyword\">return</span> res.fail(<span class=\"string\">\"token is null\"</span>)</span><br><span class=\"line\">\tnext()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于Token，你应该知道的一些事\"><a href=\"#关于Token，你应该知道的一些事\" class=\"headerlink\" title=\"关于Token，你应该知道的一些事\"></a>关于Token，你应该知道的一些事</h2><h4 id=\"一、Token-应该被保存起来（放到-local-session-stograge-或者-cookies）\"><a href=\"#一、Token-应该被保存起来（放到-local-session-stograge-或者-cookies）\" class=\"headerlink\" title=\"一、Token 应该被保存起来（放到 local / session stograge 或者 cookies）\"></a>一、Token 应该被保存起来（放到 <code>local / session stograge</code> 或者 <code>cookies</code>）</h4><h4 id=\"二、Tokens-除了像-cookie-一样有有效期，而且你可以有更多的操作方法\"><a href=\"#二、Tokens-除了像-cookie-一样有有效期，而且你可以有更多的操作方法\" class=\"headerlink\" title=\"二、Tokens 除了像 cookie 一样有有效期，而且你可以有更多的操作方法\"></a>二、Tokens 除了像 cookie 一样有<code>有效期</code>，而且你可以有更多的操作方法</h4><ol>\n<li>cookies 可以在浏览器关闭后删除（session cookies）；</li>\n<li>另外你可以实现服务器端的检查（通常由你使用的 Web 框架完成），还有也可以实现绝对有效期或弹性有效期</li>\n<li>Cookies 可以带有有效期地保存起来（浏览器关闭后也不删除）。</li>\n</ol>\n<p>而在 tokens 的使用中，一旦 token 过期，只需要重新获取一个。你可以使用一个接口去刷新 token：</p>\n<ol>\n<li>让旧的 token 失效；</li>\n<li>检查这个用户是不是还存在，权限是否被取消或者任何对你的程序来说是有必要的；</li>\n<li>得到一个更新了有效期的 token。</li>\n</ol>\n<p>你甚至可以把 token 原来的发布时间也保存起来，并且强制在两星期后重新登录什么的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.post(<span class=\"string\">'/refresh_token'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// verify the existing token </span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> profile = jwt.verify(req.body.token, secret);</span><br><span class=\"line\">\t<span class=\"comment\">// if more than 14 days old, force login </span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (profile.original_iat - <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &gt; <span class=\"number\">14</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// iat == issued at return res.send(401); </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// re-logging &#125; </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// check if the user still exists or if authorization hasn't been revoked </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!valid) <span class=\"keyword\">return</span> res.send(<span class=\"number\">401</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// re-logging </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// issue a new token </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> refreshed_token = jwt.sign(profile, secret, &#123;</span><br><span class=\"line\">\t\t\texpiresInMinutes: <span class=\"number\">60</span> * <span class=\"number\">5</span></span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tres.json(&#123;</span><br><span class=\"line\">\t\t\ttoken: refreshed_token</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果你需要撤回 tokens（当 token 的生存期比较长的时候这很有必要）那么你需要一个 token 的生成管理器去作检查。</p>\n<h3 id=\"三、每个-CORS（跨域资源共享）请求都会带上预请求（Preflight-request）\"><a href=\"#三、每个-CORS（跨域资源共享）请求都会带上预请求（Preflight-request）\" class=\"headerlink\" title=\"三、每个 CORS（跨域资源共享）请求都会带上预请求（Preflight request）\"></a>三、每个 CORS（跨域资源共享）请求都会带上预请求（Preflight request）</h3><h4 id=\"四、XSS要更容易防范\"><a href=\"#四、XSS要更容易防范\" class=\"headerlink\" title=\"四、XSS要更容易防范\"></a>四、XSS要更容易防范</h4><h4 id=\"五、注意-token-的大小\"><a href=\"#五、注意-token-的大小\" class=\"headerlink\" title=\"五、注意 token 的大小\"></a>五、注意 token 的大小</h4><p>Token 机制在每次请求 API 的时候，都需要带上一个 Authorization的 Http Header 。</p>\n<p>Token 的大小其实由你储存在 token 中的信息量所决定，例如可能有 nickname，openid等开发者另外加上的信息。</p>\n<h4 id=\"六、有需要的话，要加密并且签名-token\"><a href=\"#六、有需要的话，要加密并且签名-token\" class=\"headerlink\" title=\"六、有需要的话，要加密并且签名 token\"></a>六、有需要的话，要加密并且签名 token</h4><p>虽然 TLS/SSL 机制可以隔绝大多数中间人攻击，但是如果 token 中带有了用户的敏感信息，开发者也应该要加密这些信息。<br>使用 JWT（文中第 9 点） 可以加密 token，但是由于目前大多数 Web 框架还未支持 JWT，所以可以使用 AES-CBC 算法加密 token。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.post(&apos;/authenticate&apos;, function(req, res) &#123;</span><br><span class=\"line\">\t// 校验用户； </span><br><span class=\"line\">\t// 加密 token； </span><br><span class=\"line\">\tvar encrypted = &#123;</span><br><span class=\"line\">\t\ttoken: encryptAesSha256(&apos;shhhh&apos;, JSON.stringify(profile))</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t// 给加密后的 token 签名； </span><br><span class=\"line\">\tvar token = jwt.sign(encrypted, secret, &#123;</span><br><span class=\"line\">\t\texpiresInMinutes: 60 * 5</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tres.json(&#123;</span><br><span class=\"line\">\t\ttoken: token</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">function encryptAesSha256(password, textToEncrypt) &#123;</span><br><span class=\"line\">\tvar cipher = crypto.createCipher(&apos;aes-256-cbc&apos;, password);</span><br><span class=\"line\">\tvar crypted = cipher.update(textToEncrypt, &apos;utf8&apos;, &apos;hex&apos;);</span><br><span class=\"line\">\tcrypted += cipher.final(&apos;hex&apos;);</span><br><span class=\"line\">\treturn crypted;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 上面就是 encrypt-then-MAC （加密后签名）做法。</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考目录：\"><a href=\"#参考目录：\" class=\"headerlink\" title=\"参考目录：\"></a>参考目录：</h2><p><a href=\"https://stormpath.com/blog/build-secure-user-interfaces-using-jwts\" target=\"_blank\" rel=\"noopener\">https://stormpath.com/blog/build-secure-user-interfaces-using-jwts</a><br><a href=\"https://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/\" target=\"_blank\" rel=\"noopener\">https://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/</a><br><a href=\"https://www.quora.com/Is-JWT-JSON-Web-Token-insecure-by-design\" target=\"_blank\" rel=\"noopener\">https://www.quora.com/Is-JWT-JSON-Web-Token-insecure-by-design</a><br><a href=\"https://github.com/auth0/node-jsonwebtoken/issues/36\" target=\"_blank\" rel=\"noopener\">https://github.com/auth0/node-jsonwebtoken/issues/36</a><br><a href=\"http://christhorntonsf.com/secure-your-apis-with-jwt/\" target=\"_blank\" rel=\"noopener\">http://christhorntonsf.com/secure-your-apis-with-jwt/</a><br><a href=\"https://www.cnblogs.com/xiekeli/p/5607107.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xiekeli/p/5607107.html</a><br><a href=\"https://www.jianshu.com/p/f9faeac8bd5e\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/f9faeac8bd5e</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>JSON Web Token（JWT）是一个非常轻巧的规范。这个规范允许我们使用JWT在用户和服务器之间传递安全可靠的信息。其JWT的组成一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。</p>\n<h2 id=\"Token-相对于token-Auth的优点\"><a href=\"#Token-相对于token-Auth的优点\" class=\"headerlink\" title=\"Token 相对于token Auth的优点\"></a>Token 相对于token Auth的优点</h2><p><img src=\"https://ws4.sinaimg.cn/large/006tKfTcgy1fqr8iefeeij30w80gn422.jpg\" alt=\"img\"></p>\n<ul>\n<li>支持跨域访问: Cookie是不允许垮域访问的，这一点对Token机制是不存在的，前提是传输的用户认证信息通过HTTP头传输.</li>\n<li>无状态(也称：服务端可扩展行):Token机制在服务端不需要存储session信息，因为Token 自身包含了所有登录用户的信息，只需要在客户端的cookie或本地介质存储状态信息.</li>\n<li>更适用CDN: 可以通过内容分发网络请求你服务端的所有资料（如：javascript，HTML,图片等），而你的服务端只要提供API即可.</li>\n<li>去耦: 不需要绑定到一个特定的身份验证方案。Token可以在任何地方生成，只要在你的API被调用的时候，你可以进行Token生成调用即可.</li>\n<li>更适用于移动应用: 当你的客户端是一个原生平台（iOS, Android，Windows 8等）时，Cookie是不被支持的（你需要通过Cookie容器进行处理），这时采用Token认证机制就会简单得多。</li>\n<li>CSRF:因为不再依赖于Cookie，所以你就不需要考虑对CSRF（跨站请求伪造）的防范。</li>\n<li>性能: 一次网络往返时间（通过数据库查询session信息）总比做一次HMACSHA256计算 的Token验证和解析要费时得多.</li>\n<li>不需要为登录页面做特殊处理: 如果你使用Protractor 做功能测试的时候，不再需要为登录页面做特殊处理.</li>\n<li>基于标准化:你的API可以采用标准化的 JSON Web Token (JWT). 这个标准已经存在多个后端库（.NET, Ruby, Java,Python, PHP）和多家公司的支持（如：Firebase,Google, Microsoft）.</li>\n</ul>\n<h3 id=\"安装模块\"><a href=\"#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save jsonwebtoken</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成token信息\"><a href=\"#生成token信息\" class=\"headerlink\" title=\"生成token信息\"></a>生成token信息</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> jwt = <span class=\"built_in\">require</span>(<span class=\"string\">'jsonwebtoken'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. 验证用户名，密码是否正确</span></span><br><span class=\"line\"><span class=\"comment\">//2. 从新生成token信息</span></span><br><span class=\"line\"><span class=\"comment\">//3. 将生成的token信息存储在mongo中</span></span><br><span class=\"line\"><span class=\"comment\">//4. 将生成的token信息响应出去</span></span><br><span class=\"line\">User.findOne(&#123;</span><br><span class=\"line\">\tname: req.body.name</span><br><span class=\"line\">&#125;, (err, user) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!user) <span class=\"keyword\">return</span> res.fail(<span class=\"string\">\"认证失败,用户不存在!\"</span>);</span><br><span class=\"line\">\tp.log(user)</span><br><span class=\"line\">\t<span class=\"comment\">//校验密码是否正确</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (user.password != req.body.password) <span class=\"keyword\">return</span> res.fail(<span class=\"string\">\"认证失败,密码错误!\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//密码正确，生成token，根据用户名生成token</span></span><br><span class=\"line\">\t<span class=\"comment\">//将信息存储在 生成sign  </span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> token = jwt.sign(&#123;</span><br><span class=\"line\">\t\tname: user.name</span><br><span class=\"line\">\t&#125;, config.token_secret, &#123;</span><br><span class=\"line\">\t\texpiresIn: <span class=\"number\">60</span> * <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125;) <span class=\"comment\">//token 信息，秘钥，过期时间（以秒为单位）</span></span><br><span class=\"line\">\tuser.token = token</span><br><span class=\"line\">\tuser.save(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> res.fail(<span class=\"string\">\"认证失败\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res.success(&#123;</span><br><span class=\"line\">\t\t\ttoken: token,</span><br><span class=\"line\">\t\t\tname: user.name</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>载荷（Payload）</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">\"iss\"</span>: <span class=\"string\">\"Online JWT Builder\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"iat\"</span>: <span class=\"number\">1416797419</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"exp\"</span>: <span class=\"number\">1448333419</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"aud\"</span>: <span class=\"string\">\"www.example.com\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"sub\"</span>: <span class=\"string\">\"jrocket@example.com\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"GivenName\"</span>: <span class=\"string\">\"Johnny\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"Surname\"</span>: <span class=\"string\">\"Rocket\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"Email\"</span>: <span class=\"string\">\"jrocket@example.com\"</span>, </span><br><span class=\"line\">  <span class=\"attr\">\"Role\"</span>: [ <span class=\"string\">\"Manager\"</span>, <span class=\"string\">\"Project Administrator\"</span> ] </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>iss: 该JWT的签发者，是否使用是可选的；</li>\n<li>sub: 该JWT所面向的用户，是否使用是可选的；</li>\n<li>aud: 接收该JWT的一方，是否使用是可选的；</li>\n<li>exp(expires): 什么时候过期，这里是一个Unix时间戳，是否使用是可选的；</li>\n<li>iat(issued at): 在什么时候签发的(UNIX时间)，是否使用是可选的；<br>其他还有：</li>\n<li>nbf (Not Before)：如果当前时间在nbf里的时间之前，则Token不被接受；一般都会留一些余地，比如几分钟；，是否使用是可选的；</li>\n</ul>\n<h3 id=\"第三方接入时，请求携带token\"><a href=\"#第三方接入时，请求携带token\" class=\"headerlink\" title=\"第三方接入时，请求携带token\"></a>第三方接入时，请求携带token</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">    <span class=\"string\">\"token\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">\turl: url,</span><br><span class=\"line\">\tmethod: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">\theaders: headers,</span><br><span class=\"line\">\tjson: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\ttimeout: config.timeout</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">request(options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, response, content</span>) </span>&#123;</span><br><span class=\"line\">\tcallback(error, response, content);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"前端页面获取token，并存储记录\"><a href=\"#前端页面获取token，并存储记录\" class=\"headerlink\" title=\"前端页面获取token，并存储记录\"></a>前端页面获取token，并存储记录</h3><p>认证获取token后，将token存放位置</p>\n<ol>\n<li>localStorage</li>\n<li>sessionStorage</li>\n<li>cookie</li>\n<li>针对单页面大应用，存放在某个标签上，或者公共的变量</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = sessionStorage.getItem(<span class=\"string\">\"userInfo\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> currUser = <span class=\"built_in\">JSON</span>.parse(str);</span><br><span class=\"line\"><span class=\"keyword\">var</span> userId = currUser[<span class=\"string\">\"userID\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> token = <span class=\"string\">'Bearer '</span> + currUser.token;</span><br></pre></td></tr></table></figure>\n<h3 id=\"前端请求时携带token\"><a href=\"#前端请求时携带token\" class=\"headerlink\" title=\"前端请求时携带token\"></a>前端请求时携带token</h3><ul>\n<li>Url?token=xxxx</li>\n<li>Post  参数中携带token</li>\n<li>Header 参数中携带token，推荐使用这种方式</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GetInfo</span>(<span class=\"params\">userId</span>) </span>&#123;</span><br><span class=\"line\">    $.ajax(&#123;</span><br><span class=\"line\">        url: <span class=\"string\">'http://*******/api/orders'</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            currUserId: userId,</span><br><span class=\"line\">            type: <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        beforeSend: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request</span>) </span>&#123;</span><br><span class=\"line\">            request.setRequestHeader(<span class=\"string\">\"token\"</span>, token);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        dataType: <span class=\"string\">'JSON'</span>,</span><br><span class=\"line\">        type: <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">        success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取页面传入的token信息\"><a href=\"#获取页面传入的token信息\" class=\"headerlink\" title=\"获取页面传入的token信息\"></a>获取页面传入的token信息</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> token = req.body.token || req.query.token || req.headers[<span class=\"string\">'x-access-token'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> token = rq.body.token || rq.query.token || rq.headers[<span class=\"string\">\"x-access-token\"</span>]; <span class=\"comment\">// 从body或query或者header中获取token</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> token = req.body.token || req.query.token || req.headers.token;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (_.isEmpty(token)) <span class=\"keyword\">return</span> res.fail(<span class=\"string\">\"The token is lose\"</span>)<span class=\"comment\">//token 信息丢失</span></span><br><span class=\"line\">req.headers.token = token</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最麻烦的</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (_.isEmpty(req.headers.token)) &#123; <span class=\"comment\">//headers.token有值，直接跳转</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!_.isEmpty(req.body.token)) &#123;</span><br><span class=\"line\">\t\treq.headers.token = req.body.token;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!_.isEmpty(req.query.token)) &#123;</span><br><span class=\"line\">\t\treq.headers.token = req.query.token;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_.isEmpty(req.headers.token)) <span class=\"keyword\">return</span> res.fail(<span class=\"string\">\"The token is lose\"</span>) <span class=\"comment\">//token 信息丢失</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Bearer-存在的意义\"><a href=\"#Bearer-存在的意义\" class=\"headerlink\" title=\"Bearer 存在的意义?\"></a>Bearer 存在的意义?</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.headers.Authorization = <span class=\"string\">`Bearer <span class=\"subst\">$&#123;store.state.token&#125;</span>`</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"token-中间件校验verify\"><a href=\"#token-中间件校验verify\" class=\"headerlink\" title=\"token 中间件校验verify\"></a>token 中间件校验verify</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> token = req.body.token || req.query.token || req.headers.token; <span class=\"comment\">//根据需要可以调整顺序</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (_.isEmpty(token)) <span class=\"keyword\">return</span> res.fail(<span class=\"string\">\"The token is lose\"</span>) <span class=\"comment\">//token 信息丢失</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//校验token中包含的信息</span></span><br><span class=\"line\">jwt.verify(token, config.token_secret, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> res.fail(err.message);</span><br><span class=\"line\">\treq.headers.token = token</span><br><span class=\"line\">\tnext()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"是否可以使用session-进行存储？\"><a href=\"#是否可以使用session-进行存储？\" class=\"headerlink\" title=\"是否可以使用session 进行存储？\"></a>是否可以使用session 进行存储？</h3><ol>\n<li>可以通过token获取session中的数据</li>\n<li>通过session判断token是否存在的方式进行校验</li>\n<li>但是，这样不安全，并且性能比较低</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User.findOne(&#123;</span><br><span class=\"line\">\ttoken: token</span><br><span class=\"line\">&#125;, (err, data) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> res.fail(<span class=\"string\">\"token is 失效\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!data) <span class=\"keyword\">return</span> res.fail(<span class=\"string\">\"token is null\"</span>)</span><br><span class=\"line\">\tnext()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于Token，你应该知道的一些事\"><a href=\"#关于Token，你应该知道的一些事\" class=\"headerlink\" title=\"关于Token，你应该知道的一些事\"></a>关于Token，你应该知道的一些事</h2><h4 id=\"一、Token-应该被保存起来（放到-local-session-stograge-或者-cookies）\"><a href=\"#一、Token-应该被保存起来（放到-local-session-stograge-或者-cookies）\" class=\"headerlink\" title=\"一、Token 应该被保存起来（放到 local / session stograge 或者 cookies）\"></a>一、Token 应该被保存起来（放到 <code>local / session stograge</code> 或者 <code>cookies</code>）</h4><h4 id=\"二、Tokens-除了像-cookie-一样有有效期，而且你可以有更多的操作方法\"><a href=\"#二、Tokens-除了像-cookie-一样有有效期，而且你可以有更多的操作方法\" class=\"headerlink\" title=\"二、Tokens 除了像 cookie 一样有有效期，而且你可以有更多的操作方法\"></a>二、Tokens 除了像 cookie 一样有<code>有效期</code>，而且你可以有更多的操作方法</h4><ol>\n<li>cookies 可以在浏览器关闭后删除（session cookies）；</li>\n<li>另外你可以实现服务器端的检查（通常由你使用的 Web 框架完成），还有也可以实现绝对有效期或弹性有效期</li>\n<li>Cookies 可以带有有效期地保存起来（浏览器关闭后也不删除）。</li>\n</ol>\n<p>而在 tokens 的使用中，一旦 token 过期，只需要重新获取一个。你可以使用一个接口去刷新 token：</p>\n<ol>\n<li>让旧的 token 失效；</li>\n<li>检查这个用户是不是还存在，权限是否被取消或者任何对你的程序来说是有必要的；</li>\n<li>得到一个更新了有效期的 token。</li>\n</ol>\n<p>你甚至可以把 token 原来的发布时间也保存起来，并且强制在两星期后重新登录什么的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.post(<span class=\"string\">'/refresh_token'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// verify the existing token </span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> profile = jwt.verify(req.body.token, secret);</span><br><span class=\"line\">\t<span class=\"comment\">// if more than 14 days old, force login </span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (profile.original_iat - <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &gt; <span class=\"number\">14</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// iat == issued at return res.send(401); </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// re-logging &#125; </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// check if the user still exists or if authorization hasn't been revoked </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!valid) <span class=\"keyword\">return</span> res.send(<span class=\"number\">401</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// re-logging </span></span><br><span class=\"line\">\t\t<span class=\"comment\">// issue a new token </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> refreshed_token = jwt.sign(profile, secret, &#123;</span><br><span class=\"line\">\t\t\texpiresInMinutes: <span class=\"number\">60</span> * <span class=\"number\">5</span></span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tres.json(&#123;</span><br><span class=\"line\">\t\t\ttoken: refreshed_token</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果你需要撤回 tokens（当 token 的生存期比较长的时候这很有必要）那么你需要一个 token 的生成管理器去作检查。</p>\n<h3 id=\"三、每个-CORS（跨域资源共享）请求都会带上预请求（Preflight-request）\"><a href=\"#三、每个-CORS（跨域资源共享）请求都会带上预请求（Preflight-request）\" class=\"headerlink\" title=\"三、每个 CORS（跨域资源共享）请求都会带上预请求（Preflight request）\"></a>三、每个 CORS（跨域资源共享）请求都会带上预请求（Preflight request）</h3><h4 id=\"四、XSS要更容易防范\"><a href=\"#四、XSS要更容易防范\" class=\"headerlink\" title=\"四、XSS要更容易防范\"></a>四、XSS要更容易防范</h4><h4 id=\"五、注意-token-的大小\"><a href=\"#五、注意-token-的大小\" class=\"headerlink\" title=\"五、注意 token 的大小\"></a>五、注意 token 的大小</h4><p>Token 机制在每次请求 API 的时候，都需要带上一个 Authorization的 Http Header 。</p>\n<p>Token 的大小其实由你储存在 token 中的信息量所决定，例如可能有 nickname，openid等开发者另外加上的信息。</p>\n<h4 id=\"六、有需要的话，要加密并且签名-token\"><a href=\"#六、有需要的话，要加密并且签名-token\" class=\"headerlink\" title=\"六、有需要的话，要加密并且签名 token\"></a>六、有需要的话，要加密并且签名 token</h4><p>虽然 TLS/SSL 机制可以隔绝大多数中间人攻击，但是如果 token 中带有了用户的敏感信息，开发者也应该要加密这些信息。<br>使用 JWT（文中第 9 点） 可以加密 token，但是由于目前大多数 Web 框架还未支持 JWT，所以可以使用 AES-CBC 算法加密 token。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.post(&apos;/authenticate&apos;, function(req, res) &#123;</span><br><span class=\"line\">\t// 校验用户； </span><br><span class=\"line\">\t// 加密 token； </span><br><span class=\"line\">\tvar encrypted = &#123;</span><br><span class=\"line\">\t\ttoken: encryptAesSha256(&apos;shhhh&apos;, JSON.stringify(profile))</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t// 给加密后的 token 签名； </span><br><span class=\"line\">\tvar token = jwt.sign(encrypted, secret, &#123;</span><br><span class=\"line\">\t\texpiresInMinutes: 60 * 5</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\tres.json(&#123;</span><br><span class=\"line\">\t\ttoken: token</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">function encryptAesSha256(password, textToEncrypt) &#123;</span><br><span class=\"line\">\tvar cipher = crypto.createCipher(&apos;aes-256-cbc&apos;, password);</span><br><span class=\"line\">\tvar crypted = cipher.update(textToEncrypt, &apos;utf8&apos;, &apos;hex&apos;);</span><br><span class=\"line\">\tcrypted += cipher.final(&apos;hex&apos;);</span><br><span class=\"line\">\treturn crypted;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 上面就是 encrypt-then-MAC （加密后签名）做法。</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考目录：\"><a href=\"#参考目录：\" class=\"headerlink\" title=\"参考目录：\"></a>参考目录：</h2><p><a href=\"https://stormpath.com/blog/build-secure-user-interfaces-using-jwts\" target=\"_blank\" rel=\"noopener\">https://stormpath.com/blog/build-secure-user-interfaces-using-jwts</a><br><a href=\"https://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/\" target=\"_blank\" rel=\"noopener\">https://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/</a><br><a href=\"https://www.quora.com/Is-JWT-JSON-Web-Token-insecure-by-design\" target=\"_blank\" rel=\"noopener\">https://www.quora.com/Is-JWT-JSON-Web-Token-insecure-by-design</a><br><a href=\"https://github.com/auth0/node-jsonwebtoken/issues/36\" target=\"_blank\" rel=\"noopener\">https://github.com/auth0/node-jsonwebtoken/issues/36</a><br><a href=\"http://christhorntonsf.com/secure-your-apis-with-jwt/\" target=\"_blank\" rel=\"noopener\">http://christhorntonsf.com/secure-your-apis-with-jwt/</a><br><a href=\"https://www.cnblogs.com/xiekeli/p/5607107.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/xiekeli/p/5607107.html</a><br><a href=\"https://www.jianshu.com/p/f9faeac8bd5e\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/f9faeac8bd5e</a></p>\n"},{"layout":"post","title":"webstorm 优化","date":"2017-04-27T05:34:38.000Z","_content":"\n## 解决webstorm安装webpack卡顿问题\n\n### 1、常用方法 \n\n\n\n【选择node_modules】右击选择","source":"_posts/webstorm.md","raw":"---\nlayout: post\ntitle: webstorm 优化\ndate: 2017-04-27 13:34:38\ntags: tools\n---\n\n## 解决webstorm安装webpack卡顿问题\n\n### 1、常用方法 \n\n\n\n【选择node_modules】右击选择","slug":"webstorm","published":1,"updated":"2018-04-27T07:23:12.380Z","comments":1,"photos":[],"link":"","_id":"cjghshew40011n1yrt51d59s0","content":"<h2 id=\"解决webstorm安装webpack卡顿问题\"><a href=\"#解决webstorm安装webpack卡顿问题\" class=\"headerlink\" title=\"解决webstorm安装webpack卡顿问题\"></a>解决webstorm安装webpack卡顿问题</h2><h3 id=\"1、常用方法\"><a href=\"#1、常用方法\" class=\"headerlink\" title=\"1、常用方法\"></a>1、常用方法</h3><p>【选择node_modules】右击选择</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"解决webstorm安装webpack卡顿问题\"><a href=\"#解决webstorm安装webpack卡顿问题\" class=\"headerlink\" title=\"解决webstorm安装webpack卡顿问题\"></a>解决webstorm安装webpack卡顿问题</h2><h3 id=\"1、常用方法\"><a href=\"#1、常用方法\" class=\"headerlink\" title=\"1、常用方法\"></a>1、常用方法</h3><p>【选择node_modules】右击选择</p>\n"},{"title":"windows nginx natapp","_content":"\n## 实现目标\n1. 通过nginx实现本地资源代理\n2. https 学习及使用\n3. 方便本地前端服务调试\n\n\n## 相关环境\n* windows 7 64\n* nginx v 1.6\n* [natapp](https://natapp.cn)\n* phpStudy \n* 阿里云\n\n## 基本操作\n\n### 线上配置\n1. 注册个人域名\n2. 注册natapp\n3. 域名和natapp进行绑定\n\n### nginx 配置\n\n常用命令\n\n```\nnginx -s stop 强制关闭 \nnginx -s quit 安全关闭 \nnginx -s reload 改变配置文件的时候，重启nginx工作进程，来时配置文件生效 \nnginx -t  测试是否成功\n\n.\\nginx.exe -t # windows 下要添加.\\\n```\n\n**http 代理配置** \n```\n# 静态页面\nlocation /html {\n    alias   F:/HTML/year;\n}\n# 端口代理\nlocation /demo {\n    proxy_pass  http://127.0.0.1:6061;\n}\n# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n# php环境代理\nlocation ~ \\.php(.*)$  {\n\troot E:/WWW;# 这里是站点的根目录\n    fastcgi_pass   127.0.0.1:9000;\n    fastcgi_index  index.php;\n    fastcgi_split_path_info  ^((?U).+\\.php)(/?.+)$;\n    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n    fastcgi_param  PATH_INFO  $fastcgi_path_info;\n    fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;\n    include        fastcgi_params;\n}\n```\n\n\n**https 代理配置** \n\n```\nserver {\n    listen       443;\n    server_name  localhost;\n\n    ssl                  on;\n    ssl_certificate      https/214009859140175.pem; # ssl 加密文件\n    ssl_certificate_key  https/214009859140175.key; # ssl 加密文件\n\n    ssl_session_timeout  5m;\n\n    ssl_protocols  SSLv2 SSLv3 TLSv1;\n    ssl_ciphers  HIGH:!aNULL:!MD5;\n    ssl_prefer_server_ciphers   on;\n\n    location / {\n        root   html;\n        index  index.html index.htm;\n    }\n\n    # 静态页面\n    location /html {\n        alias   F:/HTML/year;\n    }\n\n    # https 功能测试\n    location /https-demo {\n        proxy_pass  http://127.0.0.1:6061;\n    }\n\n}\n\n```\n\n### phpStudy 列表\n![phpStudy 配置](/view/img/phpStudy.jpg)\n\n### Apache 服务配置\n\n![Apache 环境配置](/view/img/Apache-edit.jpg)\n\n### php 配置\n```\nphp-cgi.exe -b 127.0.0.1:9000-c E:\\WWW\n```\n不运行上面代码，无法访问php\n\n### nssm 开机启动&后台运行\n```\nnssm install natapp # 安装服务\nnssm edit natapp # 编辑服务器名\nnssm restart natapp # 重启natapp服务\nnssm remove natapp # 删除XX服务\n```\n\n![nssm 开机启动&后台运行](/view/img/nssm-edit.jpg)\n![自定义服务](/view/img/background-list.jpg)\n\n### 注意事项\n\n1. window 执行exe\n```\n.\\n\n```\n\n2. https 加密文件\n> 这两块必须要有的，可以到阿里云去申请。\n```\nssl_certificate      https/214009859140175.pem; # ssl 加密文件\nssl_certificate_key  https/214009859140175.key; # ssl 加密文件\n```\n\n3. [阿里云](https://www.aliyun.com)【管理控制台】下【证书服务】\n\n## 参考\n- [natapp](https://natapp.cn)\n- [支持https泛域名以及本地(443端口)证书,支持http/2协议](https://natapp.cn/article/https)\n- [Natapp(Ngrok) Windows下注册为服务,开机启动&后台运行](https://natapp.cn/article/windows_service)\n\n- [nssm 用法](http://nssm.cc/usage)","source":"_posts/windows nginx natapp.md","raw":"---\ntitle: windows nginx natapp\ntags: tools\n---\n\n## 实现目标\n1. 通过nginx实现本地资源代理\n2. https 学习及使用\n3. 方便本地前端服务调试\n\n\n## 相关环境\n* windows 7 64\n* nginx v 1.6\n* [natapp](https://natapp.cn)\n* phpStudy \n* 阿里云\n\n## 基本操作\n\n### 线上配置\n1. 注册个人域名\n2. 注册natapp\n3. 域名和natapp进行绑定\n\n### nginx 配置\n\n常用命令\n\n```\nnginx -s stop 强制关闭 \nnginx -s quit 安全关闭 \nnginx -s reload 改变配置文件的时候，重启nginx工作进程，来时配置文件生效 \nnginx -t  测试是否成功\n\n.\\nginx.exe -t # windows 下要添加.\\\n```\n\n**http 代理配置** \n```\n# 静态页面\nlocation /html {\n    alias   F:/HTML/year;\n}\n# 端口代理\nlocation /demo {\n    proxy_pass  http://127.0.0.1:6061;\n}\n# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n# php环境代理\nlocation ~ \\.php(.*)$  {\n\troot E:/WWW;# 这里是站点的根目录\n    fastcgi_pass   127.0.0.1:9000;\n    fastcgi_index  index.php;\n    fastcgi_split_path_info  ^((?U).+\\.php)(/?.+)$;\n    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n    fastcgi_param  PATH_INFO  $fastcgi_path_info;\n    fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;\n    include        fastcgi_params;\n}\n```\n\n\n**https 代理配置** \n\n```\nserver {\n    listen       443;\n    server_name  localhost;\n\n    ssl                  on;\n    ssl_certificate      https/214009859140175.pem; # ssl 加密文件\n    ssl_certificate_key  https/214009859140175.key; # ssl 加密文件\n\n    ssl_session_timeout  5m;\n\n    ssl_protocols  SSLv2 SSLv3 TLSv1;\n    ssl_ciphers  HIGH:!aNULL:!MD5;\n    ssl_prefer_server_ciphers   on;\n\n    location / {\n        root   html;\n        index  index.html index.htm;\n    }\n\n    # 静态页面\n    location /html {\n        alias   F:/HTML/year;\n    }\n\n    # https 功能测试\n    location /https-demo {\n        proxy_pass  http://127.0.0.1:6061;\n    }\n\n}\n\n```\n\n### phpStudy 列表\n![phpStudy 配置](/view/img/phpStudy.jpg)\n\n### Apache 服务配置\n\n![Apache 环境配置](/view/img/Apache-edit.jpg)\n\n### php 配置\n```\nphp-cgi.exe -b 127.0.0.1:9000-c E:\\WWW\n```\n不运行上面代码，无法访问php\n\n### nssm 开机启动&后台运行\n```\nnssm install natapp # 安装服务\nnssm edit natapp # 编辑服务器名\nnssm restart natapp # 重启natapp服务\nnssm remove natapp # 删除XX服务\n```\n\n![nssm 开机启动&后台运行](/view/img/nssm-edit.jpg)\n![自定义服务](/view/img/background-list.jpg)\n\n### 注意事项\n\n1. window 执行exe\n```\n.\\n\n```\n\n2. https 加密文件\n> 这两块必须要有的，可以到阿里云去申请。\n```\nssl_certificate      https/214009859140175.pem; # ssl 加密文件\nssl_certificate_key  https/214009859140175.key; # ssl 加密文件\n```\n\n3. [阿里云](https://www.aliyun.com)【管理控制台】下【证书服务】\n\n## 参考\n- [natapp](https://natapp.cn)\n- [支持https泛域名以及本地(443端口)证书,支持http/2协议](https://natapp.cn/article/https)\n- [Natapp(Ngrok) Windows下注册为服务,开机启动&后台运行](https://natapp.cn/article/windows_service)\n\n- [nssm 用法](http://nssm.cc/usage)","slug":"windows nginx natapp","published":1,"date":"2018-04-27T06:31:01.954Z","updated":"2018-04-27T09:19:17.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghshew70014n1yrjyeywmnx","content":"<h2 id=\"实现目标\"><a href=\"#实现目标\" class=\"headerlink\" title=\"实现目标\"></a>实现目标</h2><ol>\n<li>通过nginx实现本地资源代理</li>\n<li>https 学习及使用</li>\n<li>方便本地前端服务调试</li>\n</ol>\n<h2 id=\"相关环境\"><a href=\"#相关环境\" class=\"headerlink\" title=\"相关环境\"></a>相关环境</h2><ul>\n<li>windows 7 64</li>\n<li>nginx v 1.6</li>\n<li><a href=\"https://natapp.cn\" target=\"_blank\" rel=\"noopener\">natapp</a></li>\n<li>phpStudy </li>\n<li>阿里云</li>\n</ul>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><h3 id=\"线上配置\"><a href=\"#线上配置\" class=\"headerlink\" title=\"线上配置\"></a>线上配置</h3><ol>\n<li>注册个人域名</li>\n<li>注册natapp</li>\n<li>域名和natapp进行绑定</li>\n</ol>\n<h3 id=\"nginx-配置\"><a href=\"#nginx-配置\" class=\"headerlink\" title=\"nginx 配置\"></a>nginx 配置</h3><p>常用命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s stop 强制关闭 </span><br><span class=\"line\">nginx -s quit 安全关闭 </span><br><span class=\"line\">nginx -s reload 改变配置文件的时候，重启nginx工作进程，来时配置文件生效 </span><br><span class=\"line\">nginx -t  测试是否成功</span><br><span class=\"line\"></span><br><span class=\"line\">.\\nginx.exe -t # windows 下要添加.\\</span><br></pre></td></tr></table></figure>\n<p><strong>http 代理配置</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 静态页面</span><br><span class=\"line\">location /html &#123;</span><br><span class=\"line\">    alias   F:/HTML/year;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># 端口代理</span><br><span class=\"line\">location /demo &#123;</span><br><span class=\"line\">    proxy_pass  http://127.0.0.1:6061;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\"># php环境代理</span><br><span class=\"line\">location ~ \\.php(.*)$  &#123;</span><br><span class=\"line\">\troot E:/WWW;# 这里是站点的根目录</span><br><span class=\"line\">    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">    fastcgi_index  index.php;</span><br><span class=\"line\">    fastcgi_split_path_info  ^((?U).+\\.php)(/?.+)$;</span><br><span class=\"line\">    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class=\"line\">    fastcgi_param  PATH_INFO  $fastcgi_path_info;</span><br><span class=\"line\">    fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;</span><br><span class=\"line\">    include        fastcgi_params;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>https 代理配置</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       443;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl                  on;</span><br><span class=\"line\">    ssl_certificate      https/214009859140175.pem; # ssl 加密文件</span><br><span class=\"line\">    ssl_certificate_key  https/214009859140175.key; # ssl 加密文件</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_protocols  SSLv2 SSLv3 TLSv1;</span><br><span class=\"line\">    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    ssl_prefer_server_ciphers   on;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 静态页面</span><br><span class=\"line\">    location /html &#123;</span><br><span class=\"line\">        alias   F:/HTML/year;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # https 功能测试</span><br><span class=\"line\">    location /https-demo &#123;</span><br><span class=\"line\">        proxy_pass  http://127.0.0.1:6061;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"phpStudy-列表\"><a href=\"#phpStudy-列表\" class=\"headerlink\" title=\"phpStudy 列表\"></a>phpStudy 列表</h3><p><img src=\"/view/img/phpStudy.jpg\" alt=\"phpStudy 配置\"></p>\n<h3 id=\"Apache-服务配置\"><a href=\"#Apache-服务配置\" class=\"headerlink\" title=\"Apache 服务配置\"></a>Apache 服务配置</h3><p><img src=\"/view/img/Apache-edit.jpg\" alt=\"Apache 环境配置\"></p>\n<h3 id=\"php-配置\"><a href=\"#php-配置\" class=\"headerlink\" title=\"php 配置\"></a>php 配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php-cgi.exe -b 127.0.0.1:9000-c E:\\WWW</span><br></pre></td></tr></table></figure>\n<p>不运行上面代码，无法访问php</p>\n<h3 id=\"nssm-开机启动-amp-后台运行\"><a href=\"#nssm-开机启动-amp-后台运行\" class=\"headerlink\" title=\"nssm 开机启动&amp;后台运行\"></a>nssm 开机启动&amp;后台运行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nssm install natapp # 安装服务</span><br><span class=\"line\">nssm edit natapp # 编辑服务器名</span><br><span class=\"line\">nssm restart natapp # 重启natapp服务</span><br><span class=\"line\">nssm remove natapp # 删除XX服务</span><br></pre></td></tr></table></figure>\n<p><img src=\"/view/img/nssm-edit.jpg\" alt=\"nssm 开机启动&amp;后台运行\"><br><img src=\"/view/img/background-list.jpg\" alt=\"自定义服务\"></p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li><p>window 执行exe</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\n</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>https 加密文件</p>\n<blockquote>\n<p>这两块必须要有的，可以到阿里云去申请。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_certificate      https/214009859140175.pem; # ssl 加密文件</span><br><span class=\"line\">ssl_certificate_key  https/214009859140175.key; # ssl 加密文件</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.aliyun.com\" target=\"_blank\" rel=\"noopener\">阿里云</a>【管理控制台】下【证书服务】</p>\n</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://natapp.cn\" target=\"_blank\" rel=\"noopener\">natapp</a></li>\n<li><a href=\"https://natapp.cn/article/https\" target=\"_blank\" rel=\"noopener\">支持https泛域名以及本地(443端口)证书,支持http/2协议</a></li>\n<li><p><a href=\"https://natapp.cn/article/windows_service\" target=\"_blank\" rel=\"noopener\">Natapp(Ngrok) Windows下注册为服务,开机启动&amp;后台运行</a></p>\n</li>\n<li><p><a href=\"http://nssm.cc/usage\" target=\"_blank\" rel=\"noopener\">nssm 用法</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实现目标\"><a href=\"#实现目标\" class=\"headerlink\" title=\"实现目标\"></a>实现目标</h2><ol>\n<li>通过nginx实现本地资源代理</li>\n<li>https 学习及使用</li>\n<li>方便本地前端服务调试</li>\n</ol>\n<h2 id=\"相关环境\"><a href=\"#相关环境\" class=\"headerlink\" title=\"相关环境\"></a>相关环境</h2><ul>\n<li>windows 7 64</li>\n<li>nginx v 1.6</li>\n<li><a href=\"https://natapp.cn\" target=\"_blank\" rel=\"noopener\">natapp</a></li>\n<li>phpStudy </li>\n<li>阿里云</li>\n</ul>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><h3 id=\"线上配置\"><a href=\"#线上配置\" class=\"headerlink\" title=\"线上配置\"></a>线上配置</h3><ol>\n<li>注册个人域名</li>\n<li>注册natapp</li>\n<li>域名和natapp进行绑定</li>\n</ol>\n<h3 id=\"nginx-配置\"><a href=\"#nginx-配置\" class=\"headerlink\" title=\"nginx 配置\"></a>nginx 配置</h3><p>常用命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s stop 强制关闭 </span><br><span class=\"line\">nginx -s quit 安全关闭 </span><br><span class=\"line\">nginx -s reload 改变配置文件的时候，重启nginx工作进程，来时配置文件生效 </span><br><span class=\"line\">nginx -t  测试是否成功</span><br><span class=\"line\"></span><br><span class=\"line\">.\\nginx.exe -t # windows 下要添加.\\</span><br></pre></td></tr></table></figure>\n<p><strong>http 代理配置</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 静态页面</span><br><span class=\"line\">location /html &#123;</span><br><span class=\"line\">    alias   F:/HTML/year;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># 端口代理</span><br><span class=\"line\">location /demo &#123;</span><br><span class=\"line\">    proxy_pass  http://127.0.0.1:6061;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class=\"line\"># php环境代理</span><br><span class=\"line\">location ~ \\.php(.*)$  &#123;</span><br><span class=\"line\">\troot E:/WWW;# 这里是站点的根目录</span><br><span class=\"line\">    fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">    fastcgi_index  index.php;</span><br><span class=\"line\">    fastcgi_split_path_info  ^((?U).+\\.php)(/?.+)$;</span><br><span class=\"line\">    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class=\"line\">    fastcgi_param  PATH_INFO  $fastcgi_path_info;</span><br><span class=\"line\">    fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;</span><br><span class=\"line\">    include        fastcgi_params;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>https 代理配置</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       443;</span><br><span class=\"line\">    server_name  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl                  on;</span><br><span class=\"line\">    ssl_certificate      https/214009859140175.pem; # ssl 加密文件</span><br><span class=\"line\">    ssl_certificate_key  https/214009859140175.key; # ssl 加密文件</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_session_timeout  5m;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_protocols  SSLv2 SSLv3 TLSv1;</span><br><span class=\"line\">    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">    ssl_prefer_server_ciphers   on;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   html;</span><br><span class=\"line\">        index  index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 静态页面</span><br><span class=\"line\">    location /html &#123;</span><br><span class=\"line\">        alias   F:/HTML/year;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    # https 功能测试</span><br><span class=\"line\">    location /https-demo &#123;</span><br><span class=\"line\">        proxy_pass  http://127.0.0.1:6061;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"phpStudy-列表\"><a href=\"#phpStudy-列表\" class=\"headerlink\" title=\"phpStudy 列表\"></a>phpStudy 列表</h3><p><img src=\"/view/img/phpStudy.jpg\" alt=\"phpStudy 配置\"></p>\n<h3 id=\"Apache-服务配置\"><a href=\"#Apache-服务配置\" class=\"headerlink\" title=\"Apache 服务配置\"></a>Apache 服务配置</h3><p><img src=\"/view/img/Apache-edit.jpg\" alt=\"Apache 环境配置\"></p>\n<h3 id=\"php-配置\"><a href=\"#php-配置\" class=\"headerlink\" title=\"php 配置\"></a>php 配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php-cgi.exe -b 127.0.0.1:9000-c E:\\WWW</span><br></pre></td></tr></table></figure>\n<p>不运行上面代码，无法访问php</p>\n<h3 id=\"nssm-开机启动-amp-后台运行\"><a href=\"#nssm-开机启动-amp-后台运行\" class=\"headerlink\" title=\"nssm 开机启动&amp;后台运行\"></a>nssm 开机启动&amp;后台运行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nssm install natapp # 安装服务</span><br><span class=\"line\">nssm edit natapp # 编辑服务器名</span><br><span class=\"line\">nssm restart natapp # 重启natapp服务</span><br><span class=\"line\">nssm remove natapp # 删除XX服务</span><br></pre></td></tr></table></figure>\n<p><img src=\"/view/img/nssm-edit.jpg\" alt=\"nssm 开机启动&amp;后台运行\"><br><img src=\"/view/img/background-list.jpg\" alt=\"自定义服务\"></p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li><p>window 执行exe</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\n</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>https 加密文件</p>\n<blockquote>\n<p>这两块必须要有的，可以到阿里云去申请。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssl_certificate      https/214009859140175.pem; # ssl 加密文件</span><br><span class=\"line\">ssl_certificate_key  https/214009859140175.key; # ssl 加密文件</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><a href=\"https://www.aliyun.com\" target=\"_blank\" rel=\"noopener\">阿里云</a>【管理控制台】下【证书服务】</p>\n</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://natapp.cn\" target=\"_blank\" rel=\"noopener\">natapp</a></li>\n<li><a href=\"https://natapp.cn/article/https\" target=\"_blank\" rel=\"noopener\">支持https泛域名以及本地(443端口)证书,支持http/2协议</a></li>\n<li><p><a href=\"https://natapp.cn/article/windows_service\" target=\"_blank\" rel=\"noopener\">Natapp(Ngrok) Windows下注册为服务,开机启动&amp;后台运行</a></p>\n</li>\n<li><p><a href=\"http://nssm.cc/usage\" target=\"_blank\" rel=\"noopener\">nssm 用法</a></p>\n</li>\n</ul>\n"},{"title":"windows 开发常用工具","_content":"\n## window 平台下\n* XMind\n* Sygwin Terminal\n* Cmder\n* GifCam-4.5.CHS\n* Xshell 5\n* 小书屋\n* Listary\n* Visual Studio Code\n* XMind 7\n* filezilla 上传工具\n* navicat 数据库\n* Google Chrome\n* Mozilla Firefox\n* 网易闪电邮 and Foxmail\n* 迅雷极速版\n* PicPick\n* 人生日历\n* Secure\n* phpStudy\n* 微信web开发者工具\n* 净网大师\n* 有道云\n* 钉钉\n* webstorm\n* sublime\n* SourceTree\n\n\n## 浏览器下\n1. Anything to QRcode\n2. JSON Formatter\n3. JSON-handle\n4. Momentum\n5. Octotree\n6. OneTab\n7. Page Ruler\n8. Postman\n9. WEB前端助手(FeHelper)\n\n持续维护中。。。","source":"_posts/tool/window_tools.md","raw":"---\ntitle: windows 开发常用工具\ntags: tools\n---\n\n## window 平台下\n* XMind\n* Sygwin Terminal\n* Cmder\n* GifCam-4.5.CHS\n* Xshell 5\n* 小书屋\n* Listary\n* Visual Studio Code\n* XMind 7\n* filezilla 上传工具\n* navicat 数据库\n* Google Chrome\n* Mozilla Firefox\n* 网易闪电邮 and Foxmail\n* 迅雷极速版\n* PicPick\n* 人生日历\n* Secure\n* phpStudy\n* 微信web开发者工具\n* 净网大师\n* 有道云\n* 钉钉\n* webstorm\n* sublime\n* SourceTree\n\n\n## 浏览器下\n1. Anything to QRcode\n2. JSON Formatter\n3. JSON-handle\n4. Momentum\n5. Octotree\n6. OneTab\n7. Page Ruler\n8. Postman\n9. WEB前端助手(FeHelper)\n\n持续维护中。。。","slug":"tool/window_tools","published":1,"date":"2018-04-27T06:31:01.954Z","updated":"2018-04-27T07:26:19.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghshexr001mn1yrqh8e5tdf","content":"<h2 id=\"window-平台下\"><a href=\"#window-平台下\" class=\"headerlink\" title=\"window 平台下\"></a>window 平台下</h2><ul>\n<li>XMind</li>\n<li>Sygwin Terminal</li>\n<li>Cmder</li>\n<li>GifCam-4.5.CHS</li>\n<li>Xshell 5</li>\n<li>小书屋</li>\n<li>Listary</li>\n<li>Visual Studio Code</li>\n<li>XMind 7</li>\n<li>filezilla 上传工具</li>\n<li>navicat 数据库</li>\n<li>Google Chrome</li>\n<li>Mozilla Firefox</li>\n<li>网易闪电邮 and Foxmail</li>\n<li>迅雷极速版</li>\n<li>PicPick</li>\n<li>人生日历</li>\n<li>Secure</li>\n<li>phpStudy</li>\n<li>微信web开发者工具</li>\n<li>净网大师</li>\n<li>有道云</li>\n<li>钉钉</li>\n<li>webstorm</li>\n<li>sublime</li>\n<li>SourceTree</li>\n</ul>\n<h2 id=\"浏览器下\"><a href=\"#浏览器下\" class=\"headerlink\" title=\"浏览器下\"></a>浏览器下</h2><ol>\n<li>Anything to QRcode</li>\n<li>JSON Formatter</li>\n<li>JSON-handle</li>\n<li>Momentum</li>\n<li>Octotree</li>\n<li>OneTab</li>\n<li>Page Ruler</li>\n<li>Postman</li>\n<li>WEB前端助手(FeHelper)</li>\n</ol>\n<p>持续维护中。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"window-平台下\"><a href=\"#window-平台下\" class=\"headerlink\" title=\"window 平台下\"></a>window 平台下</h2><ul>\n<li>XMind</li>\n<li>Sygwin Terminal</li>\n<li>Cmder</li>\n<li>GifCam-4.5.CHS</li>\n<li>Xshell 5</li>\n<li>小书屋</li>\n<li>Listary</li>\n<li>Visual Studio Code</li>\n<li>XMind 7</li>\n<li>filezilla 上传工具</li>\n<li>navicat 数据库</li>\n<li>Google Chrome</li>\n<li>Mozilla Firefox</li>\n<li>网易闪电邮 and Foxmail</li>\n<li>迅雷极速版</li>\n<li>PicPick</li>\n<li>人生日历</li>\n<li>Secure</li>\n<li>phpStudy</li>\n<li>微信web开发者工具</li>\n<li>净网大师</li>\n<li>有道云</li>\n<li>钉钉</li>\n<li>webstorm</li>\n<li>sublime</li>\n<li>SourceTree</li>\n</ul>\n<h2 id=\"浏览器下\"><a href=\"#浏览器下\" class=\"headerlink\" title=\"浏览器下\"></a>浏览器下</h2><ol>\n<li>Anything to QRcode</li>\n<li>JSON Formatter</li>\n<li>JSON-handle</li>\n<li>Momentum</li>\n<li>Octotree</li>\n<li>OneTab</li>\n<li>Page Ruler</li>\n<li>Postman</li>\n<li>WEB前端助手(FeHelper)</li>\n</ol>\n<p>持续维护中。。。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjghsheur0002n1yrvd8fvzu8","tag_id":"cjghsheuy0006n1yrfwujc560","_id":"cjghshevc000cn1yr4hm2c145"},{"post_id":"cjghsheuu0004n1yr5eh8yd1p","tag_id":"cjghshevb000bn1yrjg70bp44","_id":"cjghshevj000hn1yrr5inq80o"},{"post_id":"cjghshevh000gn1yr441k91t2","tag_id":"cjghshevg000fn1yrwo7zl6we","_id":"cjghshevl000kn1yr37dypops"},{"post_id":"cjghshev20007n1yrp4gzayvq","tag_id":"cjghshevg000fn1yrwo7zl6we","_id":"cjghshevm000mn1yrs8kmi5ol"},{"post_id":"cjghshev60009n1yru39v3px8","tag_id":"cjghshevl000jn1yr3x8qg3kb","_id":"cjghshevp000qn1yrzk8npiwv"},{"post_id":"cjghshev7000an1yrtsh7k941","tag_id":"cjghshevo000on1yroq59z8nr","_id":"cjghshevu000un1yr1ojal0io"},{"post_id":"cjghshevv000vn1yr536w11x1","tag_id":"cjghshevo000on1yroq59z8nr","_id":"cjghshew1000yn1yrw4wwyseq"},{"post_id":"cjghshevc000dn1yrzunjid7q","tag_id":"cjghshevo000on1yroq59z8nr","_id":"cjghshew40010n1yrt5zmn3hf"},{"post_id":"cjghshevf000en1yrddmmfq6b","tag_id":"cjghshevg000fn1yrwo7zl6we","_id":"cjghshew60013n1yrydxns96t"},{"post_id":"cjghshew40011n1yrt51d59s0","tag_id":"cjghshevl000jn1yr3x8qg3kb","_id":"cjghshew90015n1yr7xxa8iuy"},{"post_id":"cjghshew70014n1yrjyeywmnx","tag_id":"cjghshevl000jn1yr3x8qg3kb","_id":"cjghshewc0017n1yr972gm4nj"},{"post_id":"cjghshevj000in1yrvn78lrz7","tag_id":"cjghshew50012n1yr7tsm0g38","_id":"cjghshewc0018n1yropcf2nis"},{"post_id":"cjghshevl000ln1yrc5f3mrk9","tag_id":"cjghshewb0016n1yrv087mqjb","_id":"cjghshewj001an1yrupi97c0k"},{"post_id":"cjghshevm000nn1yrmeghsm7u","tag_id":"cjghshevo000on1yroq59z8nr","_id":"cjghshewk001cn1yrewjpm8d2"},{"post_id":"cjghshevo000pn1yr1sh8ileh","tag_id":"cjghshevo000on1yroq59z8nr","_id":"cjghshewk001en1yreagwrsht"},{"post_id":"cjghshevp000rn1yrkwacyqh1","tag_id":"cjghshew50012n1yr7tsm0g38","_id":"cjghshewl001gn1yrpd4ruptm"},{"post_id":"cjghshevr000sn1yrvr9p5h30","tag_id":"cjghshewl001fn1yrepfzpxhu","_id":"cjghshewl001in1yry8g61reh"},{"post_id":"cjghshevx000wn1yr501xbchb","tag_id":"cjghshewl001hn1yrahtmadxj","_id":"cjghshewm001kn1yrxuzop4rw"},{"post_id":"cjghshew1000zn1yrhu36gfqw","tag_id":"cjghshewl001jn1yr950h3fil","_id":"cjghshewm001ln1yrlwzasbdx"},{"post_id":"cjghshexr001mn1yrqh8e5tdf","tag_id":"cjghshevl000jn1yr3x8qg3kb","_id":"cjghshexu001nn1yrk3la195y"}],"Tag":[{"name":"book","_id":"cjghsheuy0006n1yrfwujc560"},{"name":"java","_id":"cjghshevb000bn1yrjg70bp44"},{"name":"node.js","_id":"cjghshevg000fn1yrwo7zl6we"},{"name":"tools","_id":"cjghshevl000jn1yr3x8qg3kb"},{"name":"node-tools","_id":"cjghshevo000on1yroq59z8nr"},{"name":"shell","_id":"cjghshew50012n1yr7tsm0g38"},{"name":"linux","_id":"cjghshewb0016n1yrv087mqjb"},{"name":"upload","_id":"cjghshewl001fn1yrepfzpxhu"},{"name":"javascript","_id":"cjghshewl001hn1yrahtmadxj"},{"name":"api","_id":"cjghshewl001jn1yr950h3fil"}]}}